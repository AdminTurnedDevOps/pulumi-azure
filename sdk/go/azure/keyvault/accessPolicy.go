// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keyvault

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Key Vault Access Policy.
// 
// > **NOTE:** It's possible to define Key Vault Access Policies both within the `keyvault.KeyVault` resource via the `accessPolicy` block and by using the `keyvault.AccessPolicy` resource. However it's not possible to use both methods to manage Access Policies within a KeyVault, since there'll be conflicts.
// 
// > **NOTE:** Azure permits a maximum of 1024 Access Policies per Key Vault - [more information can be found in this document](https://docs.microsoft.com/en-us/azure/key-vault/key-vault-secure-your-key-vault#data-plane-access-control).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/key_vault_access_policy.html.markdown.
type AccessPolicy struct {
	pulumi.CustomResourceState

	// The object ID of an Application in Azure Active Directory.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`

	// List of certificate permissions, must be one or more from
	// the following: `backup`, `create`, `delete`, `deleteissuers`, `get`, `getissuers`, `import`, `list`, `listissuers`,
	// `managecontacts`, `manageissuers`, `purge`, `recover`, `restore`, `setissuers` and `update`.
	CertificatePermissions pulumi.StringArrayOutput `pulumi:"certificatePermissions"`

	// List of key permissions, must be one or more from
	// the following: `backup`, `create`, `decrypt`, `delete`, `encrypt`, `get`, `import`, `list`, `purge`,
	// `recover`, `restore`, `sign`, `unwrapKey`, `update`, `verify` and `wrapKey`.
	KeyPermissions pulumi.StringArrayOutput `pulumi:"keyPermissions"`

	// Specifies the id of the Key Vault resource. Changing this
	// forces a new resource to be created.
	KeyVaultId pulumi.StringOutput `pulumi:"keyVaultId"`

	// The object ID of a user, service principal or security
	// group in the Azure Active Directory tenant for the vault. The object ID must
	// be unique for the list of access policies. Changing this forces a new resource
	// to be created.
	ObjectId pulumi.StringOutput `pulumi:"objectId"`

	// The name of the resource group in which to
	// create the namespace. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// List of secret permissions, must be one or more
	// from the following: `backup`, `delete`, `get`, `list`, `purge`, `recover`, `restore` and `set`.
	SecretPermissions pulumi.StringArrayOutput `pulumi:"secretPermissions"`

	// List of storage permissions, must be one or more from the following: `backup`, `delete`, `deletesas`, `get`, `getsas`, `list`, `listsas`, `purge`, `recover`, `regeneratekey`, `restore`, `set`, `setsas` and `update`.
	StoragePermissions pulumi.StringArrayOutput `pulumi:"storagePermissions"`

	// The Azure Active Directory tenant ID that should be used
	// for authenticating requests to the key vault. Changing this forces a new resource
	// to be created.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`

	// Specifies the name of the Key Vault resource. Changing this
	// forces a new resource to be created.
	VaultName pulumi.StringOutput `pulumi:"vaultName"`
}

// NewAccessPolicy registers a new resource with the given unique name, arguments, and options.
func NewAccessPolicy(ctx *pulumi.Context,
	name string, args *AccessPolicyArgs, opts ...pulumi.ResourceOption) (*AccessPolicy, error) {
	if args == nil || args.ObjectId == nil {
		return nil, errors.New("missing required argument 'ObjectId'")
	}
	if args == nil || args.TenantId == nil {
		return nil, errors.New("missing required argument 'TenantId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ApplicationId; i != nil { inputs["applicationId"] = i.ToStringOutput() }
		if i := args.CertificatePermissions; i != nil { inputs["certificatePermissions"] = i.ToStringArrayOutput() }
		if i := args.KeyPermissions; i != nil { inputs["keyPermissions"] = i.ToStringArrayOutput() }
		if i := args.KeyVaultId; i != nil { inputs["keyVaultId"] = i.ToStringOutput() }
		if i := args.ObjectId; i != nil { inputs["objectId"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.SecretPermissions; i != nil { inputs["secretPermissions"] = i.ToStringArrayOutput() }
		if i := args.StoragePermissions; i != nil { inputs["storagePermissions"] = i.ToStringArrayOutput() }
		if i := args.TenantId; i != nil { inputs["tenantId"] = i.ToStringOutput() }
		if i := args.VaultName; i != nil { inputs["vaultName"] = i.ToStringOutput() }
	}
	var resource AccessPolicy
	err := ctx.RegisterResource("azure:keyvault/accessPolicy:AccessPolicy", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessPolicy gets an existing AccessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessPolicyState, opts ...pulumi.ResourceOption) (*AccessPolicy, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ApplicationId; i != nil { inputs["applicationId"] = i.ToStringOutput() }
		if i := state.CertificatePermissions; i != nil { inputs["certificatePermissions"] = i.ToStringArrayOutput() }
		if i := state.KeyPermissions; i != nil { inputs["keyPermissions"] = i.ToStringArrayOutput() }
		if i := state.KeyVaultId; i != nil { inputs["keyVaultId"] = i.ToStringOutput() }
		if i := state.ObjectId; i != nil { inputs["objectId"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.SecretPermissions; i != nil { inputs["secretPermissions"] = i.ToStringArrayOutput() }
		if i := state.StoragePermissions; i != nil { inputs["storagePermissions"] = i.ToStringArrayOutput() }
		if i := state.TenantId; i != nil { inputs["tenantId"] = i.ToStringOutput() }
		if i := state.VaultName; i != nil { inputs["vaultName"] = i.ToStringOutput() }
	}
	var resource AccessPolicy
	err := ctx.ReadResource("azure:keyvault/accessPolicy:AccessPolicy", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessPolicy resources.
type AccessPolicyState struct {
	// The object ID of an Application in Azure Active Directory.
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
	// List of certificate permissions, must be one or more from
	// the following: `backup`, `create`, `delete`, `deleteissuers`, `get`, `getissuers`, `import`, `list`, `listissuers`,
	// `managecontacts`, `manageissuers`, `purge`, `recover`, `restore`, `setissuers` and `update`.
	CertificatePermissions pulumi.StringArrayInput `pulumi:"certificatePermissions"`
	// List of key permissions, must be one or more from
	// the following: `backup`, `create`, `decrypt`, `delete`, `encrypt`, `get`, `import`, `list`, `purge`,
	// `recover`, `restore`, `sign`, `unwrapKey`, `update`, `verify` and `wrapKey`.
	KeyPermissions pulumi.StringArrayInput `pulumi:"keyPermissions"`
	// Specifies the id of the Key Vault resource. Changing this
	// forces a new resource to be created.
	KeyVaultId pulumi.StringInput `pulumi:"keyVaultId"`
	// The object ID of a user, service principal or security
	// group in the Azure Active Directory tenant for the vault. The object ID must
	// be unique for the list of access policies. Changing this forces a new resource
	// to be created.
	ObjectId pulumi.StringInput `pulumi:"objectId"`
	// The name of the resource group in which to
	// create the namespace. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// List of secret permissions, must be one or more
	// from the following: `backup`, `delete`, `get`, `list`, `purge`, `recover`, `restore` and `set`.
	SecretPermissions pulumi.StringArrayInput `pulumi:"secretPermissions"`
	// List of storage permissions, must be one or more from the following: `backup`, `delete`, `deletesas`, `get`, `getsas`, `list`, `listsas`, `purge`, `recover`, `regeneratekey`, `restore`, `set`, `setsas` and `update`.
	StoragePermissions pulumi.StringArrayInput `pulumi:"storagePermissions"`
	// The Azure Active Directory tenant ID that should be used
	// for authenticating requests to the key vault. Changing this forces a new resource
	// to be created.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// Specifies the name of the Key Vault resource. Changing this
	// forces a new resource to be created.
	VaultName pulumi.StringInput `pulumi:"vaultName"`
}

// The set of arguments for constructing a AccessPolicy resource.
type AccessPolicyArgs struct {
	// The object ID of an Application in Azure Active Directory.
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
	// List of certificate permissions, must be one or more from
	// the following: `backup`, `create`, `delete`, `deleteissuers`, `get`, `getissuers`, `import`, `list`, `listissuers`,
	// `managecontacts`, `manageissuers`, `purge`, `recover`, `restore`, `setissuers` and `update`.
	CertificatePermissions pulumi.StringArrayInput `pulumi:"certificatePermissions"`
	// List of key permissions, must be one or more from
	// the following: `backup`, `create`, `decrypt`, `delete`, `encrypt`, `get`, `import`, `list`, `purge`,
	// `recover`, `restore`, `sign`, `unwrapKey`, `update`, `verify` and `wrapKey`.
	KeyPermissions pulumi.StringArrayInput `pulumi:"keyPermissions"`
	// Specifies the id of the Key Vault resource. Changing this
	// forces a new resource to be created.
	KeyVaultId pulumi.StringInput `pulumi:"keyVaultId"`
	// The object ID of a user, service principal or security
	// group in the Azure Active Directory tenant for the vault. The object ID must
	// be unique for the list of access policies. Changing this forces a new resource
	// to be created.
	ObjectId pulumi.StringInput `pulumi:"objectId"`
	// The name of the resource group in which to
	// create the namespace. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// List of secret permissions, must be one or more
	// from the following: `backup`, `delete`, `get`, `list`, `purge`, `recover`, `restore` and `set`.
	SecretPermissions pulumi.StringArrayInput `pulumi:"secretPermissions"`
	// List of storage permissions, must be one or more from the following: `backup`, `delete`, `deletesas`, `get`, `getsas`, `list`, `listsas`, `purge`, `recover`, `regeneratekey`, `restore`, `set`, `setsas` and `update`.
	StoragePermissions pulumi.StringArrayInput `pulumi:"storagePermissions"`
	// The Azure Active Directory tenant ID that should be used
	// for authenticating requests to the key vault. Changing this forces a new resource
	// to be created.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// Specifies the name of the Key Vault resource. Changing this
	// forces a new resource to be created.
	VaultName pulumi.StringInput `pulumi:"vaultName"`
}
