// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keyvault

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Key Vault Secret.
// 
// > **Note:** All arguments including the secret value will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/key_vault_secret.html.markdown.
type Secret struct {
	pulumi.CustomResourceState

	// Specifies the content type for the Key Vault Secret.
	ContentType pulumi.StringOutput `pulumi:"contentType"`

	// Expiration UTC datetime (Y-m-d'T'H:M:S'Z').
	ExpirationDate pulumi.StringOutput `pulumi:"expirationDate"`

	// The ID of the Key Vault where the Secret should be created.
	KeyVaultId pulumi.StringOutput `pulumi:"keyVaultId"`

	// Specifies the name of the Key Vault Secret. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// Key not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z').
	NotBeforeDate pulumi.StringOutput `pulumi:"notBeforeDate"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// Specifies the value of the Key Vault Secret.
	Value pulumi.StringOutput `pulumi:"value"`

	VaultUri pulumi.StringOutput `pulumi:"vaultUri"`

	// The current version of the Key Vault Secret.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewSecret registers a new resource with the given unique name, arguments, and options.
func NewSecret(ctx *pulumi.Context,
	name string, args *SecretArgs, opts ...pulumi.ResourceOption) (*Secret, error) {
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ContentType; i != nil { inputs["contentType"] = i.ToStringOutput() }
		if i := args.ExpirationDate; i != nil { inputs["expirationDate"] = i.ToStringOutput() }
		if i := args.KeyVaultId; i != nil { inputs["keyVaultId"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.NotBeforeDate; i != nil { inputs["notBeforeDate"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.Value; i != nil { inputs["value"] = i.ToStringOutput() }
		if i := args.VaultUri; i != nil { inputs["vaultUri"] = i.ToStringOutput() }
	}
	var resource Secret
	err := ctx.RegisterResource("azure:keyvault/secret:Secret", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecret gets an existing Secret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretState, opts ...pulumi.ResourceOption) (*Secret, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ContentType; i != nil { inputs["contentType"] = i.ToStringOutput() }
		if i := state.ExpirationDate; i != nil { inputs["expirationDate"] = i.ToStringOutput() }
		if i := state.KeyVaultId; i != nil { inputs["keyVaultId"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.NotBeforeDate; i != nil { inputs["notBeforeDate"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.Value; i != nil { inputs["value"] = i.ToStringOutput() }
		if i := state.VaultUri; i != nil { inputs["vaultUri"] = i.ToStringOutput() }
		if i := state.Version; i != nil { inputs["version"] = i.ToStringOutput() }
	}
	var resource Secret
	err := ctx.ReadResource("azure:keyvault/secret:Secret", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Secret resources.
type SecretState struct {
	// Specifies the content type for the Key Vault Secret.
	ContentType pulumi.StringInput `pulumi:"contentType"`
	// Expiration UTC datetime (Y-m-d'T'H:M:S'Z').
	ExpirationDate pulumi.StringInput `pulumi:"expirationDate"`
	// The ID of the Key Vault where the Secret should be created.
	KeyVaultId pulumi.StringInput `pulumi:"keyVaultId"`
	// Specifies the name of the Key Vault Secret. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// Key not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z').
	NotBeforeDate pulumi.StringInput `pulumi:"notBeforeDate"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Specifies the value of the Key Vault Secret.
	Value pulumi.StringInput `pulumi:"value"`
	VaultUri pulumi.StringInput `pulumi:"vaultUri"`
	// The current version of the Key Vault Secret.
	Version pulumi.StringInput `pulumi:"version"`
}

// The set of arguments for constructing a Secret resource.
type SecretArgs struct {
	// Specifies the content type for the Key Vault Secret.
	ContentType pulumi.StringInput `pulumi:"contentType"`
	// Expiration UTC datetime (Y-m-d'T'H:M:S'Z').
	ExpirationDate pulumi.StringInput `pulumi:"expirationDate"`
	// The ID of the Key Vault where the Secret should be created.
	KeyVaultId pulumi.StringInput `pulumi:"keyVaultId"`
	// Specifies the name of the Key Vault Secret. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// Key not usable before the provided UTC datetime (Y-m-d'T'H:M:S'Z').
	NotBeforeDate pulumi.StringInput `pulumi:"notBeforeDate"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Specifies the value of the Key Vault Secret.
	Value pulumi.StringInput `pulumi:"value"`
	VaultUri pulumi.StringInput `pulumi:"vaultUri"`
}
