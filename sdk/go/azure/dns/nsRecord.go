// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Enables you to manage DNS NS Records within Azure DNS.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/dns_ns_record.html.markdown.
type NsRecord struct {
	pulumi.CustomResourceState

	// The name of the DNS NS Record.
	Name pulumi.StringOutput `pulumi:"name"`

	// A list of values that make up the NS record. Each `record` block supports fields documented below. This field has been deprecated and will be removed in a future release.
	Record NsRecordRecordArrayOutput `pulumi:"record"`

	// A list of values that make up the NS record. *WARNING*: Either `records` or `record` is required.
	Records pulumi.StringArrayOutput `pulumi:"records"`

	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntOutput `pulumi:"ttl"`

	// Specifies the DNS Zone where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewNsRecord registers a new resource with the given unique name, arguments, and options.
func NewNsRecord(ctx *pulumi.Context,
	name string, args *NsRecordArgs, opts ...pulumi.ResourceOption) (*NsRecord, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Ttl == nil {
		return nil, errors.New("missing required argument 'Ttl'")
	}
	if args == nil || args.ZoneName == nil {
		return nil, errors.New("missing required argument 'ZoneName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Record; i != nil { inputs["record"] = i.ToNsRecordRecordArrayOutput() }
		if i := args.Records; i != nil { inputs["records"] = i.ToStringArrayOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.Ttl; i != nil { inputs["ttl"] = i.ToIntOutput() }
		if i := args.ZoneName; i != nil { inputs["zoneName"] = i.ToStringOutput() }
	}
	var resource NsRecord
	err := ctx.RegisterResource("azure:dns/nsRecord:NsRecord", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNsRecord gets an existing NsRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNsRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NsRecordState, opts ...pulumi.ResourceOption) (*NsRecord, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Record; i != nil { inputs["record"] = i.ToNsRecordRecordArrayOutput() }
		if i := state.Records; i != nil { inputs["records"] = i.ToStringArrayOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.Ttl; i != nil { inputs["ttl"] = i.ToIntOutput() }
		if i := state.ZoneName; i != nil { inputs["zoneName"] = i.ToStringOutput() }
	}
	var resource NsRecord
	err := ctx.ReadResource("azure:dns/nsRecord:NsRecord", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NsRecord resources.
type NsRecordState struct {
	// The name of the DNS NS Record.
	Name pulumi.StringInput `pulumi:"name"`
	// A list of values that make up the NS record. Each `record` block supports fields documented below. This field has been deprecated and will be removed in a future release.
	Record NsRecordRecordArrayInput `pulumi:"record"`
	// A list of values that make up the NS record. *WARNING*: Either `records` or `record` is required.
	Records pulumi.StringArrayInput `pulumi:"records"`
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntInput `pulumi:"ttl"`
	// Specifies the DNS Zone where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}

// The set of arguments for constructing a NsRecord resource.
type NsRecordArgs struct {
	// The name of the DNS NS Record.
	Name pulumi.StringInput `pulumi:"name"`
	// A list of values that make up the NS record. Each `record` block supports fields documented below. This field has been deprecated and will be removed in a future release.
	Record NsRecordRecordArrayInput `pulumi:"record"`
	// A list of values that make up the NS record. *WARNING*: Either `records` or `record` is required.
	Records pulumi.StringArrayInput `pulumi:"records"`
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The Time To Live (TTL) of the DNS record in seconds.
	Ttl pulumi.IntInput `pulumi:"ttl"`
	// Specifies the DNS Zone where the DNS Zone (parent resource) exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}
type NsRecordRecord struct {
	Nsdname string `pulumi:"nsdname"`
}
var nsRecordRecordType = reflect.TypeOf((*NsRecordRecord)(nil)).Elem()

type NsRecordRecordInput interface {
	pulumi.Input

	ToNsRecordRecordOutput() NsRecordRecordOutput
	ToNsRecordRecordOutputWithContext(ctx context.Context) NsRecordRecordOutput
}

type NsRecordRecordArgs struct {
	Nsdname pulumi.StringInput `pulumi:"nsdname"`
}

func (NsRecordRecordArgs) ElementType() reflect.Type {
	return nsRecordRecordType
}

func (a NsRecordRecordArgs) ToNsRecordRecordOutput() NsRecordRecordOutput {
	return pulumi.ToOutput(a).(NsRecordRecordOutput)
}

func (a NsRecordRecordArgs) ToNsRecordRecordOutputWithContext(ctx context.Context) NsRecordRecordOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NsRecordRecordOutput)
}

type NsRecordRecordOutput struct { *pulumi.OutputState }

func (o NsRecordRecordOutput) Nsdname() pulumi.StringOutput {
	return o.Apply(func(v NsRecordRecord) string {
		return v.Nsdname
	}).(pulumi.StringOutput)
}

func (NsRecordRecordOutput) ElementType() reflect.Type {
	return nsRecordRecordType
}

func (o NsRecordRecordOutput) ToNsRecordRecordOutput() NsRecordRecordOutput {
	return o
}

func (o NsRecordRecordOutput) ToNsRecordRecordOutputWithContext(ctx context.Context) NsRecordRecordOutput {
	return o
}

func init() { pulumi.RegisterOutputType(NsRecordRecordOutput{}) }

var nsRecordRecordArrayType = reflect.TypeOf((*[]NsRecordRecord)(nil)).Elem()

type NsRecordRecordArrayInput interface {
	pulumi.Input

	ToNsRecordRecordArrayOutput() NsRecordRecordArrayOutput
	ToNsRecordRecordArrayOutputWithContext(ctx context.Context) NsRecordRecordArrayOutput
}

type NsRecordRecordArrayArgs []NsRecordRecordInput

func (NsRecordRecordArrayArgs) ElementType() reflect.Type {
	return nsRecordRecordArrayType
}

func (a NsRecordRecordArrayArgs) ToNsRecordRecordArrayOutput() NsRecordRecordArrayOutput {
	return pulumi.ToOutput(a).(NsRecordRecordArrayOutput)
}

func (a NsRecordRecordArrayArgs) ToNsRecordRecordArrayOutputWithContext(ctx context.Context) NsRecordRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NsRecordRecordArrayOutput)
}

type NsRecordRecordArrayOutput struct { *pulumi.OutputState }

func (o NsRecordRecordArrayOutput) Index(i pulumi.IntInput) NsRecordRecordOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) NsRecordRecord {
		return vs[0].([]NsRecordRecord)[vs[1].(int)]
	}).(NsRecordRecordOutput)
}

func (NsRecordRecordArrayOutput) ElementType() reflect.Type {
	return nsRecordRecordArrayType
}

func (o NsRecordRecordArrayOutput) ToNsRecordRecordArrayOutput() NsRecordRecordArrayOutput {
	return o
}

func (o NsRecordRecordArrayOutput) ToNsRecordRecordArrayOutputWithContext(ctx context.Context) NsRecordRecordArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(NsRecordRecordArrayOutput{}) }

