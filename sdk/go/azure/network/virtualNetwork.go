// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a virtual network including any configured subnets. Each subnet can
// optionally be configured with a security group to be associated with the subnet.
// 
// > **NOTE on Virtual Networks and Subnet's:** This provider currently
// provides both a standalone Subnet resource, and allows for Subnets to be defined in-line within the Virtual Network resource.
// At this time you cannot use a Virtual Network with in-line Subnets in conjunction with any Subnet resources. Doing so will cause a conflict of Subnet configurations and will overwrite Subnet's.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/virtual_network.html.markdown.
type VirtualNetwork struct {
	pulumi.CustomResourceState

	// The address space that is used the virtual
	// network. You can supply more than one address space. Changing this forces
	// a new resource to be created.
	AddressSpaces pulumi.StringArrayOutput `pulumi:"addressSpaces"`

	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan VirtualNetworkDdosProtectionPlanOutput `pulumi:"ddosProtectionPlan"`

	// List of IP addresses of DNS servers
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`

	// The location/region where the virtual network is
	// created. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// The name of the virtual network. Changing this forces a
	// new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the resource group in which to
	// create the virtual network.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// Can be specified multiple times to define multiple
	// subnets. Each `subnet` block supports fields documented below.
	Subnets VirtualNetworkSubnetsArrayOutput `pulumi:"subnets"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewVirtualNetwork registers a new resource with the given unique name, arguments, and options.
func NewVirtualNetwork(ctx *pulumi.Context,
	name string, args *VirtualNetworkArgs, opts ...pulumi.ResourceOption) (*VirtualNetwork, error) {
	if args == nil || args.AddressSpaces == nil {
		return nil, errors.New("missing required argument 'AddressSpaces'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AddressSpaces; i != nil { inputs["addressSpaces"] = i.ToStringArrayOutput() }
		if i := args.DdosProtectionPlan; i != nil { inputs["ddosProtectionPlan"] = i.ToVirtualNetworkDdosProtectionPlanOutput() }
		if i := args.DnsServers; i != nil { inputs["dnsServers"] = i.ToStringArrayOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Subnets; i != nil { inputs["subnets"] = i.ToVirtualNetworkSubnetsArrayOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource VirtualNetwork
	err := ctx.RegisterResource("azure:network/virtualNetwork:VirtualNetwork", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualNetwork gets an existing VirtualNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualNetworkState, opts ...pulumi.ResourceOption) (*VirtualNetwork, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AddressSpaces; i != nil { inputs["addressSpaces"] = i.ToStringArrayOutput() }
		if i := state.DdosProtectionPlan; i != nil { inputs["ddosProtectionPlan"] = i.ToVirtualNetworkDdosProtectionPlanOutput() }
		if i := state.DnsServers; i != nil { inputs["dnsServers"] = i.ToStringArrayOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.Subnets; i != nil { inputs["subnets"] = i.ToVirtualNetworkSubnetsArrayOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource VirtualNetwork
	err := ctx.ReadResource("azure:network/virtualNetwork:VirtualNetwork", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualNetwork resources.
type VirtualNetworkState struct {
	// The address space that is used the virtual
	// network. You can supply more than one address space. Changing this forces
	// a new resource to be created.
	AddressSpaces pulumi.StringArrayInput `pulumi:"addressSpaces"`
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan VirtualNetworkDdosProtectionPlanInput `pulumi:"ddosProtectionPlan"`
	// List of IP addresses of DNS servers
	DnsServers pulumi.StringArrayInput `pulumi:"dnsServers"`
	// The location/region where the virtual network is
	// created. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the virtual network. Changing this forces a
	// new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which to
	// create the virtual network.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Can be specified multiple times to define multiple
	// subnets. Each `subnet` block supports fields documented below.
	Subnets VirtualNetworkSubnetsArrayInput `pulumi:"subnets"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a VirtualNetwork resource.
type VirtualNetworkArgs struct {
	// The address space that is used the virtual
	// network. You can supply more than one address space. Changing this forces
	// a new resource to be created.
	AddressSpaces pulumi.StringArrayInput `pulumi:"addressSpaces"`
	// A `ddosProtectionPlan` block as documented below.
	DdosProtectionPlan VirtualNetworkDdosProtectionPlanInput `pulumi:"ddosProtectionPlan"`
	// List of IP addresses of DNS servers
	DnsServers pulumi.StringArrayInput `pulumi:"dnsServers"`
	// The location/region where the virtual network is
	// created. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the virtual network. Changing this forces a
	// new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which to
	// create the virtual network.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Can be specified multiple times to define multiple
	// subnets. Each `subnet` block supports fields documented below.
	Subnets VirtualNetworkSubnetsArrayInput `pulumi:"subnets"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
type VirtualNetworkDdosProtectionPlan struct {
	Enable bool `pulumi:"enable"`
	// The ID of this subnet.
	Id string `pulumi:"id"`
}
var virtualNetworkDdosProtectionPlanType = reflect.TypeOf((*VirtualNetworkDdosProtectionPlan)(nil)).Elem()

type VirtualNetworkDdosProtectionPlanInput interface {
	pulumi.Input

	ToVirtualNetworkDdosProtectionPlanOutput() VirtualNetworkDdosProtectionPlanOutput
	ToVirtualNetworkDdosProtectionPlanOutputWithContext(ctx context.Context) VirtualNetworkDdosProtectionPlanOutput
}

type VirtualNetworkDdosProtectionPlanArgs struct {
	Enable pulumi.BoolInput `pulumi:"enable"`
	// The ID of this subnet.
	Id pulumi.StringInput `pulumi:"id"`
}

func (VirtualNetworkDdosProtectionPlanArgs) ElementType() reflect.Type {
	return virtualNetworkDdosProtectionPlanType
}

func (a VirtualNetworkDdosProtectionPlanArgs) ToVirtualNetworkDdosProtectionPlanOutput() VirtualNetworkDdosProtectionPlanOutput {
	return pulumi.ToOutput(a).(VirtualNetworkDdosProtectionPlanOutput)
}

func (a VirtualNetworkDdosProtectionPlanArgs) ToVirtualNetworkDdosProtectionPlanOutputWithContext(ctx context.Context) VirtualNetworkDdosProtectionPlanOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VirtualNetworkDdosProtectionPlanOutput)
}

type VirtualNetworkDdosProtectionPlanOutput struct { *pulumi.OutputState }

func (o VirtualNetworkDdosProtectionPlanOutput) Enable() pulumi.BoolOutput {
	return o.Apply(func(v VirtualNetworkDdosProtectionPlan) bool {
		return v.Enable
	}).(pulumi.BoolOutput)
}

// The ID of this subnet.
func (o VirtualNetworkDdosProtectionPlanOutput) Id() pulumi.StringOutput {
	return o.Apply(func(v VirtualNetworkDdosProtectionPlan) string {
		return v.Id
	}).(pulumi.StringOutput)
}

func (VirtualNetworkDdosProtectionPlanOutput) ElementType() reflect.Type {
	return virtualNetworkDdosProtectionPlanType
}

func (o VirtualNetworkDdosProtectionPlanOutput) ToVirtualNetworkDdosProtectionPlanOutput() VirtualNetworkDdosProtectionPlanOutput {
	return o
}

func (o VirtualNetworkDdosProtectionPlanOutput) ToVirtualNetworkDdosProtectionPlanOutputWithContext(ctx context.Context) VirtualNetworkDdosProtectionPlanOutput {
	return o
}

func init() { pulumi.RegisterOutputType(VirtualNetworkDdosProtectionPlanOutput{}) }

type VirtualNetworkSubnets struct {
	AddressPrefix string `pulumi:"addressPrefix"`
	// The ID of this subnet.
	Id *string `pulumi:"id"`
	// The name of the virtual network. Changing this forces a
	// new resource to be created.
	Name string `pulumi:"name"`
	SecurityGroup *string `pulumi:"securityGroup"`
}
var virtualNetworkSubnetsType = reflect.TypeOf((*VirtualNetworkSubnets)(nil)).Elem()

type VirtualNetworkSubnetsInput interface {
	pulumi.Input

	ToVirtualNetworkSubnetsOutput() VirtualNetworkSubnetsOutput
	ToVirtualNetworkSubnetsOutputWithContext(ctx context.Context) VirtualNetworkSubnetsOutput
}

type VirtualNetworkSubnetsArgs struct {
	AddressPrefix pulumi.StringInput `pulumi:"addressPrefix"`
	// The ID of this subnet.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the virtual network. Changing this forces a
	// new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	SecurityGroup pulumi.StringInput `pulumi:"securityGroup"`
}

func (VirtualNetworkSubnetsArgs) ElementType() reflect.Type {
	return virtualNetworkSubnetsType
}

func (a VirtualNetworkSubnetsArgs) ToVirtualNetworkSubnetsOutput() VirtualNetworkSubnetsOutput {
	return pulumi.ToOutput(a).(VirtualNetworkSubnetsOutput)
}

func (a VirtualNetworkSubnetsArgs) ToVirtualNetworkSubnetsOutputWithContext(ctx context.Context) VirtualNetworkSubnetsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VirtualNetworkSubnetsOutput)
}

type VirtualNetworkSubnetsOutput struct { *pulumi.OutputState }

func (o VirtualNetworkSubnetsOutput) AddressPrefix() pulumi.StringOutput {
	return o.Apply(func(v VirtualNetworkSubnets) string {
		return v.AddressPrefix
	}).(pulumi.StringOutput)
}

// The ID of this subnet.
func (o VirtualNetworkSubnetsOutput) Id() pulumi.StringOutput {
	return o.Apply(func(v VirtualNetworkSubnets) string {
		if v.Id == nil { return *new(string) } else { return *v.Id }
	}).(pulumi.StringOutput)
}

// The name of the virtual network. Changing this forces a
// new resource to be created.
func (o VirtualNetworkSubnetsOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v VirtualNetworkSubnets) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o VirtualNetworkSubnetsOutput) SecurityGroup() pulumi.StringOutput {
	return o.Apply(func(v VirtualNetworkSubnets) string {
		if v.SecurityGroup == nil { return *new(string) } else { return *v.SecurityGroup }
	}).(pulumi.StringOutput)
}

func (VirtualNetworkSubnetsOutput) ElementType() reflect.Type {
	return virtualNetworkSubnetsType
}

func (o VirtualNetworkSubnetsOutput) ToVirtualNetworkSubnetsOutput() VirtualNetworkSubnetsOutput {
	return o
}

func (o VirtualNetworkSubnetsOutput) ToVirtualNetworkSubnetsOutputWithContext(ctx context.Context) VirtualNetworkSubnetsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(VirtualNetworkSubnetsOutput{}) }

var virtualNetworkSubnetsArrayType = reflect.TypeOf((*[]VirtualNetworkSubnets)(nil)).Elem()

type VirtualNetworkSubnetsArrayInput interface {
	pulumi.Input

	ToVirtualNetworkSubnetsArrayOutput() VirtualNetworkSubnetsArrayOutput
	ToVirtualNetworkSubnetsArrayOutputWithContext(ctx context.Context) VirtualNetworkSubnetsArrayOutput
}

type VirtualNetworkSubnetsArrayArgs []VirtualNetworkSubnetsInput

func (VirtualNetworkSubnetsArrayArgs) ElementType() reflect.Type {
	return virtualNetworkSubnetsArrayType
}

func (a VirtualNetworkSubnetsArrayArgs) ToVirtualNetworkSubnetsArrayOutput() VirtualNetworkSubnetsArrayOutput {
	return pulumi.ToOutput(a).(VirtualNetworkSubnetsArrayOutput)
}

func (a VirtualNetworkSubnetsArrayArgs) ToVirtualNetworkSubnetsArrayOutputWithContext(ctx context.Context) VirtualNetworkSubnetsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VirtualNetworkSubnetsArrayOutput)
}

type VirtualNetworkSubnetsArrayOutput struct { *pulumi.OutputState }

func (o VirtualNetworkSubnetsArrayOutput) Index(i pulumi.IntInput) VirtualNetworkSubnetsOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) VirtualNetworkSubnets {
		return vs[0].([]VirtualNetworkSubnets)[vs[1].(int)]
	}).(VirtualNetworkSubnetsOutput)
}

func (VirtualNetworkSubnetsArrayOutput) ElementType() reflect.Type {
	return virtualNetworkSubnetsArrayType
}

func (o VirtualNetworkSubnetsArrayOutput) ToVirtualNetworkSubnetsArrayOutput() VirtualNetworkSubnetsArrayOutput {
	return o
}

func (o VirtualNetworkSubnetsArrayOutput) ToVirtualNetworkSubnetsArrayOutputWithContext(ctx context.Context) VirtualNetworkSubnetsArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(VirtualNetworkSubnetsArrayOutput{}) }

