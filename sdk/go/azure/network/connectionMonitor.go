// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Configures a Connection Monitor to monitor communication between a Virtual Machine and an endpoint using a Network Watcher.
// 
// > **NOTE:** This resource has been deprecated in favour of the `network.NetworkConnectionMonitor` resource and will be removed in the next major version of the AzureRM Provider. The new resource shares the same fields as this one, and information on migrating across can be found in this guide.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/connection_monitor.html.markdown.
type ConnectionMonitor struct {
	pulumi.CustomResourceState

	// Specifies whether the connection monitor will start automatically once created. Defaults to `true`. Changing this forces a new resource to be created.
	AutoStart pulumi.BoolOutput `pulumi:"autoStart"`

	// A `destination` block as defined below.
	Destination ConnectionMonitorDestinationOutput `pulumi:"destination"`

	// Monitoring interval in seconds. Defaults to `60`.
	IntervalInSeconds pulumi.IntOutput `pulumi:"intervalInSeconds"`

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// The name of the Connection Monitor. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherName pulumi.StringOutput `pulumi:"networkWatcherName"`

	// The name of the resource group in which to create the Connection Monitor. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// A `source` block as defined below.
	Source ConnectionMonitorSourceOutput `pulumi:"source"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewConnectionMonitor registers a new resource with the given unique name, arguments, and options.
func NewConnectionMonitor(ctx *pulumi.Context,
	name string, args *ConnectionMonitorArgs, opts ...pulumi.ResourceOption) (*ConnectionMonitor, error) {
	if args == nil || args.Destination == nil {
		return nil, errors.New("missing required argument 'Destination'")
	}
	if args == nil || args.NetworkWatcherName == nil {
		return nil, errors.New("missing required argument 'NetworkWatcherName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Source == nil {
		return nil, errors.New("missing required argument 'Source'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AutoStart; i != nil { inputs["autoStart"] = i.ToBoolOutput() }
		if i := args.Destination; i != nil { inputs["destination"] = i.ToConnectionMonitorDestinationOutput() }
		if i := args.IntervalInSeconds; i != nil { inputs["intervalInSeconds"] = i.ToIntOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.NetworkWatcherName; i != nil { inputs["networkWatcherName"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Source; i != nil { inputs["source"] = i.ToConnectionMonitorSourceOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource ConnectionMonitor
	err := ctx.RegisterResource("azure:network/connectionMonitor:ConnectionMonitor", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionMonitor gets an existing ConnectionMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionMonitorState, opts ...pulumi.ResourceOption) (*ConnectionMonitor, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AutoStart; i != nil { inputs["autoStart"] = i.ToBoolOutput() }
		if i := state.Destination; i != nil { inputs["destination"] = i.ToConnectionMonitorDestinationOutput() }
		if i := state.IntervalInSeconds; i != nil { inputs["intervalInSeconds"] = i.ToIntOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.NetworkWatcherName; i != nil { inputs["networkWatcherName"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.Source; i != nil { inputs["source"] = i.ToConnectionMonitorSourceOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource ConnectionMonitor
	err := ctx.ReadResource("azure:network/connectionMonitor:ConnectionMonitor", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionMonitor resources.
type ConnectionMonitorState struct {
	// Specifies whether the connection monitor will start automatically once created. Defaults to `true`. Changing this forces a new resource to be created.
	AutoStart pulumi.BoolInput `pulumi:"autoStart"`
	// A `destination` block as defined below.
	Destination ConnectionMonitorDestinationInput `pulumi:"destination"`
	// Monitoring interval in seconds. Defaults to `60`.
	IntervalInSeconds pulumi.IntInput `pulumi:"intervalInSeconds"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the Connection Monitor. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherName pulumi.StringInput `pulumi:"networkWatcherName"`
	// The name of the resource group in which to create the Connection Monitor. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A `source` block as defined below.
	Source ConnectionMonitorSourceInput `pulumi:"source"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a ConnectionMonitor resource.
type ConnectionMonitorArgs struct {
	// Specifies whether the connection monitor will start automatically once created. Defaults to `true`. Changing this forces a new resource to be created.
	AutoStart pulumi.BoolInput `pulumi:"autoStart"`
	// A `destination` block as defined below.
	Destination ConnectionMonitorDestinationInput `pulumi:"destination"`
	// Monitoring interval in seconds. Defaults to `60`.
	IntervalInSeconds pulumi.IntInput `pulumi:"intervalInSeconds"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the Connection Monitor. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherName pulumi.StringInput `pulumi:"networkWatcherName"`
	// The name of the resource group in which to create the Connection Monitor. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A `source` block as defined below.
	Source ConnectionMonitorSourceInput `pulumi:"source"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
type ConnectionMonitorDestination struct {
	Address *string `pulumi:"address"`
	Port int `pulumi:"port"`
	VirtualMachineId *string `pulumi:"virtualMachineId"`
}
var connectionMonitorDestinationType = reflect.TypeOf((*ConnectionMonitorDestination)(nil)).Elem()

type ConnectionMonitorDestinationInput interface {
	pulumi.Input

	ToConnectionMonitorDestinationOutput() ConnectionMonitorDestinationOutput
	ToConnectionMonitorDestinationOutputWithContext(ctx context.Context) ConnectionMonitorDestinationOutput
}

type ConnectionMonitorDestinationArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	Port pulumi.IntInput `pulumi:"port"`
	VirtualMachineId pulumi.StringInput `pulumi:"virtualMachineId"`
}

func (ConnectionMonitorDestinationArgs) ElementType() reflect.Type {
	return connectionMonitorDestinationType
}

func (a ConnectionMonitorDestinationArgs) ToConnectionMonitorDestinationOutput() ConnectionMonitorDestinationOutput {
	return pulumi.ToOutput(a).(ConnectionMonitorDestinationOutput)
}

func (a ConnectionMonitorDestinationArgs) ToConnectionMonitorDestinationOutputWithContext(ctx context.Context) ConnectionMonitorDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ConnectionMonitorDestinationOutput)
}

type ConnectionMonitorDestinationOutput struct { *pulumi.OutputState }

func (o ConnectionMonitorDestinationOutput) Address() pulumi.StringOutput {
	return o.Apply(func(v ConnectionMonitorDestination) string {
		if v.Address == nil { return *new(string) } else { return *v.Address }
	}).(pulumi.StringOutput)
}

func (o ConnectionMonitorDestinationOutput) Port() pulumi.IntOutput {
	return o.Apply(func(v ConnectionMonitorDestination) int {
		return v.Port
	}).(pulumi.IntOutput)
}

func (o ConnectionMonitorDestinationOutput) VirtualMachineId() pulumi.StringOutput {
	return o.Apply(func(v ConnectionMonitorDestination) string {
		if v.VirtualMachineId == nil { return *new(string) } else { return *v.VirtualMachineId }
	}).(pulumi.StringOutput)
}

func (ConnectionMonitorDestinationOutput) ElementType() reflect.Type {
	return connectionMonitorDestinationType
}

func (o ConnectionMonitorDestinationOutput) ToConnectionMonitorDestinationOutput() ConnectionMonitorDestinationOutput {
	return o
}

func (o ConnectionMonitorDestinationOutput) ToConnectionMonitorDestinationOutputWithContext(ctx context.Context) ConnectionMonitorDestinationOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ConnectionMonitorDestinationOutput{}) }

type ConnectionMonitorSource struct {
	Port *int `pulumi:"port"`
	VirtualMachineId string `pulumi:"virtualMachineId"`
}
var connectionMonitorSourceType = reflect.TypeOf((*ConnectionMonitorSource)(nil)).Elem()

type ConnectionMonitorSourceInput interface {
	pulumi.Input

	ToConnectionMonitorSourceOutput() ConnectionMonitorSourceOutput
	ToConnectionMonitorSourceOutputWithContext(ctx context.Context) ConnectionMonitorSourceOutput
}

type ConnectionMonitorSourceArgs struct {
	Port pulumi.IntInput `pulumi:"port"`
	VirtualMachineId pulumi.StringInput `pulumi:"virtualMachineId"`
}

func (ConnectionMonitorSourceArgs) ElementType() reflect.Type {
	return connectionMonitorSourceType
}

func (a ConnectionMonitorSourceArgs) ToConnectionMonitorSourceOutput() ConnectionMonitorSourceOutput {
	return pulumi.ToOutput(a).(ConnectionMonitorSourceOutput)
}

func (a ConnectionMonitorSourceArgs) ToConnectionMonitorSourceOutputWithContext(ctx context.Context) ConnectionMonitorSourceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ConnectionMonitorSourceOutput)
}

type ConnectionMonitorSourceOutput struct { *pulumi.OutputState }

func (o ConnectionMonitorSourceOutput) Port() pulumi.IntOutput {
	return o.Apply(func(v ConnectionMonitorSource) int {
		if v.Port == nil { return *new(int) } else { return *v.Port }
	}).(pulumi.IntOutput)
}

func (o ConnectionMonitorSourceOutput) VirtualMachineId() pulumi.StringOutput {
	return o.Apply(func(v ConnectionMonitorSource) string {
		return v.VirtualMachineId
	}).(pulumi.StringOutput)
}

func (ConnectionMonitorSourceOutput) ElementType() reflect.Type {
	return connectionMonitorSourceType
}

func (o ConnectionMonitorSourceOutput) ToConnectionMonitorSourceOutput() ConnectionMonitorSourceOutput {
	return o
}

func (o ConnectionMonitorSourceOutput) ToConnectionMonitorSourceOutputWithContext(ctx context.Context) ConnectionMonitorSourceOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ConnectionMonitorSourceOutput{}) }

