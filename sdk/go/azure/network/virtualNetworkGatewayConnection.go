// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a connection in an existing Virtual Network Gateway.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/virtual_network_gateway_connection.html.markdown.
type VirtualNetworkGatewayConnection struct {
	pulumi.CustomResourceState

	// The authorization key associated with the
	// Express Route Circuit. This field is required only if the type is an
	// ExpressRoute connection.
	AuthorizationKey pulumi.StringOutput `pulumi:"authorizationKey"`

	// If `true`, BGP (Border Gateway Protocol) is enabled
	// for this connection. Defaults to `false`.
	EnableBgp pulumi.BoolOutput `pulumi:"enableBgp"`

	// The ID of the Express Route Circuit
	// when creating an ExpressRoute connection (i.e. when `type` is `ExpressRoute`).
	// The Express Route Circuit can be in the same or in a different subscription.
	ExpressRouteCircuitId pulumi.StringOutput `pulumi:"expressRouteCircuitId"`

	// If `true`, data packets will bypass ExpressRoute Gateway for data forwarding This is only valid for ExpressRoute connections.
	ExpressRouteGatewayBypass pulumi.BoolOutput `pulumi:"expressRouteGatewayBypass"`

	// A `ipsecPolicy` block which is documented below.
	// Only a single policy can be defined for a connection. For details on
	// custom policies refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-ipsecikepolicy-rm-powershell).
	IpsecPolicy VirtualNetworkGatewayConnectionIpsecPolicyOutput `pulumi:"ipsecPolicy"`

	// The ID of the local network gateway
	// when creating Site-to-Site connection (i.e. when `type` is `IPsec`).
	LocalNetworkGatewayId pulumi.StringOutput `pulumi:"localNetworkGatewayId"`

	// The location/region where the connection is
	// located. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// The name of the connection. Changing the name forces a
	// new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The ID of the peer virtual
	// network gateway when creating a VNet-to-VNet connection (i.e. when `type`
	// is `Vnet2Vnet`). The peer Virtual Network Gateway can be in the same or
	// in a different subscription.
	PeerVirtualNetworkGatewayId pulumi.StringOutput `pulumi:"peerVirtualNetworkGatewayId"`

	// The name of the resource group in which to
	// create the connection Changing the name forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The routing weight. Defaults to `10`.
	RoutingWeight pulumi.IntOutput `pulumi:"routingWeight"`

	// The shared IPSec key. A key must be provided if a
	// Site-to-Site or VNet-to-VNet connection is created whereas ExpressRoute
	// connections do not need a shared key.
	SharedKey pulumi.StringOutput `pulumi:"sharedKey"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The type of connection. Valid options are `IPsec`
	// (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet).
	// Each connection type requires different mandatory arguments (refer to the
	// examples above). Changing the connection type will force a new connection
	// to be created.
	Type pulumi.StringOutput `pulumi:"type"`

	// If `true`, policy-based traffic
	// selectors are enabled for this connection. Enabling policy-based traffic
	// selectors requires an `ipsecPolicy` block. Defaults to `false`.
	UsePolicyBasedTrafficSelectors pulumi.BoolOutput `pulumi:"usePolicyBasedTrafficSelectors"`

	// The ID of the Virtual Network Gateway
	// in which the connection will be created. Changing the gateway forces a new
	// resource to be created.
	VirtualNetworkGatewayId pulumi.StringOutput `pulumi:"virtualNetworkGatewayId"`
}

// NewVirtualNetworkGatewayConnection registers a new resource with the given unique name, arguments, and options.
func NewVirtualNetworkGatewayConnection(ctx *pulumi.Context,
	name string, args *VirtualNetworkGatewayConnectionArgs, opts ...pulumi.ResourceOption) (*VirtualNetworkGatewayConnection, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil || args.VirtualNetworkGatewayId == nil {
		return nil, errors.New("missing required argument 'VirtualNetworkGatewayId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AuthorizationKey; i != nil { inputs["authorizationKey"] = i.ToStringOutput() }
		if i := args.EnableBgp; i != nil { inputs["enableBgp"] = i.ToBoolOutput() }
		if i := args.ExpressRouteCircuitId; i != nil { inputs["expressRouteCircuitId"] = i.ToStringOutput() }
		if i := args.ExpressRouteGatewayBypass; i != nil { inputs["expressRouteGatewayBypass"] = i.ToBoolOutput() }
		if i := args.IpsecPolicy; i != nil { inputs["ipsecPolicy"] = i.ToVirtualNetworkGatewayConnectionIpsecPolicyOutput() }
		if i := args.LocalNetworkGatewayId; i != nil { inputs["localNetworkGatewayId"] = i.ToStringOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.PeerVirtualNetworkGatewayId; i != nil { inputs["peerVirtualNetworkGatewayId"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.RoutingWeight; i != nil { inputs["routingWeight"] = i.ToIntOutput() }
		if i := args.SharedKey; i != nil { inputs["sharedKey"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.Type; i != nil { inputs["type"] = i.ToStringOutput() }
		if i := args.UsePolicyBasedTrafficSelectors; i != nil { inputs["usePolicyBasedTrafficSelectors"] = i.ToBoolOutput() }
		if i := args.VirtualNetworkGatewayId; i != nil { inputs["virtualNetworkGatewayId"] = i.ToStringOutput() }
	}
	var resource VirtualNetworkGatewayConnection
	err := ctx.RegisterResource("azure:network/virtualNetworkGatewayConnection:VirtualNetworkGatewayConnection", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualNetworkGatewayConnection gets an existing VirtualNetworkGatewayConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNetworkGatewayConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualNetworkGatewayConnectionState, opts ...pulumi.ResourceOption) (*VirtualNetworkGatewayConnection, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AuthorizationKey; i != nil { inputs["authorizationKey"] = i.ToStringOutput() }
		if i := state.EnableBgp; i != nil { inputs["enableBgp"] = i.ToBoolOutput() }
		if i := state.ExpressRouteCircuitId; i != nil { inputs["expressRouteCircuitId"] = i.ToStringOutput() }
		if i := state.ExpressRouteGatewayBypass; i != nil { inputs["expressRouteGatewayBypass"] = i.ToBoolOutput() }
		if i := state.IpsecPolicy; i != nil { inputs["ipsecPolicy"] = i.ToVirtualNetworkGatewayConnectionIpsecPolicyOutput() }
		if i := state.LocalNetworkGatewayId; i != nil { inputs["localNetworkGatewayId"] = i.ToStringOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.PeerVirtualNetworkGatewayId; i != nil { inputs["peerVirtualNetworkGatewayId"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.RoutingWeight; i != nil { inputs["routingWeight"] = i.ToIntOutput() }
		if i := state.SharedKey; i != nil { inputs["sharedKey"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.Type; i != nil { inputs["type"] = i.ToStringOutput() }
		if i := state.UsePolicyBasedTrafficSelectors; i != nil { inputs["usePolicyBasedTrafficSelectors"] = i.ToBoolOutput() }
		if i := state.VirtualNetworkGatewayId; i != nil { inputs["virtualNetworkGatewayId"] = i.ToStringOutput() }
	}
	var resource VirtualNetworkGatewayConnection
	err := ctx.ReadResource("azure:network/virtualNetworkGatewayConnection:VirtualNetworkGatewayConnection", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualNetworkGatewayConnection resources.
type VirtualNetworkGatewayConnectionState struct {
	// The authorization key associated with the
	// Express Route Circuit. This field is required only if the type is an
	// ExpressRoute connection.
	AuthorizationKey pulumi.StringInput `pulumi:"authorizationKey"`
	// If `true`, BGP (Border Gateway Protocol) is enabled
	// for this connection. Defaults to `false`.
	EnableBgp pulumi.BoolInput `pulumi:"enableBgp"`
	// The ID of the Express Route Circuit
	// when creating an ExpressRoute connection (i.e. when `type` is `ExpressRoute`).
	// The Express Route Circuit can be in the same or in a different subscription.
	ExpressRouteCircuitId pulumi.StringInput `pulumi:"expressRouteCircuitId"`
	// If `true`, data packets will bypass ExpressRoute Gateway for data forwarding This is only valid for ExpressRoute connections.
	ExpressRouteGatewayBypass pulumi.BoolInput `pulumi:"expressRouteGatewayBypass"`
	// A `ipsecPolicy` block which is documented below.
	// Only a single policy can be defined for a connection. For details on
	// custom policies refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-ipsecikepolicy-rm-powershell).
	IpsecPolicy VirtualNetworkGatewayConnectionIpsecPolicyInput `pulumi:"ipsecPolicy"`
	// The ID of the local network gateway
	// when creating Site-to-Site connection (i.e. when `type` is `IPsec`).
	LocalNetworkGatewayId pulumi.StringInput `pulumi:"localNetworkGatewayId"`
	// The location/region where the connection is
	// located. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the connection. Changing the name forces a
	// new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the peer virtual
	// network gateway when creating a VNet-to-VNet connection (i.e. when `type`
	// is `Vnet2Vnet`). The peer Virtual Network Gateway can be in the same or
	// in a different subscription.
	PeerVirtualNetworkGatewayId pulumi.StringInput `pulumi:"peerVirtualNetworkGatewayId"`
	// The name of the resource group in which to
	// create the connection Changing the name forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The routing weight. Defaults to `10`.
	RoutingWeight pulumi.IntInput `pulumi:"routingWeight"`
	// The shared IPSec key. A key must be provided if a
	// Site-to-Site or VNet-to-VNet connection is created whereas ExpressRoute
	// connections do not need a shared key.
	SharedKey pulumi.StringInput `pulumi:"sharedKey"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The type of connection. Valid options are `IPsec`
	// (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet).
	// Each connection type requires different mandatory arguments (refer to the
	// examples above). Changing the connection type will force a new connection
	// to be created.
	Type pulumi.StringInput `pulumi:"type"`
	// If `true`, policy-based traffic
	// selectors are enabled for this connection. Enabling policy-based traffic
	// selectors requires an `ipsecPolicy` block. Defaults to `false`.
	UsePolicyBasedTrafficSelectors pulumi.BoolInput `pulumi:"usePolicyBasedTrafficSelectors"`
	// The ID of the Virtual Network Gateway
	// in which the connection will be created. Changing the gateway forces a new
	// resource to be created.
	VirtualNetworkGatewayId pulumi.StringInput `pulumi:"virtualNetworkGatewayId"`
}

// The set of arguments for constructing a VirtualNetworkGatewayConnection resource.
type VirtualNetworkGatewayConnectionArgs struct {
	// The authorization key associated with the
	// Express Route Circuit. This field is required only if the type is an
	// ExpressRoute connection.
	AuthorizationKey pulumi.StringInput `pulumi:"authorizationKey"`
	// If `true`, BGP (Border Gateway Protocol) is enabled
	// for this connection. Defaults to `false`.
	EnableBgp pulumi.BoolInput `pulumi:"enableBgp"`
	// The ID of the Express Route Circuit
	// when creating an ExpressRoute connection (i.e. when `type` is `ExpressRoute`).
	// The Express Route Circuit can be in the same or in a different subscription.
	ExpressRouteCircuitId pulumi.StringInput `pulumi:"expressRouteCircuitId"`
	// If `true`, data packets will bypass ExpressRoute Gateway for data forwarding This is only valid for ExpressRoute connections.
	ExpressRouteGatewayBypass pulumi.BoolInput `pulumi:"expressRouteGatewayBypass"`
	// A `ipsecPolicy` block which is documented below.
	// Only a single policy can be defined for a connection. For details on
	// custom policies refer to [the relevant section in the Azure documentation](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-ipsecikepolicy-rm-powershell).
	IpsecPolicy VirtualNetworkGatewayConnectionIpsecPolicyInput `pulumi:"ipsecPolicy"`
	// The ID of the local network gateway
	// when creating Site-to-Site connection (i.e. when `type` is `IPsec`).
	LocalNetworkGatewayId pulumi.StringInput `pulumi:"localNetworkGatewayId"`
	// The location/region where the connection is
	// located. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the connection. Changing the name forces a
	// new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the peer virtual
	// network gateway when creating a VNet-to-VNet connection (i.e. when `type`
	// is `Vnet2Vnet`). The peer Virtual Network Gateway can be in the same or
	// in a different subscription.
	PeerVirtualNetworkGatewayId pulumi.StringInput `pulumi:"peerVirtualNetworkGatewayId"`
	// The name of the resource group in which to
	// create the connection Changing the name forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The routing weight. Defaults to `10`.
	RoutingWeight pulumi.IntInput `pulumi:"routingWeight"`
	// The shared IPSec key. A key must be provided if a
	// Site-to-Site or VNet-to-VNet connection is created whereas ExpressRoute
	// connections do not need a shared key.
	SharedKey pulumi.StringInput `pulumi:"sharedKey"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The type of connection. Valid options are `IPsec`
	// (Site-to-Site), `ExpressRoute` (ExpressRoute), and `Vnet2Vnet` (VNet-to-VNet).
	// Each connection type requires different mandatory arguments (refer to the
	// examples above). Changing the connection type will force a new connection
	// to be created.
	Type pulumi.StringInput `pulumi:"type"`
	// If `true`, policy-based traffic
	// selectors are enabled for this connection. Enabling policy-based traffic
	// selectors requires an `ipsecPolicy` block. Defaults to `false`.
	UsePolicyBasedTrafficSelectors pulumi.BoolInput `pulumi:"usePolicyBasedTrafficSelectors"`
	// The ID of the Virtual Network Gateway
	// in which the connection will be created. Changing the gateway forces a new
	// resource to be created.
	VirtualNetworkGatewayId pulumi.StringInput `pulumi:"virtualNetworkGatewayId"`
}
type VirtualNetworkGatewayConnectionIpsecPolicy struct {
	DhGroup string `pulumi:"dhGroup"`
	IkeEncryption string `pulumi:"ikeEncryption"`
	IkeIntegrity string `pulumi:"ikeIntegrity"`
	IpsecEncryption string `pulumi:"ipsecEncryption"`
	IpsecIntegrity string `pulumi:"ipsecIntegrity"`
	PfsGroup string `pulumi:"pfsGroup"`
	SaDatasize *int `pulumi:"saDatasize"`
	SaLifetime *int `pulumi:"saLifetime"`
}
var virtualNetworkGatewayConnectionIpsecPolicyType = reflect.TypeOf((*VirtualNetworkGatewayConnectionIpsecPolicy)(nil)).Elem()

type VirtualNetworkGatewayConnectionIpsecPolicyInput interface {
	pulumi.Input

	ToVirtualNetworkGatewayConnectionIpsecPolicyOutput() VirtualNetworkGatewayConnectionIpsecPolicyOutput
	ToVirtualNetworkGatewayConnectionIpsecPolicyOutputWithContext(ctx context.Context) VirtualNetworkGatewayConnectionIpsecPolicyOutput
}

type VirtualNetworkGatewayConnectionIpsecPolicyArgs struct {
	DhGroup pulumi.StringInput `pulumi:"dhGroup"`
	IkeEncryption pulumi.StringInput `pulumi:"ikeEncryption"`
	IkeIntegrity pulumi.StringInput `pulumi:"ikeIntegrity"`
	IpsecEncryption pulumi.StringInput `pulumi:"ipsecEncryption"`
	IpsecIntegrity pulumi.StringInput `pulumi:"ipsecIntegrity"`
	PfsGroup pulumi.StringInput `pulumi:"pfsGroup"`
	SaDatasize pulumi.IntInput `pulumi:"saDatasize"`
	SaLifetime pulumi.IntInput `pulumi:"saLifetime"`
}

func (VirtualNetworkGatewayConnectionIpsecPolicyArgs) ElementType() reflect.Type {
	return virtualNetworkGatewayConnectionIpsecPolicyType
}

func (a VirtualNetworkGatewayConnectionIpsecPolicyArgs) ToVirtualNetworkGatewayConnectionIpsecPolicyOutput() VirtualNetworkGatewayConnectionIpsecPolicyOutput {
	return pulumi.ToOutput(a).(VirtualNetworkGatewayConnectionIpsecPolicyOutput)
}

func (a VirtualNetworkGatewayConnectionIpsecPolicyArgs) ToVirtualNetworkGatewayConnectionIpsecPolicyOutputWithContext(ctx context.Context) VirtualNetworkGatewayConnectionIpsecPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VirtualNetworkGatewayConnectionIpsecPolicyOutput)
}

type VirtualNetworkGatewayConnectionIpsecPolicyOutput struct { *pulumi.OutputState }

func (o VirtualNetworkGatewayConnectionIpsecPolicyOutput) DhGroup() pulumi.StringOutput {
	return o.Apply(func(v VirtualNetworkGatewayConnectionIpsecPolicy) string {
		return v.DhGroup
	}).(pulumi.StringOutput)
}

func (o VirtualNetworkGatewayConnectionIpsecPolicyOutput) IkeEncryption() pulumi.StringOutput {
	return o.Apply(func(v VirtualNetworkGatewayConnectionIpsecPolicy) string {
		return v.IkeEncryption
	}).(pulumi.StringOutput)
}

func (o VirtualNetworkGatewayConnectionIpsecPolicyOutput) IkeIntegrity() pulumi.StringOutput {
	return o.Apply(func(v VirtualNetworkGatewayConnectionIpsecPolicy) string {
		return v.IkeIntegrity
	}).(pulumi.StringOutput)
}

func (o VirtualNetworkGatewayConnectionIpsecPolicyOutput) IpsecEncryption() pulumi.StringOutput {
	return o.Apply(func(v VirtualNetworkGatewayConnectionIpsecPolicy) string {
		return v.IpsecEncryption
	}).(pulumi.StringOutput)
}

func (o VirtualNetworkGatewayConnectionIpsecPolicyOutput) IpsecIntegrity() pulumi.StringOutput {
	return o.Apply(func(v VirtualNetworkGatewayConnectionIpsecPolicy) string {
		return v.IpsecIntegrity
	}).(pulumi.StringOutput)
}

func (o VirtualNetworkGatewayConnectionIpsecPolicyOutput) PfsGroup() pulumi.StringOutput {
	return o.Apply(func(v VirtualNetworkGatewayConnectionIpsecPolicy) string {
		return v.PfsGroup
	}).(pulumi.StringOutput)
}

func (o VirtualNetworkGatewayConnectionIpsecPolicyOutput) SaDatasize() pulumi.IntOutput {
	return o.Apply(func(v VirtualNetworkGatewayConnectionIpsecPolicy) int {
		if v.SaDatasize == nil { return *new(int) } else { return *v.SaDatasize }
	}).(pulumi.IntOutput)
}

func (o VirtualNetworkGatewayConnectionIpsecPolicyOutput) SaLifetime() pulumi.IntOutput {
	return o.Apply(func(v VirtualNetworkGatewayConnectionIpsecPolicy) int {
		if v.SaLifetime == nil { return *new(int) } else { return *v.SaLifetime }
	}).(pulumi.IntOutput)
}

func (VirtualNetworkGatewayConnectionIpsecPolicyOutput) ElementType() reflect.Type {
	return virtualNetworkGatewayConnectionIpsecPolicyType
}

func (o VirtualNetworkGatewayConnectionIpsecPolicyOutput) ToVirtualNetworkGatewayConnectionIpsecPolicyOutput() VirtualNetworkGatewayConnectionIpsecPolicyOutput {
	return o
}

func (o VirtualNetworkGatewayConnectionIpsecPolicyOutput) ToVirtualNetworkGatewayConnectionIpsecPolicyOutputWithContext(ctx context.Context) VirtualNetworkGatewayConnectionIpsecPolicyOutput {
	return o
}

func init() { pulumi.RegisterOutputType(VirtualNetworkGatewayConnectionIpsecPolicyOutput{}) }

