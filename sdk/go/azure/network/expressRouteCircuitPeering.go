// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an ExpressRoute Circuit Peering.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/express_route_circuit_peering.html.markdown.
type ExpressRouteCircuitPeering struct {
	pulumi.CustomResourceState

	// The ASN used by Azure.
	AzureAsn pulumi.IntOutput `pulumi:"azureAsn"`

	// The name of the ExpressRoute Circuit in which to create the Peering.
	ExpressRouteCircuitName pulumi.StringOutput `pulumi:"expressRouteCircuitName"`

	// A `microsoftPeeringConfig` block as defined below. Required when `peeringType` is set to `MicrosoftPeering`.
	MicrosoftPeeringConfig ExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput `pulumi:"microsoftPeeringConfig"`

	// The Either a 16-bit or a 32-bit ASN. Can either be public or private..
	PeerAsn pulumi.IntOutput `pulumi:"peerAsn"`

	// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`. Changing this forces a new resource to be created.
	PeeringType pulumi.StringOutput `pulumi:"peeringType"`

	// The Primary Port used by Azure for this Peering.
	PrimaryAzurePort pulumi.StringOutput `pulumi:"primaryAzurePort"`

	// A `/30` subnet for the primary link.
	PrimaryPeerAddressPrefix pulumi.StringOutput `pulumi:"primaryPeerAddressPrefix"`

	// The name of the resource group in which to
	// create the Express Route Circuit Peering. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The Secondary Port used by Azure for this Peering.
	SecondaryAzurePort pulumi.StringOutput `pulumi:"secondaryAzurePort"`

	// A `/30` subnet for the secondary link.
	SecondaryPeerAddressPrefix pulumi.StringOutput `pulumi:"secondaryPeerAddressPrefix"`

	// The shared key. Can be a maximum of 25 characters.
	SharedKey pulumi.StringOutput `pulumi:"sharedKey"`

	// A valid VLAN ID to establish this peering on.
	VlanId pulumi.IntOutput `pulumi:"vlanId"`
}

// NewExpressRouteCircuitPeering registers a new resource with the given unique name, arguments, and options.
func NewExpressRouteCircuitPeering(ctx *pulumi.Context,
	name string, args *ExpressRouteCircuitPeeringArgs, opts ...pulumi.ResourceOption) (*ExpressRouteCircuitPeering, error) {
	if args == nil || args.ExpressRouteCircuitName == nil {
		return nil, errors.New("missing required argument 'ExpressRouteCircuitName'")
	}
	if args == nil || args.PeeringType == nil {
		return nil, errors.New("missing required argument 'PeeringType'")
	}
	if args == nil || args.PrimaryPeerAddressPrefix == nil {
		return nil, errors.New("missing required argument 'PrimaryPeerAddressPrefix'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.SecondaryPeerAddressPrefix == nil {
		return nil, errors.New("missing required argument 'SecondaryPeerAddressPrefix'")
	}
	if args == nil || args.VlanId == nil {
		return nil, errors.New("missing required argument 'VlanId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ExpressRouteCircuitName; i != nil { inputs["expressRouteCircuitName"] = i.ToStringOutput() }
		if i := args.MicrosoftPeeringConfig; i != nil { inputs["microsoftPeeringConfig"] = i.ToExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput() }
		if i := args.PeerAsn; i != nil { inputs["peerAsn"] = i.ToIntOutput() }
		if i := args.PeeringType; i != nil { inputs["peeringType"] = i.ToStringOutput() }
		if i := args.PrimaryPeerAddressPrefix; i != nil { inputs["primaryPeerAddressPrefix"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.SecondaryPeerAddressPrefix; i != nil { inputs["secondaryPeerAddressPrefix"] = i.ToStringOutput() }
		if i := args.SharedKey; i != nil { inputs["sharedKey"] = i.ToStringOutput() }
		if i := args.VlanId; i != nil { inputs["vlanId"] = i.ToIntOutput() }
	}
	var resource ExpressRouteCircuitPeering
	err := ctx.RegisterResource("azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExpressRouteCircuitPeering gets an existing ExpressRouteCircuitPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExpressRouteCircuitPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExpressRouteCircuitPeeringState, opts ...pulumi.ResourceOption) (*ExpressRouteCircuitPeering, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AzureAsn; i != nil { inputs["azureAsn"] = i.ToIntOutput() }
		if i := state.ExpressRouteCircuitName; i != nil { inputs["expressRouteCircuitName"] = i.ToStringOutput() }
		if i := state.MicrosoftPeeringConfig; i != nil { inputs["microsoftPeeringConfig"] = i.ToExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput() }
		if i := state.PeerAsn; i != nil { inputs["peerAsn"] = i.ToIntOutput() }
		if i := state.PeeringType; i != nil { inputs["peeringType"] = i.ToStringOutput() }
		if i := state.PrimaryAzurePort; i != nil { inputs["primaryAzurePort"] = i.ToStringOutput() }
		if i := state.PrimaryPeerAddressPrefix; i != nil { inputs["primaryPeerAddressPrefix"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.SecondaryAzurePort; i != nil { inputs["secondaryAzurePort"] = i.ToStringOutput() }
		if i := state.SecondaryPeerAddressPrefix; i != nil { inputs["secondaryPeerAddressPrefix"] = i.ToStringOutput() }
		if i := state.SharedKey; i != nil { inputs["sharedKey"] = i.ToStringOutput() }
		if i := state.VlanId; i != nil { inputs["vlanId"] = i.ToIntOutput() }
	}
	var resource ExpressRouteCircuitPeering
	err := ctx.ReadResource("azure:network/expressRouteCircuitPeering:ExpressRouteCircuitPeering", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExpressRouteCircuitPeering resources.
type ExpressRouteCircuitPeeringState struct {
	// The ASN used by Azure.
	AzureAsn pulumi.IntInput `pulumi:"azureAsn"`
	// The name of the ExpressRoute Circuit in which to create the Peering.
	ExpressRouteCircuitName pulumi.StringInput `pulumi:"expressRouteCircuitName"`
	// A `microsoftPeeringConfig` block as defined below. Required when `peeringType` is set to `MicrosoftPeering`.
	MicrosoftPeeringConfig ExpressRouteCircuitPeeringMicrosoftPeeringConfigInput `pulumi:"microsoftPeeringConfig"`
	// The Either a 16-bit or a 32-bit ASN. Can either be public or private..
	PeerAsn pulumi.IntInput `pulumi:"peerAsn"`
	// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`. Changing this forces a new resource to be created.
	PeeringType pulumi.StringInput `pulumi:"peeringType"`
	// The Primary Port used by Azure for this Peering.
	PrimaryAzurePort pulumi.StringInput `pulumi:"primaryAzurePort"`
	// A `/30` subnet for the primary link.
	PrimaryPeerAddressPrefix pulumi.StringInput `pulumi:"primaryPeerAddressPrefix"`
	// The name of the resource group in which to
	// create the Express Route Circuit Peering. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The Secondary Port used by Azure for this Peering.
	SecondaryAzurePort pulumi.StringInput `pulumi:"secondaryAzurePort"`
	// A `/30` subnet for the secondary link.
	SecondaryPeerAddressPrefix pulumi.StringInput `pulumi:"secondaryPeerAddressPrefix"`
	// The shared key. Can be a maximum of 25 characters.
	SharedKey pulumi.StringInput `pulumi:"sharedKey"`
	// A valid VLAN ID to establish this peering on.
	VlanId pulumi.IntInput `pulumi:"vlanId"`
}

// The set of arguments for constructing a ExpressRouteCircuitPeering resource.
type ExpressRouteCircuitPeeringArgs struct {
	// The name of the ExpressRoute Circuit in which to create the Peering.
	ExpressRouteCircuitName pulumi.StringInput `pulumi:"expressRouteCircuitName"`
	// A `microsoftPeeringConfig` block as defined below. Required when `peeringType` is set to `MicrosoftPeering`.
	MicrosoftPeeringConfig ExpressRouteCircuitPeeringMicrosoftPeeringConfigInput `pulumi:"microsoftPeeringConfig"`
	// The Either a 16-bit or a 32-bit ASN. Can either be public or private..
	PeerAsn pulumi.IntInput `pulumi:"peerAsn"`
	// The type of the ExpressRoute Circuit Peering. Acceptable values include `AzurePrivatePeering`, `AzurePublicPeering` and `MicrosoftPeering`. Changing this forces a new resource to be created.
	PeeringType pulumi.StringInput `pulumi:"peeringType"`
	// A `/30` subnet for the primary link.
	PrimaryPeerAddressPrefix pulumi.StringInput `pulumi:"primaryPeerAddressPrefix"`
	// The name of the resource group in which to
	// create the Express Route Circuit Peering. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A `/30` subnet for the secondary link.
	SecondaryPeerAddressPrefix pulumi.StringInput `pulumi:"secondaryPeerAddressPrefix"`
	// The shared key. Can be a maximum of 25 characters.
	SharedKey pulumi.StringInput `pulumi:"sharedKey"`
	// A valid VLAN ID to establish this peering on.
	VlanId pulumi.IntInput `pulumi:"vlanId"`
}
type ExpressRouteCircuitPeeringMicrosoftPeeringConfig struct {
	AdvertisedPublicPrefixes []string `pulumi:"advertisedPublicPrefixes"`
}
var expressRouteCircuitPeeringMicrosoftPeeringConfigType = reflect.TypeOf((*ExpressRouteCircuitPeeringMicrosoftPeeringConfig)(nil)).Elem()

type ExpressRouteCircuitPeeringMicrosoftPeeringConfigInput interface {
	pulumi.Input

	ToExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput() ExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput
	ToExpressRouteCircuitPeeringMicrosoftPeeringConfigOutputWithContext(ctx context.Context) ExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput
}

type ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs struct {
	AdvertisedPublicPrefixes pulumi.StringArrayInput `pulumi:"advertisedPublicPrefixes"`
}

func (ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs) ElementType() reflect.Type {
	return expressRouteCircuitPeeringMicrosoftPeeringConfigType
}

func (a ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs) ToExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput() ExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput {
	return pulumi.ToOutput(a).(ExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput)
}

func (a ExpressRouteCircuitPeeringMicrosoftPeeringConfigArgs) ToExpressRouteCircuitPeeringMicrosoftPeeringConfigOutputWithContext(ctx context.Context) ExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput)
}

type ExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput struct { *pulumi.OutputState }

func (o ExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput) AdvertisedPublicPrefixes() pulumi.StringArrayOutput {
	return o.Apply(func(v ExpressRouteCircuitPeeringMicrosoftPeeringConfig) []string {
		return v.AdvertisedPublicPrefixes
	}).(pulumi.StringArrayOutput)
}

func (ExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput) ElementType() reflect.Type {
	return expressRouteCircuitPeeringMicrosoftPeeringConfigType
}

func (o ExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput) ToExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput() ExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput {
	return o
}

func (o ExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput) ToExpressRouteCircuitPeeringMicrosoftPeeringConfigOutputWithContext(ctx context.Context) ExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ExpressRouteCircuitPeeringMicrosoftPeeringConfigOutput{}) }

