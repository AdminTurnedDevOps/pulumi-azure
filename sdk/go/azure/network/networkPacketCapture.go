// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package network

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Configures Network Packet Capturing against a Virtual Machine using a Network Watcher.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/network_packet_capture.html.markdown.
type NetworkPacketCapture struct {
	pulumi.CustomResourceState

	// One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
	Filters NetworkPacketCaptureFiltersArrayOutput `pulumi:"filters"`

	// The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
	MaximumBytesPerPacket pulumi.IntOutput `pulumi:"maximumBytesPerPacket"`

	// Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
	MaximumBytesPerSession pulumi.IntOutput `pulumi:"maximumBytesPerSession"`

	// The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
	MaximumCaptureDuration pulumi.IntOutput `pulumi:"maximumCaptureDuration"`

	// The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherName pulumi.StringOutput `pulumi:"networkWatcherName"`

	// The name of the resource group in which the Network Watcher exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// A `storageLocation` block as defined below. Changing this forces a new resource to be created.
	StorageLocation NetworkPacketCaptureStorageLocationOutput `pulumi:"storageLocation"`

	// The ID of the Resource to capture packets from. Changing this forces a new resource to be created.
	TargetResourceId pulumi.StringOutput `pulumi:"targetResourceId"`
}

// NewNetworkPacketCapture registers a new resource with the given unique name, arguments, and options.
func NewNetworkPacketCapture(ctx *pulumi.Context,
	name string, args *NetworkPacketCaptureArgs, opts ...pulumi.ResourceOption) (*NetworkPacketCapture, error) {
	if args == nil || args.NetworkWatcherName == nil {
		return nil, errors.New("missing required argument 'NetworkWatcherName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.StorageLocation == nil {
		return nil, errors.New("missing required argument 'StorageLocation'")
	}
	if args == nil || args.TargetResourceId == nil {
		return nil, errors.New("missing required argument 'TargetResourceId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Filters; i != nil { inputs["filters"] = i.ToNetworkPacketCaptureFiltersArrayOutput() }
		if i := args.MaximumBytesPerPacket; i != nil { inputs["maximumBytesPerPacket"] = i.ToIntOutput() }
		if i := args.MaximumBytesPerSession; i != nil { inputs["maximumBytesPerSession"] = i.ToIntOutput() }
		if i := args.MaximumCaptureDuration; i != nil { inputs["maximumCaptureDuration"] = i.ToIntOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.NetworkWatcherName; i != nil { inputs["networkWatcherName"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.StorageLocation; i != nil { inputs["storageLocation"] = i.ToNetworkPacketCaptureStorageLocationOutput() }
		if i := args.TargetResourceId; i != nil { inputs["targetResourceId"] = i.ToStringOutput() }
	}
	var resource NetworkPacketCapture
	err := ctx.RegisterResource("azure:network/networkPacketCapture:NetworkPacketCapture", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkPacketCapture gets an existing NetworkPacketCapture resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkPacketCapture(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkPacketCaptureState, opts ...pulumi.ResourceOption) (*NetworkPacketCapture, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Filters; i != nil { inputs["filters"] = i.ToNetworkPacketCaptureFiltersArrayOutput() }
		if i := state.MaximumBytesPerPacket; i != nil { inputs["maximumBytesPerPacket"] = i.ToIntOutput() }
		if i := state.MaximumBytesPerSession; i != nil { inputs["maximumBytesPerSession"] = i.ToIntOutput() }
		if i := state.MaximumCaptureDuration; i != nil { inputs["maximumCaptureDuration"] = i.ToIntOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.NetworkWatcherName; i != nil { inputs["networkWatcherName"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.StorageLocation; i != nil { inputs["storageLocation"] = i.ToNetworkPacketCaptureStorageLocationOutput() }
		if i := state.TargetResourceId; i != nil { inputs["targetResourceId"] = i.ToStringOutput() }
	}
	var resource NetworkPacketCapture
	err := ctx.ReadResource("azure:network/networkPacketCapture:NetworkPacketCapture", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkPacketCapture resources.
type NetworkPacketCaptureState struct {
	// One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
	Filters NetworkPacketCaptureFiltersArrayInput `pulumi:"filters"`
	// The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
	MaximumBytesPerPacket pulumi.IntInput `pulumi:"maximumBytesPerPacket"`
	// Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
	MaximumBytesPerSession pulumi.IntInput `pulumi:"maximumBytesPerSession"`
	// The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
	MaximumCaptureDuration pulumi.IntInput `pulumi:"maximumCaptureDuration"`
	// The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherName pulumi.StringInput `pulumi:"networkWatcherName"`
	// The name of the resource group in which the Network Watcher exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A `storageLocation` block as defined below. Changing this forces a new resource to be created.
	StorageLocation NetworkPacketCaptureStorageLocationInput `pulumi:"storageLocation"`
	// The ID of the Resource to capture packets from. Changing this forces a new resource to be created.
	TargetResourceId pulumi.StringInput `pulumi:"targetResourceId"`
}

// The set of arguments for constructing a NetworkPacketCapture resource.
type NetworkPacketCaptureArgs struct {
	// One or more `filter` blocks as defined below. Changing this forces a new resource to be created.
	Filters NetworkPacketCaptureFiltersArrayInput `pulumi:"filters"`
	// The number of bytes captured per packet. The remaining bytes are truncated. Defaults to `0` (Entire Packet Captured). Changing this forces a new resource to be created.
	MaximumBytesPerPacket pulumi.IntInput `pulumi:"maximumBytesPerPacket"`
	// Maximum size of the capture in Bytes. Defaults to `1073741824` (1GB). Changing this forces a new resource to be created.
	MaximumBytesPerSession pulumi.IntInput `pulumi:"maximumBytesPerSession"`
	// The maximum duration of the capture session in seconds. Defaults to `18000` (5 hours). Changing this forces a new resource to be created.
	MaximumCaptureDuration pulumi.IntInput `pulumi:"maximumCaptureDuration"`
	// The name to use for this Network Packet Capture. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Network Watcher. Changing this forces a new resource to be created.
	NetworkWatcherName pulumi.StringInput `pulumi:"networkWatcherName"`
	// The name of the resource group in which the Network Watcher exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A `storageLocation` block as defined below. Changing this forces a new resource to be created.
	StorageLocation NetworkPacketCaptureStorageLocationInput `pulumi:"storageLocation"`
	// The ID of the Resource to capture packets from. Changing this forces a new resource to be created.
	TargetResourceId pulumi.StringInput `pulumi:"targetResourceId"`
}
type NetworkPacketCaptureFilters struct {
	LocalIpAddress *string `pulumi:"localIpAddress"`
	LocalPort *string `pulumi:"localPort"`
	Protocol string `pulumi:"protocol"`
	RemoteIpAddress *string `pulumi:"remoteIpAddress"`
	RemotePort *string `pulumi:"remotePort"`
}
var networkPacketCaptureFiltersType = reflect.TypeOf((*NetworkPacketCaptureFilters)(nil)).Elem()

type NetworkPacketCaptureFiltersInput interface {
	pulumi.Input

	ToNetworkPacketCaptureFiltersOutput() NetworkPacketCaptureFiltersOutput
	ToNetworkPacketCaptureFiltersOutputWithContext(ctx context.Context) NetworkPacketCaptureFiltersOutput
}

type NetworkPacketCaptureFiltersArgs struct {
	LocalIpAddress pulumi.StringInput `pulumi:"localIpAddress"`
	LocalPort pulumi.StringInput `pulumi:"localPort"`
	Protocol pulumi.StringInput `pulumi:"protocol"`
	RemoteIpAddress pulumi.StringInput `pulumi:"remoteIpAddress"`
	RemotePort pulumi.StringInput `pulumi:"remotePort"`
}

func (NetworkPacketCaptureFiltersArgs) ElementType() reflect.Type {
	return networkPacketCaptureFiltersType
}

func (a NetworkPacketCaptureFiltersArgs) ToNetworkPacketCaptureFiltersOutput() NetworkPacketCaptureFiltersOutput {
	return pulumi.ToOutput(a).(NetworkPacketCaptureFiltersOutput)
}

func (a NetworkPacketCaptureFiltersArgs) ToNetworkPacketCaptureFiltersOutputWithContext(ctx context.Context) NetworkPacketCaptureFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NetworkPacketCaptureFiltersOutput)
}

type NetworkPacketCaptureFiltersOutput struct { *pulumi.OutputState }

func (o NetworkPacketCaptureFiltersOutput) LocalIpAddress() pulumi.StringOutput {
	return o.Apply(func(v NetworkPacketCaptureFilters) string {
		if v.LocalIpAddress == nil { return *new(string) } else { return *v.LocalIpAddress }
	}).(pulumi.StringOutput)
}

func (o NetworkPacketCaptureFiltersOutput) LocalPort() pulumi.StringOutput {
	return o.Apply(func(v NetworkPacketCaptureFilters) string {
		if v.LocalPort == nil { return *new(string) } else { return *v.LocalPort }
	}).(pulumi.StringOutput)
}

func (o NetworkPacketCaptureFiltersOutput) Protocol() pulumi.StringOutput {
	return o.Apply(func(v NetworkPacketCaptureFilters) string {
		return v.Protocol
	}).(pulumi.StringOutput)
}

func (o NetworkPacketCaptureFiltersOutput) RemoteIpAddress() pulumi.StringOutput {
	return o.Apply(func(v NetworkPacketCaptureFilters) string {
		if v.RemoteIpAddress == nil { return *new(string) } else { return *v.RemoteIpAddress }
	}).(pulumi.StringOutput)
}

func (o NetworkPacketCaptureFiltersOutput) RemotePort() pulumi.StringOutput {
	return o.Apply(func(v NetworkPacketCaptureFilters) string {
		if v.RemotePort == nil { return *new(string) } else { return *v.RemotePort }
	}).(pulumi.StringOutput)
}

func (NetworkPacketCaptureFiltersOutput) ElementType() reflect.Type {
	return networkPacketCaptureFiltersType
}

func (o NetworkPacketCaptureFiltersOutput) ToNetworkPacketCaptureFiltersOutput() NetworkPacketCaptureFiltersOutput {
	return o
}

func (o NetworkPacketCaptureFiltersOutput) ToNetworkPacketCaptureFiltersOutputWithContext(ctx context.Context) NetworkPacketCaptureFiltersOutput {
	return o
}

func init() { pulumi.RegisterOutputType(NetworkPacketCaptureFiltersOutput{}) }

var networkPacketCaptureFiltersArrayType = reflect.TypeOf((*[]NetworkPacketCaptureFilters)(nil)).Elem()

type NetworkPacketCaptureFiltersArrayInput interface {
	pulumi.Input

	ToNetworkPacketCaptureFiltersArrayOutput() NetworkPacketCaptureFiltersArrayOutput
	ToNetworkPacketCaptureFiltersArrayOutputWithContext(ctx context.Context) NetworkPacketCaptureFiltersArrayOutput
}

type NetworkPacketCaptureFiltersArrayArgs []NetworkPacketCaptureFiltersInput

func (NetworkPacketCaptureFiltersArrayArgs) ElementType() reflect.Type {
	return networkPacketCaptureFiltersArrayType
}

func (a NetworkPacketCaptureFiltersArrayArgs) ToNetworkPacketCaptureFiltersArrayOutput() NetworkPacketCaptureFiltersArrayOutput {
	return pulumi.ToOutput(a).(NetworkPacketCaptureFiltersArrayOutput)
}

func (a NetworkPacketCaptureFiltersArrayArgs) ToNetworkPacketCaptureFiltersArrayOutputWithContext(ctx context.Context) NetworkPacketCaptureFiltersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NetworkPacketCaptureFiltersArrayOutput)
}

type NetworkPacketCaptureFiltersArrayOutput struct { *pulumi.OutputState }

func (o NetworkPacketCaptureFiltersArrayOutput) Index(i pulumi.IntInput) NetworkPacketCaptureFiltersOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) NetworkPacketCaptureFilters {
		return vs[0].([]NetworkPacketCaptureFilters)[vs[1].(int)]
	}).(NetworkPacketCaptureFiltersOutput)
}

func (NetworkPacketCaptureFiltersArrayOutput) ElementType() reflect.Type {
	return networkPacketCaptureFiltersArrayType
}

func (o NetworkPacketCaptureFiltersArrayOutput) ToNetworkPacketCaptureFiltersArrayOutput() NetworkPacketCaptureFiltersArrayOutput {
	return o
}

func (o NetworkPacketCaptureFiltersArrayOutput) ToNetworkPacketCaptureFiltersArrayOutputWithContext(ctx context.Context) NetworkPacketCaptureFiltersArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(NetworkPacketCaptureFiltersArrayOutput{}) }

type NetworkPacketCaptureStorageLocation struct {
	FilePath *string `pulumi:"filePath"`
	StorageAccountId *string `pulumi:"storageAccountId"`
	// The URI of the storage path to save the packet capture.
	StoragePath *string `pulumi:"storagePath"`
}
var networkPacketCaptureStorageLocationType = reflect.TypeOf((*NetworkPacketCaptureStorageLocation)(nil)).Elem()

type NetworkPacketCaptureStorageLocationInput interface {
	pulumi.Input

	ToNetworkPacketCaptureStorageLocationOutput() NetworkPacketCaptureStorageLocationOutput
	ToNetworkPacketCaptureStorageLocationOutputWithContext(ctx context.Context) NetworkPacketCaptureStorageLocationOutput
}

type NetworkPacketCaptureStorageLocationArgs struct {
	FilePath pulumi.StringInput `pulumi:"filePath"`
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
	// The URI of the storage path to save the packet capture.
	StoragePath pulumi.StringInput `pulumi:"storagePath"`
}

func (NetworkPacketCaptureStorageLocationArgs) ElementType() reflect.Type {
	return networkPacketCaptureStorageLocationType
}

func (a NetworkPacketCaptureStorageLocationArgs) ToNetworkPacketCaptureStorageLocationOutput() NetworkPacketCaptureStorageLocationOutput {
	return pulumi.ToOutput(a).(NetworkPacketCaptureStorageLocationOutput)
}

func (a NetworkPacketCaptureStorageLocationArgs) ToNetworkPacketCaptureStorageLocationOutputWithContext(ctx context.Context) NetworkPacketCaptureStorageLocationOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NetworkPacketCaptureStorageLocationOutput)
}

type NetworkPacketCaptureStorageLocationOutput struct { *pulumi.OutputState }

func (o NetworkPacketCaptureStorageLocationOutput) FilePath() pulumi.StringOutput {
	return o.Apply(func(v NetworkPacketCaptureStorageLocation) string {
		if v.FilePath == nil { return *new(string) } else { return *v.FilePath }
	}).(pulumi.StringOutput)
}

func (o NetworkPacketCaptureStorageLocationOutput) StorageAccountId() pulumi.StringOutput {
	return o.Apply(func(v NetworkPacketCaptureStorageLocation) string {
		if v.StorageAccountId == nil { return *new(string) } else { return *v.StorageAccountId }
	}).(pulumi.StringOutput)
}

// The URI of the storage path to save the packet capture.
func (o NetworkPacketCaptureStorageLocationOutput) StoragePath() pulumi.StringOutput {
	return o.Apply(func(v NetworkPacketCaptureStorageLocation) string {
		if v.StoragePath == nil { return *new(string) } else { return *v.StoragePath }
	}).(pulumi.StringOutput)
}

func (NetworkPacketCaptureStorageLocationOutput) ElementType() reflect.Type {
	return networkPacketCaptureStorageLocationType
}

func (o NetworkPacketCaptureStorageLocationOutput) ToNetworkPacketCaptureStorageLocationOutput() NetworkPacketCaptureStorageLocationOutput {
	return o
}

func (o NetworkPacketCaptureStorageLocationOutput) ToNetworkPacketCaptureStorageLocationOutputWithContext(ctx context.Context) NetworkPacketCaptureStorageLocationOutput {
	return o
}

func init() { pulumi.RegisterOutputType(NetworkPacketCaptureStorageLocationOutput{}) }

