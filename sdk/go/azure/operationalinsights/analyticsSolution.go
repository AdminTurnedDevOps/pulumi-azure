// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package operationalinsights

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Log Analytics (formally Operational Insights) Solution.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/log_analytics_solution.html.markdown.
type AnalyticsSolution struct {
	pulumi.CustomResourceState

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// A `plan` block as documented below.
	Plan AnalyticsSolutionPlanOutput `pulumi:"plan"`

	// The name of the resource group in which the Log Analytics solution is created. Changing this forces a new resource to be created. Note: The solution and it's related workspace can only exist in the same resource group.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// Specifies the name of the solution to be deployed. See [here for options](https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-add-solutions).Changing this forces a new resource to be created.
	SolutionName pulumi.StringOutput `pulumi:"solutionName"`

	// The full name of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	WorkspaceName pulumi.StringOutput `pulumi:"workspaceName"`

	// The full resource ID of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	WorkspaceResourceId pulumi.StringOutput `pulumi:"workspaceResourceId"`
}

// NewAnalyticsSolution registers a new resource with the given unique name, arguments, and options.
func NewAnalyticsSolution(ctx *pulumi.Context,
	name string, args *AnalyticsSolutionArgs, opts ...pulumi.ResourceOption) (*AnalyticsSolution, error) {
	if args == nil || args.Plan == nil {
		return nil, errors.New("missing required argument 'Plan'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.SolutionName == nil {
		return nil, errors.New("missing required argument 'SolutionName'")
	}
	if args == nil || args.WorkspaceName == nil {
		return nil, errors.New("missing required argument 'WorkspaceName'")
	}
	if args == nil || args.WorkspaceResourceId == nil {
		return nil, errors.New("missing required argument 'WorkspaceResourceId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.Plan; i != nil { inputs["plan"] = i.ToAnalyticsSolutionPlanOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.SolutionName; i != nil { inputs["solutionName"] = i.ToStringOutput() }
		if i := args.WorkspaceName; i != nil { inputs["workspaceName"] = i.ToStringOutput() }
		if i := args.WorkspaceResourceId; i != nil { inputs["workspaceResourceId"] = i.ToStringOutput() }
	}
	var resource AnalyticsSolution
	err := ctx.RegisterResource("azure:operationalinsights/analyticsSolution:AnalyticsSolution", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalyticsSolution gets an existing AnalyticsSolution resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalyticsSolution(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalyticsSolutionState, opts ...pulumi.ResourceOption) (*AnalyticsSolution, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.Plan; i != nil { inputs["plan"] = i.ToAnalyticsSolutionPlanOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.SolutionName; i != nil { inputs["solutionName"] = i.ToStringOutput() }
		if i := state.WorkspaceName; i != nil { inputs["workspaceName"] = i.ToStringOutput() }
		if i := state.WorkspaceResourceId; i != nil { inputs["workspaceResourceId"] = i.ToStringOutput() }
	}
	var resource AnalyticsSolution
	err := ctx.ReadResource("azure:operationalinsights/analyticsSolution:AnalyticsSolution", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnalyticsSolution resources.
type AnalyticsSolutionState struct {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// A `plan` block as documented below.
	Plan AnalyticsSolutionPlanInput `pulumi:"plan"`
	// The name of the resource group in which the Log Analytics solution is created. Changing this forces a new resource to be created. Note: The solution and it's related workspace can only exist in the same resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Specifies the name of the solution to be deployed. See [here for options](https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-add-solutions).Changing this forces a new resource to be created.
	SolutionName pulumi.StringInput `pulumi:"solutionName"`
	// The full name of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	WorkspaceName pulumi.StringInput `pulumi:"workspaceName"`
	// The full resource ID of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	WorkspaceResourceId pulumi.StringInput `pulumi:"workspaceResourceId"`
}

// The set of arguments for constructing a AnalyticsSolution resource.
type AnalyticsSolutionArgs struct {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// A `plan` block as documented below.
	Plan AnalyticsSolutionPlanInput `pulumi:"plan"`
	// The name of the resource group in which the Log Analytics solution is created. Changing this forces a new resource to be created. Note: The solution and it's related workspace can only exist in the same resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Specifies the name of the solution to be deployed. See [here for options](https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-add-solutions).Changing this forces a new resource to be created.
	SolutionName pulumi.StringInput `pulumi:"solutionName"`
	// The full name of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	WorkspaceName pulumi.StringInput `pulumi:"workspaceName"`
	// The full resource ID of the Log Analytics workspace with which the solution will be linked. Changing this forces a new resource to be created.
	WorkspaceResourceId pulumi.StringInput `pulumi:"workspaceResourceId"`
}
type AnalyticsSolutionPlan struct {
	Name *string `pulumi:"name"`
	Product string `pulumi:"product"`
	PromotionCode *string `pulumi:"promotionCode"`
	Publisher string `pulumi:"publisher"`
}
var analyticsSolutionPlanType = reflect.TypeOf((*AnalyticsSolutionPlan)(nil)).Elem()

type AnalyticsSolutionPlanInput interface {
	pulumi.Input

	ToAnalyticsSolutionPlanOutput() AnalyticsSolutionPlanOutput
	ToAnalyticsSolutionPlanOutputWithContext(ctx context.Context) AnalyticsSolutionPlanOutput
}

type AnalyticsSolutionPlanArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	Product pulumi.StringInput `pulumi:"product"`
	PromotionCode pulumi.StringInput `pulumi:"promotionCode"`
	Publisher pulumi.StringInput `pulumi:"publisher"`
}

func (AnalyticsSolutionPlanArgs) ElementType() reflect.Type {
	return analyticsSolutionPlanType
}

func (a AnalyticsSolutionPlanArgs) ToAnalyticsSolutionPlanOutput() AnalyticsSolutionPlanOutput {
	return pulumi.ToOutput(a).(AnalyticsSolutionPlanOutput)
}

func (a AnalyticsSolutionPlanArgs) ToAnalyticsSolutionPlanOutputWithContext(ctx context.Context) AnalyticsSolutionPlanOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AnalyticsSolutionPlanOutput)
}

type AnalyticsSolutionPlanOutput struct { *pulumi.OutputState }

func (o AnalyticsSolutionPlanOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v AnalyticsSolutionPlan) string {
		if v.Name == nil { return *new(string) } else { return *v.Name }
	}).(pulumi.StringOutput)
}

func (o AnalyticsSolutionPlanOutput) Product() pulumi.StringOutput {
	return o.Apply(func(v AnalyticsSolutionPlan) string {
		return v.Product
	}).(pulumi.StringOutput)
}

func (o AnalyticsSolutionPlanOutput) PromotionCode() pulumi.StringOutput {
	return o.Apply(func(v AnalyticsSolutionPlan) string {
		if v.PromotionCode == nil { return *new(string) } else { return *v.PromotionCode }
	}).(pulumi.StringOutput)
}

func (o AnalyticsSolutionPlanOutput) Publisher() pulumi.StringOutput {
	return o.Apply(func(v AnalyticsSolutionPlan) string {
		return v.Publisher
	}).(pulumi.StringOutput)
}

func (AnalyticsSolutionPlanOutput) ElementType() reflect.Type {
	return analyticsSolutionPlanType
}

func (o AnalyticsSolutionPlanOutput) ToAnalyticsSolutionPlanOutput() AnalyticsSolutionPlanOutput {
	return o
}

func (o AnalyticsSolutionPlanOutput) ToAnalyticsSolutionPlanOutputWithContext(ctx context.Context) AnalyticsSolutionPlanOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AnalyticsSolutionPlanOutput{}) }

