// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package signalr

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Service struct {
	s *pulumi.ResourceState
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOpt) (*Service, error) {
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Sku == nil {
		return nil, errors.New("missing required argument 'Sku'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["resourceGroupName"] = nil
		inputs["sku"] = nil
		inputs["tags"] = nil
	} else {
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["sku"] = args.Sku
		inputs["tags"] = args.Tags
	}
	inputs["hostname"] = nil
	inputs["ipAddress"] = nil
	inputs["publicPort"] = nil
	inputs["serverPort"] = nil
	s, err := ctx.RegisterResource("azure:signalr/service:Service", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Service{s: s}, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServiceState, opts ...pulumi.ResourceOpt) (*Service, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["hostname"] = state.Hostname
		inputs["ipAddress"] = state.IpAddress
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["publicPort"] = state.PublicPort
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["serverPort"] = state.ServerPort
		inputs["sku"] = state.Sku
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("azure:signalr/service:Service", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Service{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Service) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Service) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Service) Hostname() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hostname"])
}

func (r *Service) IpAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipAddress"])
}

func (r *Service) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

func (r *Service) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Service) PublicPort() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["publicPort"])
}

func (r *Service) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

func (r *Service) ServerPort() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["serverPort"])
}

func (r *Service) Sku() *pulumi.Output {
	return r.s.State["sku"]
}

func (r *Service) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Service resources.
type ServiceState struct {
	Hostname interface{}
	IpAddress interface{}
	Location interface{}
	Name interface{}
	PublicPort interface{}
	ResourceGroupName interface{}
	ServerPort interface{}
	Sku interface{}
	Tags interface{}
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	Location interface{}
	Name interface{}
	ResourceGroupName interface{}
	Sku interface{}
	Tags interface{}
}
