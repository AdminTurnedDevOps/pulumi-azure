// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages the Vulnerability Assessment for a MS SQL Server.
// 
// > **NOTE** Vulnerability Assessment is currently only available for MS SQL databases.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/mssql_server_vulnerability_assessment.html.markdown.
type ServerVulnerabilityAssessment struct {
	s *pulumi.ResourceState
}

// NewServerVulnerabilityAssessment registers a new resource with the given unique name, arguments, and options.
func NewServerVulnerabilityAssessment(ctx *pulumi.Context,
	name string, args *ServerVulnerabilityAssessmentArgs, opts ...pulumi.ResourceOpt) (*ServerVulnerabilityAssessment, error) {
	if args == nil || args.ServerSecurityAlertPolicyId == nil {
		return nil, errors.New("missing required argument 'ServerSecurityAlertPolicyId'")
	}
	if args == nil || args.StorageContainerPath == nil {
		return nil, errors.New("missing required argument 'StorageContainerPath'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["recurringScans"] = nil
		inputs["serverSecurityAlertPolicyId"] = nil
		inputs["storageAccountAccessKey"] = nil
		inputs["storageContainerPath"] = nil
		inputs["storageContainerSasKey"] = nil
	} else {
		inputs["recurringScans"] = args.RecurringScans
		inputs["serverSecurityAlertPolicyId"] = args.ServerSecurityAlertPolicyId
		inputs["storageAccountAccessKey"] = args.StorageAccountAccessKey
		inputs["storageContainerPath"] = args.StorageContainerPath
		inputs["storageContainerSasKey"] = args.StorageContainerSasKey
	}
	s, err := ctx.RegisterResource("azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServerVulnerabilityAssessment{s: s}, nil
}

// GetServerVulnerabilityAssessment gets an existing ServerVulnerabilityAssessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerVulnerabilityAssessment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServerVulnerabilityAssessmentState, opts ...pulumi.ResourceOpt) (*ServerVulnerabilityAssessment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["recurringScans"] = state.RecurringScans
		inputs["serverSecurityAlertPolicyId"] = state.ServerSecurityAlertPolicyId
		inputs["storageAccountAccessKey"] = state.StorageAccountAccessKey
		inputs["storageContainerPath"] = state.StorageContainerPath
		inputs["storageContainerSasKey"] = state.StorageContainerSasKey
	}
	s, err := ctx.ReadResource("azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServerVulnerabilityAssessment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ServerVulnerabilityAssessment) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ServerVulnerabilityAssessment) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The recurring scans settings. The `recurringScans` block supports fields documented below.
func (r *ServerVulnerabilityAssessment) RecurringScans() pulumi.Output {
	return r.s.State["recurringScans"]
}

// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
func (r *ServerVulnerabilityAssessment) ServerSecurityAlertPolicyId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serverSecurityAlertPolicyId"])
}

// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
func (r *ServerVulnerabilityAssessment) StorageAccountAccessKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["storageAccountAccessKey"])
}

// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
func (r *ServerVulnerabilityAssessment) StorageContainerPath() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["storageContainerPath"])
}

// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
func (r *ServerVulnerabilityAssessment) StorageContainerSasKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["storageContainerSasKey"])
}

// Input properties used for looking up and filtering ServerVulnerabilityAssessment resources.
type ServerVulnerabilityAssessmentState struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans interface{}
	// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
	ServerSecurityAlertPolicyId interface{}
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey interface{}
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath interface{}
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey interface{}
}

// The set of arguments for constructing a ServerVulnerabilityAssessment resource.
type ServerVulnerabilityAssessmentArgs struct {
	// The recurring scans settings. The `recurringScans` block supports fields documented below.
	RecurringScans interface{}
	// The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
	ServerSecurityAlertPolicyId interface{}
	// Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
	StorageAccountAccessKey interface{}
	// A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
	StorageContainerPath interface{}
	// A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
	StorageContainerSasKey interface{}
}
