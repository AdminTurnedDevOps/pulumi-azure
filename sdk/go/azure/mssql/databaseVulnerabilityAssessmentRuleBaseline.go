// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mssql

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Database Vulnerability Assessment Rule Baseline.
// 
// > **NOTE** Database Vulnerability Assessment is currently only available for MS SQL databases.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/mssql_database_vulnerability_assessment_rule_baseline.html.markdown.
type DatabaseVulnerabilityAssessmentRuleBaseline struct {
	s *pulumi.ResourceState
}

// NewDatabaseVulnerabilityAssessmentRuleBaseline registers a new resource with the given unique name, arguments, and options.
func NewDatabaseVulnerabilityAssessmentRuleBaseline(ctx *pulumi.Context,
	name string, args *DatabaseVulnerabilityAssessmentRuleBaselineArgs, opts ...pulumi.ResourceOpt) (*DatabaseVulnerabilityAssessmentRuleBaseline, error) {
	if args == nil || args.BaselineResults == nil {
		return nil, errors.New("missing required argument 'BaselineResults'")
	}
	if args == nil || args.DatabaseName == nil {
		return nil, errors.New("missing required argument 'DatabaseName'")
	}
	if args == nil || args.RuleId == nil {
		return nil, errors.New("missing required argument 'RuleId'")
	}
	if args == nil || args.ServerVulnerabilityAssessmentId == nil {
		return nil, errors.New("missing required argument 'ServerVulnerabilityAssessmentId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["baselineName"] = nil
		inputs["baselineResults"] = nil
		inputs["databaseName"] = nil
		inputs["ruleId"] = nil
		inputs["serverVulnerabilityAssessmentId"] = nil
	} else {
		inputs["baselineName"] = args.BaselineName
		inputs["baselineResults"] = args.BaselineResults
		inputs["databaseName"] = args.DatabaseName
		inputs["ruleId"] = args.RuleId
		inputs["serverVulnerabilityAssessmentId"] = args.ServerVulnerabilityAssessmentId
	}
	s, err := ctx.RegisterResource("azure:mssql/databaseVulnerabilityAssessmentRuleBaseline:DatabaseVulnerabilityAssessmentRuleBaseline", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DatabaseVulnerabilityAssessmentRuleBaseline{s: s}, nil
}

// GetDatabaseVulnerabilityAssessmentRuleBaseline gets an existing DatabaseVulnerabilityAssessmentRuleBaseline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseVulnerabilityAssessmentRuleBaseline(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DatabaseVulnerabilityAssessmentRuleBaselineState, opts ...pulumi.ResourceOpt) (*DatabaseVulnerabilityAssessmentRuleBaseline, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["baselineName"] = state.BaselineName
		inputs["baselineResults"] = state.BaselineResults
		inputs["databaseName"] = state.DatabaseName
		inputs["ruleId"] = state.RuleId
		inputs["serverVulnerabilityAssessmentId"] = state.ServerVulnerabilityAssessmentId
	}
	s, err := ctx.ReadResource("azure:mssql/databaseVulnerabilityAssessmentRuleBaseline:DatabaseVulnerabilityAssessmentRuleBaseline", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DatabaseVulnerabilityAssessmentRuleBaseline{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DatabaseVulnerabilityAssessmentRuleBaseline) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DatabaseVulnerabilityAssessmentRuleBaseline) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The name of the vulnerability assessment rule baseline. Valid options are `default` and `master`. `default` implies a baseline on a database level rule and `master` for server level rule. Defaults to `default`. Changing this forces a new resource to be created.
func (r *DatabaseVulnerabilityAssessmentRuleBaseline) BaselineName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["baselineName"])
}

// A `baselineResult` block as documented below. Multiple blocks can be defined.
func (r *DatabaseVulnerabilityAssessmentRuleBaseline) BaselineResults() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["baselineResults"])
}

// Specifies the name of the MS SQL Database. Changing this forces a new resource to be created.
func (r *DatabaseVulnerabilityAssessmentRuleBaseline) DatabaseName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["databaseName"])
}

// The vulnerability assessment rule ID. Changing this forces a new resource to be created.
func (r *DatabaseVulnerabilityAssessmentRuleBaseline) RuleId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["ruleId"])
}

// The Vulnerability Assessment ID of the MS SQL Server. Changing this forces a new resource to be created.
func (r *DatabaseVulnerabilityAssessmentRuleBaseline) ServerVulnerabilityAssessmentId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serverVulnerabilityAssessmentId"])
}

// Input properties used for looking up and filtering DatabaseVulnerabilityAssessmentRuleBaseline resources.
type DatabaseVulnerabilityAssessmentRuleBaselineState struct {
	// The name of the vulnerability assessment rule baseline. Valid options are `default` and `master`. `default` implies a baseline on a database level rule and `master` for server level rule. Defaults to `default`. Changing this forces a new resource to be created.
	BaselineName interface{}
	// A `baselineResult` block as documented below. Multiple blocks can be defined.
	BaselineResults interface{}
	// Specifies the name of the MS SQL Database. Changing this forces a new resource to be created.
	DatabaseName interface{}
	// The vulnerability assessment rule ID. Changing this forces a new resource to be created.
	RuleId interface{}
	// The Vulnerability Assessment ID of the MS SQL Server. Changing this forces a new resource to be created.
	ServerVulnerabilityAssessmentId interface{}
}

// The set of arguments for constructing a DatabaseVulnerabilityAssessmentRuleBaseline resource.
type DatabaseVulnerabilityAssessmentRuleBaselineArgs struct {
	// The name of the vulnerability assessment rule baseline. Valid options are `default` and `master`. `default` implies a baseline on a database level rule and `master` for server level rule. Defaults to `default`. Changing this forces a new resource to be created.
	BaselineName interface{}
	// A `baselineResult` block as documented below. Multiple blocks can be defined.
	BaselineResults interface{}
	// Specifies the name of the MS SQL Database. Changing this forces a new resource to be created.
	DatabaseName interface{}
	// The vulnerability assessment rule ID. Changing this forces a new resource to be created.
	RuleId interface{}
	// The Vulnerability Assessment ID of the MS SQL Server. Changing this forces a new resource to be created.
	ServerVulnerabilityAssessmentId interface{}
}
