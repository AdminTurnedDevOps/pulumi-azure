// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicebus

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a ServiceBus Namespace.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/servicebus_namespace.html.markdown.
type Namespace struct {
	pulumi.CustomResourceState

	// Specifies the capacity. When `sku` is `Premium`, capacity can be `1`, `2`, `4` or `8`. When `sku` is `Basic` or `Standard`, capacity can be `0` only.
	Capacity pulumi.IntOutput `pulumi:"capacity"`

	// The primary connection string for the authorization
	// rule `RootManageSharedAccessKey`.
	DefaultPrimaryConnectionString pulumi.StringOutput `pulumi:"defaultPrimaryConnectionString"`

	// The primary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultPrimaryKey pulumi.StringOutput `pulumi:"defaultPrimaryKey"`

	// The secondary connection string for the
	// authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryConnectionString pulumi.StringOutput `pulumi:"defaultSecondaryConnectionString"`

	// The secondary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryKey pulumi.StringOutput `pulumi:"defaultSecondaryKey"`

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// Specifies the name of the ServiceBus Namespace resource . Changing this forces a
	// new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the resource group in which to
	// create the namespace.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// Defines which tier to use. Options are basic, standard or premium.
	Sku pulumi.StringOutput `pulumi:"sku"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// Whether or not this resource is zone redundant. `sku` needs to be `Premium`. Defaults to `false`.
	ZoneRedundant pulumi.BoolOutput `pulumi:"zoneRedundant"`
}

// NewNamespace registers a new resource with the given unique name, arguments, and options.
func NewNamespace(ctx *pulumi.Context,
	name string, args *NamespaceArgs, opts ...pulumi.ResourceOption) (*Namespace, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Sku == nil {
		return nil, errors.New("missing required argument 'Sku'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Capacity; i != nil { inputs["capacity"] = i.ToIntOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Sku; i != nil { inputs["sku"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.ZoneRedundant; i != nil { inputs["zoneRedundant"] = i.ToBoolOutput() }
	}
	var resource Namespace
	err := ctx.RegisterResource("azure:servicebus/namespace:Namespace", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespace gets an existing Namespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceState, opts ...pulumi.ResourceOption) (*Namespace, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Capacity; i != nil { inputs["capacity"] = i.ToIntOutput() }
		if i := state.DefaultPrimaryConnectionString; i != nil { inputs["defaultPrimaryConnectionString"] = i.ToStringOutput() }
		if i := state.DefaultPrimaryKey; i != nil { inputs["defaultPrimaryKey"] = i.ToStringOutput() }
		if i := state.DefaultSecondaryConnectionString; i != nil { inputs["defaultSecondaryConnectionString"] = i.ToStringOutput() }
		if i := state.DefaultSecondaryKey; i != nil { inputs["defaultSecondaryKey"] = i.ToStringOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.Sku; i != nil { inputs["sku"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.ZoneRedundant; i != nil { inputs["zoneRedundant"] = i.ToBoolOutput() }
	}
	var resource Namespace
	err := ctx.ReadResource("azure:servicebus/namespace:Namespace", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Namespace resources.
type NamespaceState struct {
	// Specifies the capacity. When `sku` is `Premium`, capacity can be `1`, `2`, `4` or `8`. When `sku` is `Basic` or `Standard`, capacity can be `0` only.
	Capacity pulumi.IntInput `pulumi:"capacity"`
	// The primary connection string for the authorization
	// rule `RootManageSharedAccessKey`.
	DefaultPrimaryConnectionString pulumi.StringInput `pulumi:"defaultPrimaryConnectionString"`
	// The primary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultPrimaryKey pulumi.StringInput `pulumi:"defaultPrimaryKey"`
	// The secondary connection string for the
	// authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryConnectionString pulumi.StringInput `pulumi:"defaultSecondaryConnectionString"`
	// The secondary access key for the authorization rule `RootManageSharedAccessKey`.
	DefaultSecondaryKey pulumi.StringInput `pulumi:"defaultSecondaryKey"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the ServiceBus Namespace resource . Changing this forces a
	// new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which to
	// create the namespace.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Defines which tier to use. Options are basic, standard or premium.
	Sku pulumi.StringInput `pulumi:"sku"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Whether or not this resource is zone redundant. `sku` needs to be `Premium`. Defaults to `false`.
	ZoneRedundant pulumi.BoolInput `pulumi:"zoneRedundant"`
}

// The set of arguments for constructing a Namespace resource.
type NamespaceArgs struct {
	// Specifies the capacity. When `sku` is `Premium`, capacity can be `1`, `2`, `4` or `8`. When `sku` is `Basic` or `Standard`, capacity can be `0` only.
	Capacity pulumi.IntInput `pulumi:"capacity"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the ServiceBus Namespace resource . Changing this forces a
	// new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which to
	// create the namespace.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Defines which tier to use. Options are basic, standard or premium.
	Sku pulumi.StringInput `pulumi:"sku"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Whether or not this resource is zone redundant. `sku` needs to be `Premium`. Defaults to `false`.
	ZoneRedundant pulumi.BoolInput `pulumi:"zoneRedundant"`
}
