// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package servicebus

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a ServiceBus Topic.
// 
// **Note** Topics can only be created in Namespaces with an SKU of `standard` or higher.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/servicebus_topic.html.markdown.
type Topic struct {
	pulumi.CustomResourceState

	// The ISO 8601 timespan duration of the idle interval after which the
	// Topic is automatically deleted, minimum of 5 minutes.
	AutoDeleteOnIdle pulumi.StringOutput `pulumi:"autoDeleteOnIdle"`

	// The ISO 8601 timespan duration of TTL of messages sent to this topic if no
	// TTL value is set on the message itself.
	DefaultMessageTtl pulumi.StringOutput `pulumi:"defaultMessageTtl"`

	// The ISO 8601 timespan duration during which
	// duplicates can be detected. Defaults to 10 minutes. (`PT10M`)
	DuplicateDetectionHistoryTimeWindow pulumi.StringOutput `pulumi:"duplicateDetectionHistoryTimeWindow"`

	// Boolean flag which controls if server-side
	// batched operations are enabled. Defaults to false.
	EnableBatchedOperations pulumi.BoolOutput `pulumi:"enableBatchedOperations"`

	// Boolean flag which controls whether Express Entities
	// are enabled. An express topic holds a message in memory temporarily before writing
	// it to persistent storage. Defaults to false.
	EnableExpress pulumi.BoolOutput `pulumi:"enableExpress"`

	EnableFilteringMessagesBeforePublishing pulumi.BoolOutput `pulumi:"enableFilteringMessagesBeforePublishing"`

	// Boolean flag which controls whether to enable
	// the topic to be partitioned across multiple message brokers. Defaults to false.
	// Changing this forces a new resource to be created.
	EnablePartitioning pulumi.BoolOutput `pulumi:"enablePartitioning"`

	// Specifies the supported Azure location where the resource exists.
	// Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// Integer value which controls the size of
	// memory allocated for the topic. For supported values see the "Queue/topic size"
	// section of [this document](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-quotas).
	MaxSizeInMegabytes pulumi.IntOutput `pulumi:"maxSizeInMegabytes"`

	// Specifies the name of the ServiceBus Topic resource. Changing this forces a
	// new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the ServiceBus Namespace to create
	// this topic in. Changing this forces a new resource to be created.
	NamespaceName pulumi.StringOutput `pulumi:"namespaceName"`

	// Boolean flag which controls whether
	// the Topic requires duplicate detection. Defaults to false. Changing this forces
	// a new resource to be created.
	RequiresDuplicateDetection pulumi.BoolOutput `pulumi:"requiresDuplicateDetection"`

	// The name of the resource group in which to
	// create the namespace. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The Status of the Service Bus Topic. Acceptable values are `Active` or `Disabled`. Defaults to `Active`.
	Status pulumi.StringOutput `pulumi:"status"`

	// Boolean flag which controls whether the Topic
	// supports ordering. Defaults to false.
	SupportOrdering pulumi.BoolOutput `pulumi:"supportOrdering"`
}

// NewTopic registers a new resource with the given unique name, arguments, and options.
func NewTopic(ctx *pulumi.Context,
	name string, args *TopicArgs, opts ...pulumi.ResourceOption) (*Topic, error) {
	if args == nil || args.NamespaceName == nil {
		return nil, errors.New("missing required argument 'NamespaceName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AutoDeleteOnIdle; i != nil { inputs["autoDeleteOnIdle"] = i.ToStringOutput() }
		if i := args.DefaultMessageTtl; i != nil { inputs["defaultMessageTtl"] = i.ToStringOutput() }
		if i := args.DuplicateDetectionHistoryTimeWindow; i != nil { inputs["duplicateDetectionHistoryTimeWindow"] = i.ToStringOutput() }
		if i := args.EnableBatchedOperations; i != nil { inputs["enableBatchedOperations"] = i.ToBoolOutput() }
		if i := args.EnableExpress; i != nil { inputs["enableExpress"] = i.ToBoolOutput() }
		if i := args.EnableFilteringMessagesBeforePublishing; i != nil { inputs["enableFilteringMessagesBeforePublishing"] = i.ToBoolOutput() }
		if i := args.EnablePartitioning; i != nil { inputs["enablePartitioning"] = i.ToBoolOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.MaxSizeInMegabytes; i != nil { inputs["maxSizeInMegabytes"] = i.ToIntOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.NamespaceName; i != nil { inputs["namespaceName"] = i.ToStringOutput() }
		if i := args.RequiresDuplicateDetection; i != nil { inputs["requiresDuplicateDetection"] = i.ToBoolOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Status; i != nil { inputs["status"] = i.ToStringOutput() }
		if i := args.SupportOrdering; i != nil { inputs["supportOrdering"] = i.ToBoolOutput() }
	}
	var resource Topic
	err := ctx.RegisterResource("azure:servicebus/topic:Topic", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopic gets an existing Topic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicState, opts ...pulumi.ResourceOption) (*Topic, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AutoDeleteOnIdle; i != nil { inputs["autoDeleteOnIdle"] = i.ToStringOutput() }
		if i := state.DefaultMessageTtl; i != nil { inputs["defaultMessageTtl"] = i.ToStringOutput() }
		if i := state.DuplicateDetectionHistoryTimeWindow; i != nil { inputs["duplicateDetectionHistoryTimeWindow"] = i.ToStringOutput() }
		if i := state.EnableBatchedOperations; i != nil { inputs["enableBatchedOperations"] = i.ToBoolOutput() }
		if i := state.EnableExpress; i != nil { inputs["enableExpress"] = i.ToBoolOutput() }
		if i := state.EnableFilteringMessagesBeforePublishing; i != nil { inputs["enableFilteringMessagesBeforePublishing"] = i.ToBoolOutput() }
		if i := state.EnablePartitioning; i != nil { inputs["enablePartitioning"] = i.ToBoolOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.MaxSizeInMegabytes; i != nil { inputs["maxSizeInMegabytes"] = i.ToIntOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.NamespaceName; i != nil { inputs["namespaceName"] = i.ToStringOutput() }
		if i := state.RequiresDuplicateDetection; i != nil { inputs["requiresDuplicateDetection"] = i.ToBoolOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.Status; i != nil { inputs["status"] = i.ToStringOutput() }
		if i := state.SupportOrdering; i != nil { inputs["supportOrdering"] = i.ToBoolOutput() }
	}
	var resource Topic
	err := ctx.ReadResource("azure:servicebus/topic:Topic", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Topic resources.
type TopicState struct {
	// The ISO 8601 timespan duration of the idle interval after which the
	// Topic is automatically deleted, minimum of 5 minutes.
	AutoDeleteOnIdle pulumi.StringInput `pulumi:"autoDeleteOnIdle"`
	// The ISO 8601 timespan duration of TTL of messages sent to this topic if no
	// TTL value is set on the message itself.
	DefaultMessageTtl pulumi.StringInput `pulumi:"defaultMessageTtl"`
	// The ISO 8601 timespan duration during which
	// duplicates can be detected. Defaults to 10 minutes. (`PT10M`)
	DuplicateDetectionHistoryTimeWindow pulumi.StringInput `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Boolean flag which controls if server-side
	// batched operations are enabled. Defaults to false.
	EnableBatchedOperations pulumi.BoolInput `pulumi:"enableBatchedOperations"`
	// Boolean flag which controls whether Express Entities
	// are enabled. An express topic holds a message in memory temporarily before writing
	// it to persistent storage. Defaults to false.
	EnableExpress pulumi.BoolInput `pulumi:"enableExpress"`
	EnableFilteringMessagesBeforePublishing pulumi.BoolInput `pulumi:"enableFilteringMessagesBeforePublishing"`
	// Boolean flag which controls whether to enable
	// the topic to be partitioned across multiple message brokers. Defaults to false.
	// Changing this forces a new resource to be created.
	EnablePartitioning pulumi.BoolInput `pulumi:"enablePartitioning"`
	// Specifies the supported Azure location where the resource exists.
	// Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Integer value which controls the size of
	// memory allocated for the topic. For supported values see the "Queue/topic size"
	// section of [this document](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-quotas).
	MaxSizeInMegabytes pulumi.IntInput `pulumi:"maxSizeInMegabytes"`
	// Specifies the name of the ServiceBus Topic resource. Changing this forces a
	// new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the ServiceBus Namespace to create
	// this topic in. Changing this forces a new resource to be created.
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
	// Boolean flag which controls whether
	// the Topic requires duplicate detection. Defaults to false. Changing this forces
	// a new resource to be created.
	RequiresDuplicateDetection pulumi.BoolInput `pulumi:"requiresDuplicateDetection"`
	// The name of the resource group in which to
	// create the namespace. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The Status of the Service Bus Topic. Acceptable values are `Active` or `Disabled`. Defaults to `Active`.
	Status pulumi.StringInput `pulumi:"status"`
	// Boolean flag which controls whether the Topic
	// supports ordering. Defaults to false.
	SupportOrdering pulumi.BoolInput `pulumi:"supportOrdering"`
}

// The set of arguments for constructing a Topic resource.
type TopicArgs struct {
	// The ISO 8601 timespan duration of the idle interval after which the
	// Topic is automatically deleted, minimum of 5 minutes.
	AutoDeleteOnIdle pulumi.StringInput `pulumi:"autoDeleteOnIdle"`
	// The ISO 8601 timespan duration of TTL of messages sent to this topic if no
	// TTL value is set on the message itself.
	DefaultMessageTtl pulumi.StringInput `pulumi:"defaultMessageTtl"`
	// The ISO 8601 timespan duration during which
	// duplicates can be detected. Defaults to 10 minutes. (`PT10M`)
	DuplicateDetectionHistoryTimeWindow pulumi.StringInput `pulumi:"duplicateDetectionHistoryTimeWindow"`
	// Boolean flag which controls if server-side
	// batched operations are enabled. Defaults to false.
	EnableBatchedOperations pulumi.BoolInput `pulumi:"enableBatchedOperations"`
	// Boolean flag which controls whether Express Entities
	// are enabled. An express topic holds a message in memory temporarily before writing
	// it to persistent storage. Defaults to false.
	EnableExpress pulumi.BoolInput `pulumi:"enableExpress"`
	EnableFilteringMessagesBeforePublishing pulumi.BoolInput `pulumi:"enableFilteringMessagesBeforePublishing"`
	// Boolean flag which controls whether to enable
	// the topic to be partitioned across multiple message brokers. Defaults to false.
	// Changing this forces a new resource to be created.
	EnablePartitioning pulumi.BoolInput `pulumi:"enablePartitioning"`
	// Specifies the supported Azure location where the resource exists.
	// Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Integer value which controls the size of
	// memory allocated for the topic. For supported values see the "Queue/topic size"
	// section of [this document](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-quotas).
	MaxSizeInMegabytes pulumi.IntInput `pulumi:"maxSizeInMegabytes"`
	// Specifies the name of the ServiceBus Topic resource. Changing this forces a
	// new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the ServiceBus Namespace to create
	// this topic in. Changing this forces a new resource to be created.
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
	// Boolean flag which controls whether
	// the Topic requires duplicate detection. Defaults to false. Changing this forces
	// a new resource to be created.
	RequiresDuplicateDetection pulumi.BoolInput `pulumi:"requiresDuplicateDetection"`
	// The name of the resource group in which to
	// create the namespace. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The Status of the Service Bus Topic. Acceptable values are `Active` or `Disabled`. Defaults to `Active`.
	Status pulumi.StringInput `pulumi:"status"`
	// Boolean flag which controls whether the Topic
	// supports ordering. Defaults to false.
	SupportOrdering pulumi.BoolInput `pulumi:"supportOrdering"`
}
