// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Node Pool within a Kubernetes Cluster
// 
// > **NOTE:** Multiple Node Pools are only supported when the Kubernetes Cluster is using Virtual Machine Scale Sets.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/kubernetes_cluster_node_pool.html.markdown.
type KubernetesClusterNodePool struct {
	s *pulumi.ResourceState
}

// NewKubernetesClusterNodePool registers a new resource with the given unique name, arguments, and options.
func NewKubernetesClusterNodePool(ctx *pulumi.Context,
	name string, args *KubernetesClusterNodePoolArgs, opts ...pulumi.ResourceOpt) (*KubernetesClusterNodePool, error) {
	if args == nil || args.KubernetesClusterId == nil {
		return nil, errors.New("missing required argument 'KubernetesClusterId'")
	}
	if args == nil || args.VmSize == nil {
		return nil, errors.New("missing required argument 'VmSize'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["availabilityZones"] = nil
		inputs["enableAutoScaling"] = nil
		inputs["enableNodePublicIp"] = nil
		inputs["kubernetesClusterId"] = nil
		inputs["maxCount"] = nil
		inputs["maxPods"] = nil
		inputs["minCount"] = nil
		inputs["name"] = nil
		inputs["nodeCount"] = nil
		inputs["nodeTaints"] = nil
		inputs["osDiskSizeGb"] = nil
		inputs["osType"] = nil
		inputs["vmSize"] = nil
		inputs["vnetSubnetId"] = nil
	} else {
		inputs["availabilityZones"] = args.AvailabilityZones
		inputs["enableAutoScaling"] = args.EnableAutoScaling
		inputs["enableNodePublicIp"] = args.EnableNodePublicIp
		inputs["kubernetesClusterId"] = args.KubernetesClusterId
		inputs["maxCount"] = args.MaxCount
		inputs["maxPods"] = args.MaxPods
		inputs["minCount"] = args.MinCount
		inputs["name"] = args.Name
		inputs["nodeCount"] = args.NodeCount
		inputs["nodeTaints"] = args.NodeTaints
		inputs["osDiskSizeGb"] = args.OsDiskSizeGb
		inputs["osType"] = args.OsType
		inputs["vmSize"] = args.VmSize
		inputs["vnetSubnetId"] = args.VnetSubnetId
	}
	s, err := ctx.RegisterResource("azure:containerservice/kubernetesClusterNodePool:KubernetesClusterNodePool", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KubernetesClusterNodePool{s: s}, nil
}

// GetKubernetesClusterNodePool gets an existing KubernetesClusterNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesClusterNodePool(ctx *pulumi.Context,
	name string, id pulumi.ID, state *KubernetesClusterNodePoolState, opts ...pulumi.ResourceOpt) (*KubernetesClusterNodePool, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["availabilityZones"] = state.AvailabilityZones
		inputs["enableAutoScaling"] = state.EnableAutoScaling
		inputs["enableNodePublicIp"] = state.EnableNodePublicIp
		inputs["kubernetesClusterId"] = state.KubernetesClusterId
		inputs["maxCount"] = state.MaxCount
		inputs["maxPods"] = state.MaxPods
		inputs["minCount"] = state.MinCount
		inputs["name"] = state.Name
		inputs["nodeCount"] = state.NodeCount
		inputs["nodeTaints"] = state.NodeTaints
		inputs["osDiskSizeGb"] = state.OsDiskSizeGb
		inputs["osType"] = state.OsType
		inputs["vmSize"] = state.VmSize
		inputs["vnetSubnetId"] = state.VnetSubnetId
	}
	s, err := ctx.ReadResource("azure:containerservice/kubernetesClusterNodePool:KubernetesClusterNodePool", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &KubernetesClusterNodePool{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *KubernetesClusterNodePool) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *KubernetesClusterNodePool) ID() pulumi.IDOutput {
	return r.s.ID()
}

// A list of Availability Zones where the Nodes in this Node Pool should be created in.
func (r *KubernetesClusterNodePool) AvailabilityZones() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["availabilityZones"])
}

// Whether to enable [auto-scaler](https://docs.microsoft.com/en-us/azure/aks/cluster-autoscaler). Defaults to `false`.
func (r *KubernetesClusterNodePool) EnableAutoScaling() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enableAutoScaling"])
}

// Should each node have a Public IP Address? Defaults to `false`.
func (r *KubernetesClusterNodePool) EnableNodePublicIp() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enableNodePublicIp"])
}

// The ID of the Kubernetes Cluster where this Node Pool should exist. Changing this forces a new resource to be created.
func (r *KubernetesClusterNodePool) KubernetesClusterId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["kubernetesClusterId"])
}

// The maximum number of nodes which should exist within this Node Pool. Valid values are between `1` and `100` and must be greater than or equal to `minCount`.
func (r *KubernetesClusterNodePool) MaxCount() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxCount"])
}

// The maximum number of pods that can run on each agent. Changing this forces a new resource to be created.
func (r *KubernetesClusterNodePool) MaxPods() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxPods"])
}

// The minimum number of nodes which should exist within this Node Pool. Valid values are between `1` and `100` and must be less than or equal to `maxCount`.
func (r *KubernetesClusterNodePool) MinCount() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["minCount"])
}

// The name of the Node Pool which should be created within the Kubernetes Cluster. Changing this forces a new resource to be created.
func (r *KubernetesClusterNodePool) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The number of nodes which should exist within this Node Pool. Valid values are between `1` and `100`.
func (r *KubernetesClusterNodePool) NodeCount() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["nodeCount"])
}

// A list of Kubernetes taints which should be applied to nodes in the agent pool (e.g `key=value:NoSchedule`).
func (r *KubernetesClusterNodePool) NodeTaints() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["nodeTaints"])
}

// The Agent Operating System disk size in GB. Changing this forces a new resource to be created.
func (r *KubernetesClusterNodePool) OsDiskSizeGb() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["osDiskSizeGb"])
}

// The Operating System which should be used for this Node Pool. Changing this forces a new resource to be created. Possible values are `Linux` and `Windows`. Defaults to `Linux`.
func (r *KubernetesClusterNodePool) OsType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["osType"])
}

// The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this forces a new resource to be created.
func (r *KubernetesClusterNodePool) VmSize() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vmSize"])
}

// The ID of the Subnet where this Node Pool should exist.
func (r *KubernetesClusterNodePool) VnetSubnetId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vnetSubnetId"])
}

// Input properties used for looking up and filtering KubernetesClusterNodePool resources.
type KubernetesClusterNodePoolState struct {
	// A list of Availability Zones where the Nodes in this Node Pool should be created in.
	AvailabilityZones interface{}
	// Whether to enable [auto-scaler](https://docs.microsoft.com/en-us/azure/aks/cluster-autoscaler). Defaults to `false`.
	EnableAutoScaling interface{}
	// Should each node have a Public IP Address? Defaults to `false`.
	EnableNodePublicIp interface{}
	// The ID of the Kubernetes Cluster where this Node Pool should exist. Changing this forces a new resource to be created.
	KubernetesClusterId interface{}
	// The maximum number of nodes which should exist within this Node Pool. Valid values are between `1` and `100` and must be greater than or equal to `minCount`.
	MaxCount interface{}
	// The maximum number of pods that can run on each agent. Changing this forces a new resource to be created.
	MaxPods interface{}
	// The minimum number of nodes which should exist within this Node Pool. Valid values are between `1` and `100` and must be less than or equal to `maxCount`.
	MinCount interface{}
	// The name of the Node Pool which should be created within the Kubernetes Cluster. Changing this forces a new resource to be created.
	Name interface{}
	// The number of nodes which should exist within this Node Pool. Valid values are between `1` and `100`.
	NodeCount interface{}
	// A list of Kubernetes taints which should be applied to nodes in the agent pool (e.g `key=value:NoSchedule`).
	NodeTaints interface{}
	// The Agent Operating System disk size in GB. Changing this forces a new resource to be created.
	OsDiskSizeGb interface{}
	// The Operating System which should be used for this Node Pool. Changing this forces a new resource to be created. Possible values are `Linux` and `Windows`. Defaults to `Linux`.
	OsType interface{}
	// The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this forces a new resource to be created.
	VmSize interface{}
	// The ID of the Subnet where this Node Pool should exist.
	VnetSubnetId interface{}
}

// The set of arguments for constructing a KubernetesClusterNodePool resource.
type KubernetesClusterNodePoolArgs struct {
	// A list of Availability Zones where the Nodes in this Node Pool should be created in.
	AvailabilityZones interface{}
	// Whether to enable [auto-scaler](https://docs.microsoft.com/en-us/azure/aks/cluster-autoscaler). Defaults to `false`.
	EnableAutoScaling interface{}
	// Should each node have a Public IP Address? Defaults to `false`.
	EnableNodePublicIp interface{}
	// The ID of the Kubernetes Cluster where this Node Pool should exist. Changing this forces a new resource to be created.
	KubernetesClusterId interface{}
	// The maximum number of nodes which should exist within this Node Pool. Valid values are between `1` and `100` and must be greater than or equal to `minCount`.
	MaxCount interface{}
	// The maximum number of pods that can run on each agent. Changing this forces a new resource to be created.
	MaxPods interface{}
	// The minimum number of nodes which should exist within this Node Pool. Valid values are between `1` and `100` and must be less than or equal to `maxCount`.
	MinCount interface{}
	// The name of the Node Pool which should be created within the Kubernetes Cluster. Changing this forces a new resource to be created.
	Name interface{}
	// The number of nodes which should exist within this Node Pool. Valid values are between `1` and `100`.
	NodeCount interface{}
	// A list of Kubernetes taints which should be applied to nodes in the agent pool (e.g `key=value:NoSchedule`).
	NodeTaints interface{}
	// The Agent Operating System disk size in GB. Changing this forces a new resource to be created.
	OsDiskSizeGb interface{}
	// The Operating System which should be used for this Node Pool. Changing this forces a new resource to be created. Possible values are `Linux` and `Windows`. Defaults to `Linux`.
	OsType interface{}
	// The SKU which should be used for the Virtual Machines used in this Node Pool. Changing this forces a new resource to be created.
	VmSize interface{}
	// The ID of the Subnet where this Node Pool should exist.
	VnetSubnetId interface{}
}
