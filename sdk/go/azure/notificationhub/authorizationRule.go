// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package notificationhub

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Authorization Rule associated with a Notification Hub within a Notification Hub Namespace.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/notification_hub_authorization_rule.html.markdown.
type AuthorizationRule struct {
	pulumi.CustomResourceState

	// Does this Authorization Rule have Listen access to the Notification Hub? Defaults to `false`.
	Listen pulumi.BoolOutput `pulumi:"listen"`

	// Does this Authorization Rule have Manage access to the Notification Hub? Defaults to `false`.
	Manage pulumi.BoolOutput `pulumi:"manage"`

	// The name to use for this Authorization Rule. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the Notification Hub Namespace in which the Notification Hub exists. Changing this forces a new resource to be created.
	NamespaceName pulumi.StringOutput `pulumi:"namespaceName"`

	// The name of the Notification Hub for which the Authorization Rule should be created. Changing this forces a new resource to be created.
	NotificationHubName pulumi.StringOutput `pulumi:"notificationHubName"`

	// The Primary Access Key associated with this Authorization Rule.
	PrimaryAccessKey pulumi.StringOutput `pulumi:"primaryAccessKey"`

	// The name of the Resource Group in which the Notification Hub Namespace exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The Secondary Access Key associated with this Authorization Rule.
	SecondaryAccessKey pulumi.StringOutput `pulumi:"secondaryAccessKey"`

	// Does this Authorization Rule have Send access to the Notification Hub? Defaults to `false`.
	Send pulumi.BoolOutput `pulumi:"send"`
}

// NewAuthorizationRule registers a new resource with the given unique name, arguments, and options.
func NewAuthorizationRule(ctx *pulumi.Context,
	name string, args *AuthorizationRuleArgs, opts ...pulumi.ResourceOption) (*AuthorizationRule, error) {
	if args == nil || args.NamespaceName == nil {
		return nil, errors.New("missing required argument 'NamespaceName'")
	}
	if args == nil || args.NotificationHubName == nil {
		return nil, errors.New("missing required argument 'NotificationHubName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Listen; i != nil { inputs["listen"] = i.ToBoolOutput() }
		if i := args.Manage; i != nil { inputs["manage"] = i.ToBoolOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.NamespaceName; i != nil { inputs["namespaceName"] = i.ToStringOutput() }
		if i := args.NotificationHubName; i != nil { inputs["notificationHubName"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Send; i != nil { inputs["send"] = i.ToBoolOutput() }
	}
	var resource AuthorizationRule
	err := ctx.RegisterResource("azure:notificationhub/authorizationRule:AuthorizationRule", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizationRule gets an existing AuthorizationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizationRuleState, opts ...pulumi.ResourceOption) (*AuthorizationRule, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Listen; i != nil { inputs["listen"] = i.ToBoolOutput() }
		if i := state.Manage; i != nil { inputs["manage"] = i.ToBoolOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.NamespaceName; i != nil { inputs["namespaceName"] = i.ToStringOutput() }
		if i := state.NotificationHubName; i != nil { inputs["notificationHubName"] = i.ToStringOutput() }
		if i := state.PrimaryAccessKey; i != nil { inputs["primaryAccessKey"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.SecondaryAccessKey; i != nil { inputs["secondaryAccessKey"] = i.ToStringOutput() }
		if i := state.Send; i != nil { inputs["send"] = i.ToBoolOutput() }
	}
	var resource AuthorizationRule
	err := ctx.ReadResource("azure:notificationhub/authorizationRule:AuthorizationRule", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorizationRule resources.
type AuthorizationRuleState struct {
	// Does this Authorization Rule have Listen access to the Notification Hub? Defaults to `false`.
	Listen pulumi.BoolInput `pulumi:"listen"`
	// Does this Authorization Rule have Manage access to the Notification Hub? Defaults to `false`.
	Manage pulumi.BoolInput `pulumi:"manage"`
	// The name to use for this Authorization Rule. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Notification Hub Namespace in which the Notification Hub exists. Changing this forces a new resource to be created.
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
	// The name of the Notification Hub for which the Authorization Rule should be created. Changing this forces a new resource to be created.
	NotificationHubName pulumi.StringInput `pulumi:"notificationHubName"`
	// The Primary Access Key associated with this Authorization Rule.
	PrimaryAccessKey pulumi.StringInput `pulumi:"primaryAccessKey"`
	// The name of the Resource Group in which the Notification Hub Namespace exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The Secondary Access Key associated with this Authorization Rule.
	SecondaryAccessKey pulumi.StringInput `pulumi:"secondaryAccessKey"`
	// Does this Authorization Rule have Send access to the Notification Hub? Defaults to `false`.
	Send pulumi.BoolInput `pulumi:"send"`
}

// The set of arguments for constructing a AuthorizationRule resource.
type AuthorizationRuleArgs struct {
	// Does this Authorization Rule have Listen access to the Notification Hub? Defaults to `false`.
	Listen pulumi.BoolInput `pulumi:"listen"`
	// Does this Authorization Rule have Manage access to the Notification Hub? Defaults to `false`.
	Manage pulumi.BoolInput `pulumi:"manage"`
	// The name to use for this Authorization Rule. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Notification Hub Namespace in which the Notification Hub exists. Changing this forces a new resource to be created.
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
	// The name of the Notification Hub for which the Authorization Rule should be created. Changing this forces a new resource to be created.
	NotificationHubName pulumi.StringInput `pulumi:"notificationHubName"`
	// The name of the Resource Group in which the Notification Hub Namespace exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Does this Authorization Rule have Send access to the Notification Hub? Defaults to `false`.
	Send pulumi.BoolInput `pulumi:"send"`
}
