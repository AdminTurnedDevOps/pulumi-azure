// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package notificationhub

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Notification Hub Namespace.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/notification_hub_namespace.html.markdown.
type Namespace struct {
	pulumi.CustomResourceState

	// Is this Notification Hub Namespace enabled? Defaults to `true`.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`

	// The Azure Region in which this Notification Hub Namespace should be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// The name to use for this Notification Hub Namespace. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The Type of Namespace - possible values are `Messaging` or `NotificationHub`. Changing this forces a new resource to be created.
	NamespaceType pulumi.StringOutput `pulumi:"namespaceType"`

	// The name of the Resource Group in which the Notification Hub Namespace should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The ServiceBus Endpoint for this Notification Hub Namespace.
	ServicebusEndpoint pulumi.StringOutput `pulumi:"servicebusEndpoint"`

	// ) A `sku` block as described below.
	Sku NamespaceSkuOutput `pulumi:"sku"`

	// The name of the SKU to use for this Notification Hub Namespace. Possible values are `Free`, `Basic` or `Standard`. Changing this forces a new resource to be created.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
}

// NewNamespace registers a new resource with the given unique name, arguments, and options.
func NewNamespace(ctx *pulumi.Context,
	name string, args *NamespaceArgs, opts ...pulumi.ResourceOption) (*Namespace, error) {
	if args == nil || args.NamespaceType == nil {
		return nil, errors.New("missing required argument 'NamespaceType'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Enabled; i != nil { inputs["enabled"] = i.ToBoolOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.NamespaceType; i != nil { inputs["namespaceType"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Sku; i != nil { inputs["sku"] = i.ToNamespaceSkuOutput() }
		if i := args.SkuName; i != nil { inputs["skuName"] = i.ToStringOutput() }
	}
	var resource Namespace
	err := ctx.RegisterResource("azure:notificationhub/namespace:Namespace", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespace gets an existing Namespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceState, opts ...pulumi.ResourceOption) (*Namespace, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Enabled; i != nil { inputs["enabled"] = i.ToBoolOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.NamespaceType; i != nil { inputs["namespaceType"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.ServicebusEndpoint; i != nil { inputs["servicebusEndpoint"] = i.ToStringOutput() }
		if i := state.Sku; i != nil { inputs["sku"] = i.ToNamespaceSkuOutput() }
		if i := state.SkuName; i != nil { inputs["skuName"] = i.ToStringOutput() }
	}
	var resource Namespace
	err := ctx.ReadResource("azure:notificationhub/namespace:Namespace", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Namespace resources.
type NamespaceState struct {
	// Is this Notification Hub Namespace enabled? Defaults to `true`.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The Azure Region in which this Notification Hub Namespace should be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The name to use for this Notification Hub Namespace. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The Type of Namespace - possible values are `Messaging` or `NotificationHub`. Changing this forces a new resource to be created.
	NamespaceType pulumi.StringInput `pulumi:"namespaceType"`
	// The name of the Resource Group in which the Notification Hub Namespace should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The ServiceBus Endpoint for this Notification Hub Namespace.
	ServicebusEndpoint pulumi.StringInput `pulumi:"servicebusEndpoint"`
	// ) A `sku` block as described below.
	Sku NamespaceSkuInput `pulumi:"sku"`
	// The name of the SKU to use for this Notification Hub Namespace. Possible values are `Free`, `Basic` or `Standard`. Changing this forces a new resource to be created.
	SkuName pulumi.StringInput `pulumi:"skuName"`
}

// The set of arguments for constructing a Namespace resource.
type NamespaceArgs struct {
	// Is this Notification Hub Namespace enabled? Defaults to `true`.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The Azure Region in which this Notification Hub Namespace should be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The name to use for this Notification Hub Namespace. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The Type of Namespace - possible values are `Messaging` or `NotificationHub`. Changing this forces a new resource to be created.
	NamespaceType pulumi.StringInput `pulumi:"namespaceType"`
	// The name of the Resource Group in which the Notification Hub Namespace should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// ) A `sku` block as described below.
	Sku NamespaceSkuInput `pulumi:"sku"`
	// The name of the SKU to use for this Notification Hub Namespace. Possible values are `Free`, `Basic` or `Standard`. Changing this forces a new resource to be created.
	SkuName pulumi.StringInput `pulumi:"skuName"`
}
type NamespaceSku struct {
	// The name to use for this Notification Hub Namespace. Changing this forces a new resource to be created.
	Name string `pulumi:"name"`
}
var namespaceSkuType = reflect.TypeOf((*NamespaceSku)(nil)).Elem()

type NamespaceSkuInput interface {
	pulumi.Input

	ToNamespaceSkuOutput() NamespaceSkuOutput
	ToNamespaceSkuOutputWithContext(ctx context.Context) NamespaceSkuOutput
}

type NamespaceSkuArgs struct {
	// The name to use for this Notification Hub Namespace. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
}

func (NamespaceSkuArgs) ElementType() reflect.Type {
	return namespaceSkuType
}

func (a NamespaceSkuArgs) ToNamespaceSkuOutput() NamespaceSkuOutput {
	return pulumi.ToOutput(a).(NamespaceSkuOutput)
}

func (a NamespaceSkuArgs) ToNamespaceSkuOutputWithContext(ctx context.Context) NamespaceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NamespaceSkuOutput)
}

type NamespaceSkuOutput struct { *pulumi.OutputState }

// The name to use for this Notification Hub Namespace. Changing this forces a new resource to be created.
func (o NamespaceSkuOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v NamespaceSku) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (NamespaceSkuOutput) ElementType() reflect.Type {
	return namespaceSkuType
}

func (o NamespaceSkuOutput) ToNamespaceSkuOutput() NamespaceSkuOutput {
	return o
}

func (o NamespaceSkuOutput) ToNamespaceSkuOutputWithContext(ctx context.Context) NamespaceSkuOutput {
	return o
}

func init() { pulumi.RegisterOutputType(NamespaceSkuOutput{}) }

