// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an API Version Set within an API Management Service.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/api_management_api_version_set.html.markdown.
type ApiVersionSet struct {
	pulumi.CustomResourceState

	// The name of the API Management Service in which the API Version Set should exist. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`

	// The description of API Version Set.
	Description pulumi.StringOutput `pulumi:"description"`

	// The display name of this API Version Set.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`

	// The name of the API Version Set. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the Resource Group in which the parent API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The name of the Header which should be read from Inbound Requests which defines the API Version.
	VersionHeaderName pulumi.StringOutput `pulumi:"versionHeaderName"`

	// The name of the Query String which should be read from Inbound Requests which defines the API Version.
	VersionQueryName pulumi.StringOutput `pulumi:"versionQueryName"`

	// Specifies where in an Inbound HTTP Request that the API Version should be read from. Possible values are `Header`, `Query` and `Segment`.
	VersioningScheme pulumi.StringOutput `pulumi:"versioningScheme"`
}

// NewApiVersionSet registers a new resource with the given unique name, arguments, and options.
func NewApiVersionSet(ctx *pulumi.Context,
	name string, args *ApiVersionSetArgs, opts ...pulumi.ResourceOption) (*ApiVersionSet, error) {
	if args == nil || args.ApiManagementName == nil {
		return nil, errors.New("missing required argument 'ApiManagementName'")
	}
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.VersioningScheme == nil {
		return nil, errors.New("missing required argument 'VersioningScheme'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ApiManagementName; i != nil { inputs["apiManagementName"] = i.ToStringOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.DisplayName; i != nil { inputs["displayName"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.VersionHeaderName; i != nil { inputs["versionHeaderName"] = i.ToStringOutput() }
		if i := args.VersionQueryName; i != nil { inputs["versionQueryName"] = i.ToStringOutput() }
		if i := args.VersioningScheme; i != nil { inputs["versioningScheme"] = i.ToStringOutput() }
	}
	var resource ApiVersionSet
	err := ctx.RegisterResource("azure:apimanagement/apiVersionSet:ApiVersionSet", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiVersionSet gets an existing ApiVersionSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiVersionSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiVersionSetState, opts ...pulumi.ResourceOption) (*ApiVersionSet, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ApiManagementName; i != nil { inputs["apiManagementName"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.DisplayName; i != nil { inputs["displayName"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.VersionHeaderName; i != nil { inputs["versionHeaderName"] = i.ToStringOutput() }
		if i := state.VersionQueryName; i != nil { inputs["versionQueryName"] = i.ToStringOutput() }
		if i := state.VersioningScheme; i != nil { inputs["versioningScheme"] = i.ToStringOutput() }
	}
	var resource ApiVersionSet
	err := ctx.ReadResource("azure:apimanagement/apiVersionSet:ApiVersionSet", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiVersionSet resources.
type ApiVersionSetState struct {
	// The name of the API Management Service in which the API Version Set should exist. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// The description of API Version Set.
	Description pulumi.StringInput `pulumi:"description"`
	// The display name of this API Version Set.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The name of the API Version Set. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group in which the parent API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the Header which should be read from Inbound Requests which defines the API Version.
	VersionHeaderName pulumi.StringInput `pulumi:"versionHeaderName"`
	// The name of the Query String which should be read from Inbound Requests which defines the API Version.
	VersionQueryName pulumi.StringInput `pulumi:"versionQueryName"`
	// Specifies where in an Inbound HTTP Request that the API Version should be read from. Possible values are `Header`, `Query` and `Segment`.
	VersioningScheme pulumi.StringInput `pulumi:"versioningScheme"`
}

// The set of arguments for constructing a ApiVersionSet resource.
type ApiVersionSetArgs struct {
	// The name of the API Management Service in which the API Version Set should exist. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// The description of API Version Set.
	Description pulumi.StringInput `pulumi:"description"`
	// The display name of this API Version Set.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The name of the API Version Set. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group in which the parent API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the Header which should be read from Inbound Requests which defines the API Version.
	VersionHeaderName pulumi.StringInput `pulumi:"versionHeaderName"`
	// The name of the Query String which should be read from Inbound Requests which defines the API Version.
	VersionQueryName pulumi.StringInput `pulumi:"versionQueryName"`
	// Specifies where in an Inbound HTTP Request that the API Version should be read from. Possible values are `Header`, `Query` and `Segment`.
	VersioningScheme pulumi.StringInput `pulumi:"versioningScheme"`
}
