// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Authorization Server within an API Management Service.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/api_management_authorization_server.html.markdown.
type AuthorizationServer struct {
	pulumi.CustomResourceState

	// The name of the API Management Service in which this Authorization Server should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`

	// The OAUTH Authorization Endpoint.
	AuthorizationEndpoint pulumi.StringOutput `pulumi:"authorizationEndpoint"`

	// The HTTP Verbs supported by the Authorization Endpoint. Possible values are `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`.
	AuthorizationMethods pulumi.StringArrayOutput `pulumi:"authorizationMethods"`

	// The mechanism by which Access Tokens are passed to the API. Possible values are `authorizationHeader` and `query`.
	BearerTokenSendingMethods pulumi.StringArrayOutput `pulumi:"bearerTokenSendingMethods"`

	// The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are `Basic` and `Body`.
	ClientAuthenticationMethods pulumi.StringArrayOutput `pulumi:"clientAuthenticationMethods"`

	// The Client/App ID registered with this Authorization Server.
	ClientId pulumi.StringOutput `pulumi:"clientId"`

	// The URI of page where Client/App Registration is performed for this Authorization Server.
	ClientRegistrationEndpoint pulumi.StringOutput `pulumi:"clientRegistrationEndpoint"`

	// The Client/App Secret registered with this Authorization Server.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`

	// The Default Scope used when requesting an Access Token, specified as a string containing space-delimited values.
	DefaultScope pulumi.StringOutput `pulumi:"defaultScope"`

	// A description of the Authorization Server, which may contain HTML formatting tags.
	Description pulumi.StringOutput `pulumi:"description"`

	// The user-friendly name of this Authorization Server.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`

	// Form of Authorization Grants required when requesting an Access Token. Possible values are `authorizationCode`, `clientCredentials`, `implicit` and `resourceOwnerPassword`.
	GrantTypes pulumi.StringArrayOutput `pulumi:"grantTypes"`

	// The name of this Authorization Server. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The password associated with the Resource Owner.
	ResourceOwnerPassword pulumi.StringOutput `pulumi:"resourceOwnerPassword"`

	// The username associated with the Resource Owner.
	ResourceOwnerUsername pulumi.StringOutput `pulumi:"resourceOwnerUsername"`

	// Does this Authorization Server support State? If this is set to `true` the client may use the state parameter to raise protocol security.
	SupportState pulumi.BoolOutput `pulumi:"supportState"`

	TokenBodyParameters AuthorizationServerTokenBodyParametersArrayOutput `pulumi:"tokenBodyParameters"`

	// The OAUTH Token Endpoint.
	TokenEndpoint pulumi.StringOutput `pulumi:"tokenEndpoint"`
}

// NewAuthorizationServer registers a new resource with the given unique name, arguments, and options.
func NewAuthorizationServer(ctx *pulumi.Context,
	name string, args *AuthorizationServerArgs, opts ...pulumi.ResourceOption) (*AuthorizationServer, error) {
	if args == nil || args.ApiManagementName == nil {
		return nil, errors.New("missing required argument 'ApiManagementName'")
	}
	if args == nil || args.AuthorizationEndpoint == nil {
		return nil, errors.New("missing required argument 'AuthorizationEndpoint'")
	}
	if args == nil || args.AuthorizationMethods == nil {
		return nil, errors.New("missing required argument 'AuthorizationMethods'")
	}
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.ClientRegistrationEndpoint == nil {
		return nil, errors.New("missing required argument 'ClientRegistrationEndpoint'")
	}
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	if args == nil || args.GrantTypes == nil {
		return nil, errors.New("missing required argument 'GrantTypes'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ApiManagementName; i != nil { inputs["apiManagementName"] = i.ToStringOutput() }
		if i := args.AuthorizationEndpoint; i != nil { inputs["authorizationEndpoint"] = i.ToStringOutput() }
		if i := args.AuthorizationMethods; i != nil { inputs["authorizationMethods"] = i.ToStringArrayOutput() }
		if i := args.BearerTokenSendingMethods; i != nil { inputs["bearerTokenSendingMethods"] = i.ToStringArrayOutput() }
		if i := args.ClientAuthenticationMethods; i != nil { inputs["clientAuthenticationMethods"] = i.ToStringArrayOutput() }
		if i := args.ClientId; i != nil { inputs["clientId"] = i.ToStringOutput() }
		if i := args.ClientRegistrationEndpoint; i != nil { inputs["clientRegistrationEndpoint"] = i.ToStringOutput() }
		if i := args.ClientSecret; i != nil { inputs["clientSecret"] = i.ToStringOutput() }
		if i := args.DefaultScope; i != nil { inputs["defaultScope"] = i.ToStringOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.DisplayName; i != nil { inputs["displayName"] = i.ToStringOutput() }
		if i := args.GrantTypes; i != nil { inputs["grantTypes"] = i.ToStringArrayOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.ResourceOwnerPassword; i != nil { inputs["resourceOwnerPassword"] = i.ToStringOutput() }
		if i := args.ResourceOwnerUsername; i != nil { inputs["resourceOwnerUsername"] = i.ToStringOutput() }
		if i := args.SupportState; i != nil { inputs["supportState"] = i.ToBoolOutput() }
		if i := args.TokenBodyParameters; i != nil { inputs["tokenBodyParameters"] = i.ToAuthorizationServerTokenBodyParametersArrayOutput() }
		if i := args.TokenEndpoint; i != nil { inputs["tokenEndpoint"] = i.ToStringOutput() }
	}
	var resource AuthorizationServer
	err := ctx.RegisterResource("azure:apimanagement/authorizationServer:AuthorizationServer", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizationServer gets an existing AuthorizationServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizationServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizationServerState, opts ...pulumi.ResourceOption) (*AuthorizationServer, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ApiManagementName; i != nil { inputs["apiManagementName"] = i.ToStringOutput() }
		if i := state.AuthorizationEndpoint; i != nil { inputs["authorizationEndpoint"] = i.ToStringOutput() }
		if i := state.AuthorizationMethods; i != nil { inputs["authorizationMethods"] = i.ToStringArrayOutput() }
		if i := state.BearerTokenSendingMethods; i != nil { inputs["bearerTokenSendingMethods"] = i.ToStringArrayOutput() }
		if i := state.ClientAuthenticationMethods; i != nil { inputs["clientAuthenticationMethods"] = i.ToStringArrayOutput() }
		if i := state.ClientId; i != nil { inputs["clientId"] = i.ToStringOutput() }
		if i := state.ClientRegistrationEndpoint; i != nil { inputs["clientRegistrationEndpoint"] = i.ToStringOutput() }
		if i := state.ClientSecret; i != nil { inputs["clientSecret"] = i.ToStringOutput() }
		if i := state.DefaultScope; i != nil { inputs["defaultScope"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.DisplayName; i != nil { inputs["displayName"] = i.ToStringOutput() }
		if i := state.GrantTypes; i != nil { inputs["grantTypes"] = i.ToStringArrayOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.ResourceOwnerPassword; i != nil { inputs["resourceOwnerPassword"] = i.ToStringOutput() }
		if i := state.ResourceOwnerUsername; i != nil { inputs["resourceOwnerUsername"] = i.ToStringOutput() }
		if i := state.SupportState; i != nil { inputs["supportState"] = i.ToBoolOutput() }
		if i := state.TokenBodyParameters; i != nil { inputs["tokenBodyParameters"] = i.ToAuthorizationServerTokenBodyParametersArrayOutput() }
		if i := state.TokenEndpoint; i != nil { inputs["tokenEndpoint"] = i.ToStringOutput() }
	}
	var resource AuthorizationServer
	err := ctx.ReadResource("azure:apimanagement/authorizationServer:AuthorizationServer", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorizationServer resources.
type AuthorizationServerState struct {
	// The name of the API Management Service in which this Authorization Server should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// The OAUTH Authorization Endpoint.
	AuthorizationEndpoint pulumi.StringInput `pulumi:"authorizationEndpoint"`
	// The HTTP Verbs supported by the Authorization Endpoint. Possible values are `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`.
	AuthorizationMethods pulumi.StringArrayInput `pulumi:"authorizationMethods"`
	// The mechanism by which Access Tokens are passed to the API. Possible values are `authorizationHeader` and `query`.
	BearerTokenSendingMethods pulumi.StringArrayInput `pulumi:"bearerTokenSendingMethods"`
	// The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are `Basic` and `Body`.
	ClientAuthenticationMethods pulumi.StringArrayInput `pulumi:"clientAuthenticationMethods"`
	// The Client/App ID registered with this Authorization Server.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The URI of page where Client/App Registration is performed for this Authorization Server.
	ClientRegistrationEndpoint pulumi.StringInput `pulumi:"clientRegistrationEndpoint"`
	// The Client/App Secret registered with this Authorization Server.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// The Default Scope used when requesting an Access Token, specified as a string containing space-delimited values.
	DefaultScope pulumi.StringInput `pulumi:"defaultScope"`
	// A description of the Authorization Server, which may contain HTML formatting tags.
	Description pulumi.StringInput `pulumi:"description"`
	// The user-friendly name of this Authorization Server.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Form of Authorization Grants required when requesting an Access Token. Possible values are `authorizationCode`, `clientCredentials`, `implicit` and `resourceOwnerPassword`.
	GrantTypes pulumi.StringArrayInput `pulumi:"grantTypes"`
	// The name of this Authorization Server. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The password associated with the Resource Owner.
	ResourceOwnerPassword pulumi.StringInput `pulumi:"resourceOwnerPassword"`
	// The username associated with the Resource Owner.
	ResourceOwnerUsername pulumi.StringInput `pulumi:"resourceOwnerUsername"`
	// Does this Authorization Server support State? If this is set to `true` the client may use the state parameter to raise protocol security.
	SupportState pulumi.BoolInput `pulumi:"supportState"`
	TokenBodyParameters AuthorizationServerTokenBodyParametersArrayInput `pulumi:"tokenBodyParameters"`
	// The OAUTH Token Endpoint.
	TokenEndpoint pulumi.StringInput `pulumi:"tokenEndpoint"`
}

// The set of arguments for constructing a AuthorizationServer resource.
type AuthorizationServerArgs struct {
	// The name of the API Management Service in which this Authorization Server should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// The OAUTH Authorization Endpoint.
	AuthorizationEndpoint pulumi.StringInput `pulumi:"authorizationEndpoint"`
	// The HTTP Verbs supported by the Authorization Endpoint. Possible values are `DELETE`, `GET`, `HEAD`, `OPTIONS`, `PATCH`, `POST`, `PUT` and `TRACE`.
	AuthorizationMethods pulumi.StringArrayInput `pulumi:"authorizationMethods"`
	// The mechanism by which Access Tokens are passed to the API. Possible values are `authorizationHeader` and `query`.
	BearerTokenSendingMethods pulumi.StringArrayInput `pulumi:"bearerTokenSendingMethods"`
	// The Authentication Methods supported by the Token endpoint of this Authorization Server.. Possible values are `Basic` and `Body`.
	ClientAuthenticationMethods pulumi.StringArrayInput `pulumi:"clientAuthenticationMethods"`
	// The Client/App ID registered with this Authorization Server.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The URI of page where Client/App Registration is performed for this Authorization Server.
	ClientRegistrationEndpoint pulumi.StringInput `pulumi:"clientRegistrationEndpoint"`
	// The Client/App Secret registered with this Authorization Server.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// The Default Scope used when requesting an Access Token, specified as a string containing space-delimited values.
	DefaultScope pulumi.StringInput `pulumi:"defaultScope"`
	// A description of the Authorization Server, which may contain HTML formatting tags.
	Description pulumi.StringInput `pulumi:"description"`
	// The user-friendly name of this Authorization Server.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// Form of Authorization Grants required when requesting an Access Token. Possible values are `authorizationCode`, `clientCredentials`, `implicit` and `resourceOwnerPassword`.
	GrantTypes pulumi.StringArrayInput `pulumi:"grantTypes"`
	// The name of this Authorization Server. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The password associated with the Resource Owner.
	ResourceOwnerPassword pulumi.StringInput `pulumi:"resourceOwnerPassword"`
	// The username associated with the Resource Owner.
	ResourceOwnerUsername pulumi.StringInput `pulumi:"resourceOwnerUsername"`
	// Does this Authorization Server support State? If this is set to `true` the client may use the state parameter to raise protocol security.
	SupportState pulumi.BoolInput `pulumi:"supportState"`
	TokenBodyParameters AuthorizationServerTokenBodyParametersArrayInput `pulumi:"tokenBodyParameters"`
	// The OAUTH Token Endpoint.
	TokenEndpoint pulumi.StringInput `pulumi:"tokenEndpoint"`
}
type AuthorizationServerTokenBodyParameters struct {
	// The name of this Authorization Server. Changing this forces a new resource to be created.
	Name string `pulumi:"name"`
	Value string `pulumi:"value"`
}
var authorizationServerTokenBodyParametersType = reflect.TypeOf((*AuthorizationServerTokenBodyParameters)(nil)).Elem()

type AuthorizationServerTokenBodyParametersInput interface {
	pulumi.Input

	ToAuthorizationServerTokenBodyParametersOutput() AuthorizationServerTokenBodyParametersOutput
	ToAuthorizationServerTokenBodyParametersOutputWithContext(ctx context.Context) AuthorizationServerTokenBodyParametersOutput
}

type AuthorizationServerTokenBodyParametersArgs struct {
	// The name of this Authorization Server. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (AuthorizationServerTokenBodyParametersArgs) ElementType() reflect.Type {
	return authorizationServerTokenBodyParametersType
}

func (a AuthorizationServerTokenBodyParametersArgs) ToAuthorizationServerTokenBodyParametersOutput() AuthorizationServerTokenBodyParametersOutput {
	return pulumi.ToOutput(a).(AuthorizationServerTokenBodyParametersOutput)
}

func (a AuthorizationServerTokenBodyParametersArgs) ToAuthorizationServerTokenBodyParametersOutputWithContext(ctx context.Context) AuthorizationServerTokenBodyParametersOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AuthorizationServerTokenBodyParametersOutput)
}

type AuthorizationServerTokenBodyParametersOutput struct { *pulumi.OutputState }

// The name of this Authorization Server. Changing this forces a new resource to be created.
func (o AuthorizationServerTokenBodyParametersOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v AuthorizationServerTokenBodyParameters) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o AuthorizationServerTokenBodyParametersOutput) Value() pulumi.StringOutput {
	return o.Apply(func(v AuthorizationServerTokenBodyParameters) string {
		return v.Value
	}).(pulumi.StringOutput)
}

func (AuthorizationServerTokenBodyParametersOutput) ElementType() reflect.Type {
	return authorizationServerTokenBodyParametersType
}

func (o AuthorizationServerTokenBodyParametersOutput) ToAuthorizationServerTokenBodyParametersOutput() AuthorizationServerTokenBodyParametersOutput {
	return o
}

func (o AuthorizationServerTokenBodyParametersOutput) ToAuthorizationServerTokenBodyParametersOutputWithContext(ctx context.Context) AuthorizationServerTokenBodyParametersOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AuthorizationServerTokenBodyParametersOutput{}) }

var authorizationServerTokenBodyParametersArrayType = reflect.TypeOf((*[]AuthorizationServerTokenBodyParameters)(nil)).Elem()

type AuthorizationServerTokenBodyParametersArrayInput interface {
	pulumi.Input

	ToAuthorizationServerTokenBodyParametersArrayOutput() AuthorizationServerTokenBodyParametersArrayOutput
	ToAuthorizationServerTokenBodyParametersArrayOutputWithContext(ctx context.Context) AuthorizationServerTokenBodyParametersArrayOutput
}

type AuthorizationServerTokenBodyParametersArrayArgs []AuthorizationServerTokenBodyParametersInput

func (AuthorizationServerTokenBodyParametersArrayArgs) ElementType() reflect.Type {
	return authorizationServerTokenBodyParametersArrayType
}

func (a AuthorizationServerTokenBodyParametersArrayArgs) ToAuthorizationServerTokenBodyParametersArrayOutput() AuthorizationServerTokenBodyParametersArrayOutput {
	return pulumi.ToOutput(a).(AuthorizationServerTokenBodyParametersArrayOutput)
}

func (a AuthorizationServerTokenBodyParametersArrayArgs) ToAuthorizationServerTokenBodyParametersArrayOutputWithContext(ctx context.Context) AuthorizationServerTokenBodyParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AuthorizationServerTokenBodyParametersArrayOutput)
}

type AuthorizationServerTokenBodyParametersArrayOutput struct { *pulumi.OutputState }

func (o AuthorizationServerTokenBodyParametersArrayOutput) Index(i pulumi.IntInput) AuthorizationServerTokenBodyParametersOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) AuthorizationServerTokenBodyParameters {
		return vs[0].([]AuthorizationServerTokenBodyParameters)[vs[1].(int)]
	}).(AuthorizationServerTokenBodyParametersOutput)
}

func (AuthorizationServerTokenBodyParametersArrayOutput) ElementType() reflect.Type {
	return authorizationServerTokenBodyParametersArrayType
}

func (o AuthorizationServerTokenBodyParametersArrayOutput) ToAuthorizationServerTokenBodyParametersArrayOutput() AuthorizationServerTokenBodyParametersArrayOutput {
	return o
}

func (o AuthorizationServerTokenBodyParametersArrayOutput) ToAuthorizationServerTokenBodyParametersArrayOutputWithContext(ctx context.Context) AuthorizationServerTokenBodyParametersArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AuthorizationServerTokenBodyParametersArrayOutput{}) }

