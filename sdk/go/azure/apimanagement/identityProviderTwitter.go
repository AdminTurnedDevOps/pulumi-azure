// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an API Management Twitter Identity Provider.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/api_management_identity_provider_twitter.html.markdown.
type IdentityProviderTwitter struct {
	s *pulumi.ResourceState
}

// NewIdentityProviderTwitter registers a new resource with the given unique name, arguments, and options.
func NewIdentityProviderTwitter(ctx *pulumi.Context,
	name string, args *IdentityProviderTwitterArgs, opts ...pulumi.ResourceOpt) (*IdentityProviderTwitter, error) {
	if args == nil || args.ApiKey == nil {
		return nil, errors.New("missing required argument 'ApiKey'")
	}
	if args == nil || args.ApiManagementName == nil {
		return nil, errors.New("missing required argument 'ApiManagementName'")
	}
	if args == nil || args.ApiSecretKey == nil {
		return nil, errors.New("missing required argument 'ApiSecretKey'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["apiKey"] = nil
		inputs["apiManagementName"] = nil
		inputs["apiSecretKey"] = nil
		inputs["resourceGroupName"] = nil
	} else {
		inputs["apiKey"] = args.ApiKey
		inputs["apiManagementName"] = args.ApiManagementName
		inputs["apiSecretKey"] = args.ApiSecretKey
		inputs["resourceGroupName"] = args.ResourceGroupName
	}
	s, err := ctx.RegisterResource("azure:apimanagement/identityProviderTwitter:IdentityProviderTwitter", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IdentityProviderTwitter{s: s}, nil
}

// GetIdentityProviderTwitter gets an existing IdentityProviderTwitter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityProviderTwitter(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IdentityProviderTwitterState, opts ...pulumi.ResourceOpt) (*IdentityProviderTwitter, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["apiKey"] = state.ApiKey
		inputs["apiManagementName"] = state.ApiManagementName
		inputs["apiSecretKey"] = state.ApiSecretKey
		inputs["resourceGroupName"] = state.ResourceGroupName
	}
	s, err := ctx.ReadResource("azure:apimanagement/identityProviderTwitter:IdentityProviderTwitter", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IdentityProviderTwitter{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *IdentityProviderTwitter) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *IdentityProviderTwitter) ID() pulumi.IDOutput {
	return r.s.ID()
}

// App Consumer API key for Twitter.
func (r *IdentityProviderTwitter) ApiKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["apiKey"])
}

// The Name of the API Management Service where this Twitter Identity Provider should be created. Changing this forces a new resource to be created.
func (r *IdentityProviderTwitter) ApiManagementName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["apiManagementName"])
}

// App Consumer API secret key for Twitter.
func (r *IdentityProviderTwitter) ApiSecretKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["apiSecretKey"])
}

// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
func (r *IdentityProviderTwitter) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Input properties used for looking up and filtering IdentityProviderTwitter resources.
type IdentityProviderTwitterState struct {
	// App Consumer API key for Twitter.
	ApiKey interface{}
	// The Name of the API Management Service where this Twitter Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName interface{}
	// App Consumer API secret key for Twitter.
	ApiSecretKey interface{}
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
}

// The set of arguments for constructing a IdentityProviderTwitter resource.
type IdentityProviderTwitterArgs struct {
	// App Consumer API key for Twitter.
	ApiKey interface{}
	// The Name of the API Management Service where this Twitter Identity Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName interface{}
	// App Consumer API secret key for Twitter.
	ApiSecretKey interface{}
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
}
