// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an API Management Product.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/api_management_product.html.markdown.
type Product struct {
	pulumi.CustomResourceState

	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`

	// Do subscribers need to be approved prior to being able to use the Product?
	ApprovalRequired pulumi.BoolOutput `pulumi:"approvalRequired"`

	// A description of this Product, which may include HTML formatting tags.
	Description pulumi.StringOutput `pulumi:"description"`

	// The Display Name for this API Management Product.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`

	// The Identifier for this Product, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	ProductId pulumi.StringOutput `pulumi:"productId"`

	// Is this Product Published?
	Published pulumi.BoolOutput `pulumi:"published"`

	// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// Is a Subscription required to access API's included in this Product?
	SubscriptionRequired pulumi.BoolOutput `pulumi:"subscriptionRequired"`

	// The number of subscriptions a user can have to this Product at the same time.
	SubscriptionsLimit pulumi.IntOutput `pulumi:"subscriptionsLimit"`

	// The Terms and Conditions for this Product, which must be accepted by Developers before they can begin the Subscription process.
	Terms pulumi.StringOutput `pulumi:"terms"`
}

// NewProduct registers a new resource with the given unique name, arguments, and options.
func NewProduct(ctx *pulumi.Context,
	name string, args *ProductArgs, opts ...pulumi.ResourceOption) (*Product, error) {
	if args == nil || args.ApiManagementName == nil {
		return nil, errors.New("missing required argument 'ApiManagementName'")
	}
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	if args == nil || args.ProductId == nil {
		return nil, errors.New("missing required argument 'ProductId'")
	}
	if args == nil || args.Published == nil {
		return nil, errors.New("missing required argument 'Published'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.SubscriptionRequired == nil {
		return nil, errors.New("missing required argument 'SubscriptionRequired'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ApiManagementName; i != nil { inputs["apiManagementName"] = i.ToStringOutput() }
		if i := args.ApprovalRequired; i != nil { inputs["approvalRequired"] = i.ToBoolOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.DisplayName; i != nil { inputs["displayName"] = i.ToStringOutput() }
		if i := args.ProductId; i != nil { inputs["productId"] = i.ToStringOutput() }
		if i := args.Published; i != nil { inputs["published"] = i.ToBoolOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.SubscriptionRequired; i != nil { inputs["subscriptionRequired"] = i.ToBoolOutput() }
		if i := args.SubscriptionsLimit; i != nil { inputs["subscriptionsLimit"] = i.ToIntOutput() }
		if i := args.Terms; i != nil { inputs["terms"] = i.ToStringOutput() }
	}
	var resource Product
	err := ctx.RegisterResource("azure:apimanagement/product:Product", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProduct gets an existing Product resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProduct(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProductState, opts ...pulumi.ResourceOption) (*Product, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ApiManagementName; i != nil { inputs["apiManagementName"] = i.ToStringOutput() }
		if i := state.ApprovalRequired; i != nil { inputs["approvalRequired"] = i.ToBoolOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.DisplayName; i != nil { inputs["displayName"] = i.ToStringOutput() }
		if i := state.ProductId; i != nil { inputs["productId"] = i.ToStringOutput() }
		if i := state.Published; i != nil { inputs["published"] = i.ToBoolOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.SubscriptionRequired; i != nil { inputs["subscriptionRequired"] = i.ToBoolOutput() }
		if i := state.SubscriptionsLimit; i != nil { inputs["subscriptionsLimit"] = i.ToIntOutput() }
		if i := state.Terms; i != nil { inputs["terms"] = i.ToStringOutput() }
	}
	var resource Product
	err := ctx.ReadResource("azure:apimanagement/product:Product", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Product resources.
type ProductState struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// Do subscribers need to be approved prior to being able to use the Product?
	ApprovalRequired pulumi.BoolInput `pulumi:"approvalRequired"`
	// A description of this Product, which may include HTML formatting tags.
	Description pulumi.StringInput `pulumi:"description"`
	// The Display Name for this API Management Product.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The Identifier for this Product, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	ProductId pulumi.StringInput `pulumi:"productId"`
	// Is this Product Published?
	Published pulumi.BoolInput `pulumi:"published"`
	// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Is a Subscription required to access API's included in this Product?
	SubscriptionRequired pulumi.BoolInput `pulumi:"subscriptionRequired"`
	// The number of subscriptions a user can have to this Product at the same time.
	SubscriptionsLimit pulumi.IntInput `pulumi:"subscriptionsLimit"`
	// The Terms and Conditions for this Product, which must be accepted by Developers before they can begin the Subscription process.
	Terms pulumi.StringInput `pulumi:"terms"`
}

// The set of arguments for constructing a Product resource.
type ProductArgs struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// Do subscribers need to be approved prior to being able to use the Product?
	ApprovalRequired pulumi.BoolInput `pulumi:"approvalRequired"`
	// A description of this Product, which may include HTML formatting tags.
	Description pulumi.StringInput `pulumi:"description"`
	// The Display Name for this API Management Product.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The Identifier for this Product, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	ProductId pulumi.StringInput `pulumi:"productId"`
	// Is this Product Published?
	Published pulumi.BoolInput `pulumi:"published"`
	// The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Is a Subscription required to access API's included in this Product?
	SubscriptionRequired pulumi.BoolInput `pulumi:"subscriptionRequired"`
	// The number of subscriptions a user can have to this Product at the same time.
	SubscriptionsLimit pulumi.IntInput `pulumi:"subscriptionsLimit"`
	// The Terms and Conditions for this Product, which must be accepted by Developers before they can begin the Subscription process.
	Terms pulumi.StringInput `pulumi:"terms"`
}
