// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Certificate within an API Management Service.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/api_management_certificate.html.markdown.
type Certificate struct {
	pulumi.CustomResourceState

	// The Name of the API Management Service where this Service should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`

	// The base-64 encoded certificate data, which must be a PFX file. Changing this forces a new resource to be created.
	Data pulumi.StringOutput `pulumi:"data"`

	// The Expiration Date of this Certificate, formatted as an RFC3339 string.
	Expiration pulumi.StringOutput `pulumi:"expiration"`

	// The name of the API Management Certificate. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The password used for this certificate. Changing this forces a new resource to be created.
	Password pulumi.StringOutput `pulumi:"password"`

	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The Subject of this Certificate.
	Subject pulumi.StringOutput `pulumi:"subject"`

	// The Thumbprint of this Certificate.
	Thumbprint pulumi.StringOutput `pulumi:"thumbprint"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil || args.ApiManagementName == nil {
		return nil, errors.New("missing required argument 'ApiManagementName'")
	}
	if args == nil || args.Data == nil {
		return nil, errors.New("missing required argument 'Data'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ApiManagementName; i != nil { inputs["apiManagementName"] = i.ToStringOutput() }
		if i := args.Data; i != nil { inputs["data"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Password; i != nil { inputs["password"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
	}
	var resource Certificate
	err := ctx.RegisterResource("azure:apimanagement/certificate:Certificate", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ApiManagementName; i != nil { inputs["apiManagementName"] = i.ToStringOutput() }
		if i := state.Data; i != nil { inputs["data"] = i.ToStringOutput() }
		if i := state.Expiration; i != nil { inputs["expiration"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Password; i != nil { inputs["password"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.Subject; i != nil { inputs["subject"] = i.ToStringOutput() }
		if i := state.Thumbprint; i != nil { inputs["thumbprint"] = i.ToStringOutput() }
	}
	var resource Certificate
	err := ctx.ReadResource("azure:apimanagement/certificate:Certificate", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type CertificateState struct {
	// The Name of the API Management Service where this Service should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// The base-64 encoded certificate data, which must be a PFX file. Changing this forces a new resource to be created.
	Data pulumi.StringInput `pulumi:"data"`
	// The Expiration Date of this Certificate, formatted as an RFC3339 string.
	Expiration pulumi.StringInput `pulumi:"expiration"`
	// The name of the API Management Certificate. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The password used for this certificate. Changing this forces a new resource to be created.
	Password pulumi.StringInput `pulumi:"password"`
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The Subject of this Certificate.
	Subject pulumi.StringInput `pulumi:"subject"`
	// The Thumbprint of this Certificate.
	Thumbprint pulumi.StringInput `pulumi:"thumbprint"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// The Name of the API Management Service where this Service should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// The base-64 encoded certificate data, which must be a PFX file. Changing this forces a new resource to be created.
	Data pulumi.StringInput `pulumi:"data"`
	// The name of the API Management Certificate. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The password used for this certificate. Changing this forces a new resource to be created.
	Password pulumi.StringInput `pulumi:"password"`
	// The Name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}
