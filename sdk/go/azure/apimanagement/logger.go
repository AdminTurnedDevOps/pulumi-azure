// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Logger within an API Management Service.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/api_management_logger.html.markdown.
type Logger struct {
	pulumi.CustomResourceState

	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`

	// An `applicationInsights` block as documented below.
	ApplicationInsights LoggerApplicationInsightsOutput `pulumi:"applicationInsights"`

	// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
	Buffered pulumi.BoolOutput `pulumi:"buffered"`

	// A description of this Logger.
	Description pulumi.StringOutput `pulumi:"description"`

	// An `eventhub` block as documented below.
	Eventhub LoggerEventhubOutput `pulumi:"eventhub"`

	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewLogger registers a new resource with the given unique name, arguments, and options.
func NewLogger(ctx *pulumi.Context,
	name string, args *LoggerArgs, opts ...pulumi.ResourceOption) (*Logger, error) {
	if args == nil || args.ApiManagementName == nil {
		return nil, errors.New("missing required argument 'ApiManagementName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ApiManagementName; i != nil { inputs["apiManagementName"] = i.ToStringOutput() }
		if i := args.ApplicationInsights; i != nil { inputs["applicationInsights"] = i.ToLoggerApplicationInsightsOutput() }
		if i := args.Buffered; i != nil { inputs["buffered"] = i.ToBoolOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.Eventhub; i != nil { inputs["eventhub"] = i.ToLoggerEventhubOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
	}
	var resource Logger
	err := ctx.RegisterResource("azure:apimanagement/logger:Logger", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogger gets an existing Logger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggerState, opts ...pulumi.ResourceOption) (*Logger, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ApiManagementName; i != nil { inputs["apiManagementName"] = i.ToStringOutput() }
		if i := state.ApplicationInsights; i != nil { inputs["applicationInsights"] = i.ToLoggerApplicationInsightsOutput() }
		if i := state.Buffered; i != nil { inputs["buffered"] = i.ToBoolOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.Eventhub; i != nil { inputs["eventhub"] = i.ToLoggerEventhubOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
	}
	var resource Logger
	err := ctx.ReadResource("azure:apimanagement/logger:Logger", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Logger resources.
type LoggerState struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// An `applicationInsights` block as documented below.
	ApplicationInsights LoggerApplicationInsightsInput `pulumi:"applicationInsights"`
	// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
	Buffered pulumi.BoolInput `pulumi:"buffered"`
	// A description of this Logger.
	Description pulumi.StringInput `pulumi:"description"`
	// An `eventhub` block as documented below.
	Eventhub LoggerEventhubInput `pulumi:"eventhub"`
	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Logger resource.
type LoggerArgs struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// An `applicationInsights` block as documented below.
	ApplicationInsights LoggerApplicationInsightsInput `pulumi:"applicationInsights"`
	// Specifies whether records should be buffered in the Logger prior to publishing. Defaults to `true`.
	Buffered pulumi.BoolInput `pulumi:"buffered"`
	// A description of this Logger.
	Description pulumi.StringInput `pulumi:"description"`
	// An `eventhub` block as documented below.
	Eventhub LoggerEventhubInput `pulumi:"eventhub"`
	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}
type LoggerApplicationInsights struct {
	InstrumentationKey string `pulumi:"instrumentationKey"`
}
var loggerApplicationInsightsType = reflect.TypeOf((*LoggerApplicationInsights)(nil)).Elem()

type LoggerApplicationInsightsInput interface {
	pulumi.Input

	ToLoggerApplicationInsightsOutput() LoggerApplicationInsightsOutput
	ToLoggerApplicationInsightsOutputWithContext(ctx context.Context) LoggerApplicationInsightsOutput
}

type LoggerApplicationInsightsArgs struct {
	InstrumentationKey pulumi.StringInput `pulumi:"instrumentationKey"`
}

func (LoggerApplicationInsightsArgs) ElementType() reflect.Type {
	return loggerApplicationInsightsType
}

func (a LoggerApplicationInsightsArgs) ToLoggerApplicationInsightsOutput() LoggerApplicationInsightsOutput {
	return pulumi.ToOutput(a).(LoggerApplicationInsightsOutput)
}

func (a LoggerApplicationInsightsArgs) ToLoggerApplicationInsightsOutputWithContext(ctx context.Context) LoggerApplicationInsightsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LoggerApplicationInsightsOutput)
}

type LoggerApplicationInsightsOutput struct { *pulumi.OutputState }

func (o LoggerApplicationInsightsOutput) InstrumentationKey() pulumi.StringOutput {
	return o.Apply(func(v LoggerApplicationInsights) string {
		return v.InstrumentationKey
	}).(pulumi.StringOutput)
}

func (LoggerApplicationInsightsOutput) ElementType() reflect.Type {
	return loggerApplicationInsightsType
}

func (o LoggerApplicationInsightsOutput) ToLoggerApplicationInsightsOutput() LoggerApplicationInsightsOutput {
	return o
}

func (o LoggerApplicationInsightsOutput) ToLoggerApplicationInsightsOutputWithContext(ctx context.Context) LoggerApplicationInsightsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(LoggerApplicationInsightsOutput{}) }

type LoggerEventhub struct {
	ConnectionString string `pulumi:"connectionString"`
	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name string `pulumi:"name"`
}
var loggerEventhubType = reflect.TypeOf((*LoggerEventhub)(nil)).Elem()

type LoggerEventhubInput interface {
	pulumi.Input

	ToLoggerEventhubOutput() LoggerEventhubOutput
	ToLoggerEventhubOutputWithContext(ctx context.Context) LoggerEventhubOutput
}

type LoggerEventhubArgs struct {
	ConnectionString pulumi.StringInput `pulumi:"connectionString"`
	// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LoggerEventhubArgs) ElementType() reflect.Type {
	return loggerEventhubType
}

func (a LoggerEventhubArgs) ToLoggerEventhubOutput() LoggerEventhubOutput {
	return pulumi.ToOutput(a).(LoggerEventhubOutput)
}

func (a LoggerEventhubArgs) ToLoggerEventhubOutputWithContext(ctx context.Context) LoggerEventhubOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LoggerEventhubOutput)
}

type LoggerEventhubOutput struct { *pulumi.OutputState }

func (o LoggerEventhubOutput) ConnectionString() pulumi.StringOutput {
	return o.Apply(func(v LoggerEventhub) string {
		return v.ConnectionString
	}).(pulumi.StringOutput)
}

// The name of this Logger, which must be unique within the API Management Service. Changing this forces a new resource to be created.
func (o LoggerEventhubOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v LoggerEventhub) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (LoggerEventhubOutput) ElementType() reflect.Type {
	return loggerEventhubType
}

func (o LoggerEventhubOutput) ToLoggerEventhubOutput() LoggerEventhubOutput {
	return o
}

func (o LoggerEventhubOutput) ToLoggerEventhubOutputWithContext(ctx context.Context) LoggerEventhubOutput {
	return o
}

func init() { pulumi.RegisterOutputType(LoggerEventhubOutput{}) }

