// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an API Schema within an API Management Service.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/api_management_api_schema.html.markdown.
type ApiSchema struct {
	pulumi.CustomResourceState

	// The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`

	// The name of the API within the API Management Service where this API Schema should be created. Changing this forces a new resource to be created.
	ApiName pulumi.StringOutput `pulumi:"apiName"`

	// The content type of the API Schema.
	ContentType pulumi.StringOutput `pulumi:"contentType"`

	// The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// A unique identifier for this API Schema. Changing this forces a new resource to be created.
	SchemaId pulumi.StringOutput `pulumi:"schemaId"`

	// The JSON escaped string defining the document representing the Schema.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewApiSchema registers a new resource with the given unique name, arguments, and options.
func NewApiSchema(ctx *pulumi.Context,
	name string, args *ApiSchemaArgs, opts ...pulumi.ResourceOption) (*ApiSchema, error) {
	if args == nil || args.ApiManagementName == nil {
		return nil, errors.New("missing required argument 'ApiManagementName'")
	}
	if args == nil || args.ApiName == nil {
		return nil, errors.New("missing required argument 'ApiName'")
	}
	if args == nil || args.ContentType == nil {
		return nil, errors.New("missing required argument 'ContentType'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.SchemaId == nil {
		return nil, errors.New("missing required argument 'SchemaId'")
	}
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ApiManagementName; i != nil { inputs["apiManagementName"] = i.ToStringOutput() }
		if i := args.ApiName; i != nil { inputs["apiName"] = i.ToStringOutput() }
		if i := args.ContentType; i != nil { inputs["contentType"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.SchemaId; i != nil { inputs["schemaId"] = i.ToStringOutput() }
		if i := args.Value; i != nil { inputs["value"] = i.ToStringOutput() }
	}
	var resource ApiSchema
	err := ctx.RegisterResource("azure:apimanagement/apiSchema:ApiSchema", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiSchema gets an existing ApiSchema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiSchemaState, opts ...pulumi.ResourceOption) (*ApiSchema, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ApiManagementName; i != nil { inputs["apiManagementName"] = i.ToStringOutput() }
		if i := state.ApiName; i != nil { inputs["apiName"] = i.ToStringOutput() }
		if i := state.ContentType; i != nil { inputs["contentType"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.SchemaId; i != nil { inputs["schemaId"] = i.ToStringOutput() }
		if i := state.Value; i != nil { inputs["value"] = i.ToStringOutput() }
	}
	var resource ApiSchema
	err := ctx.ReadResource("azure:apimanagement/apiSchema:ApiSchema", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiSchema resources.
type ApiSchemaState struct {
	// The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// The name of the API within the API Management Service where this API Schema should be created. Changing this forces a new resource to be created.
	ApiName pulumi.StringInput `pulumi:"apiName"`
	// The content type of the API Schema.
	ContentType pulumi.StringInput `pulumi:"contentType"`
	// The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A unique identifier for this API Schema. Changing this forces a new resource to be created.
	SchemaId pulumi.StringInput `pulumi:"schemaId"`
	// The JSON escaped string defining the document representing the Schema.
	Value pulumi.StringInput `pulumi:"value"`
}

// The set of arguments for constructing a ApiSchema resource.
type ApiSchemaArgs struct {
	// The Name of the API Management Service where the API exists. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// The name of the API within the API Management Service where this API Schema should be created. Changing this forces a new resource to be created.
	ApiName pulumi.StringInput `pulumi:"apiName"`
	// The content type of the API Schema.
	ContentType pulumi.StringInput `pulumi:"contentType"`
	// The Name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A unique identifier for this API Schema. Changing this forces a new resource to be created.
	SchemaId pulumi.StringInput `pulumi:"schemaId"`
	// The JSON escaped string defining the document representing the Schema.
	Value pulumi.StringInput `pulumi:"value"`
}
