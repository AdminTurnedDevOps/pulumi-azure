// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an API Management API Operation Policy
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/api_management_api_operation_policy.html.markdown.
type ApiOperationPolicy struct {
	pulumi.CustomResourceState

	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`

	// The ID of the API Management API Operation within the API Management Service. Changing this forces a new resource to be created.
	ApiName pulumi.StringOutput `pulumi:"apiName"`

	OperationId pulumi.StringOutput `pulumi:"operationId"`

	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The XML Content for this Policy.
	XmlContent pulumi.StringOutput `pulumi:"xmlContent"`

	// A link to a Policy XML Document, which must be publicly available.
	XmlLink pulumi.StringOutput `pulumi:"xmlLink"`
}

// NewApiOperationPolicy registers a new resource with the given unique name, arguments, and options.
func NewApiOperationPolicy(ctx *pulumi.Context,
	name string, args *ApiOperationPolicyArgs, opts ...pulumi.ResourceOption) (*ApiOperationPolicy, error) {
	if args == nil || args.ApiManagementName == nil {
		return nil, errors.New("missing required argument 'ApiManagementName'")
	}
	if args == nil || args.ApiName == nil {
		return nil, errors.New("missing required argument 'ApiName'")
	}
	if args == nil || args.OperationId == nil {
		return nil, errors.New("missing required argument 'OperationId'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ApiManagementName; i != nil { inputs["apiManagementName"] = i.ToStringOutput() }
		if i := args.ApiName; i != nil { inputs["apiName"] = i.ToStringOutput() }
		if i := args.OperationId; i != nil { inputs["operationId"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.XmlContent; i != nil { inputs["xmlContent"] = i.ToStringOutput() }
		if i := args.XmlLink; i != nil { inputs["xmlLink"] = i.ToStringOutput() }
	}
	var resource ApiOperationPolicy
	err := ctx.RegisterResource("azure:apimanagement/apiOperationPolicy:ApiOperationPolicy", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiOperationPolicy gets an existing ApiOperationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiOperationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiOperationPolicyState, opts ...pulumi.ResourceOption) (*ApiOperationPolicy, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ApiManagementName; i != nil { inputs["apiManagementName"] = i.ToStringOutput() }
		if i := state.ApiName; i != nil { inputs["apiName"] = i.ToStringOutput() }
		if i := state.OperationId; i != nil { inputs["operationId"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.XmlContent; i != nil { inputs["xmlContent"] = i.ToStringOutput() }
		if i := state.XmlLink; i != nil { inputs["xmlLink"] = i.ToStringOutput() }
	}
	var resource ApiOperationPolicy
	err := ctx.ReadResource("azure:apimanagement/apiOperationPolicy:ApiOperationPolicy", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiOperationPolicy resources.
type ApiOperationPolicyState struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// The ID of the API Management API Operation within the API Management Service. Changing this forces a new resource to be created.
	ApiName pulumi.StringInput `pulumi:"apiName"`
	OperationId pulumi.StringInput `pulumi:"operationId"`
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The XML Content for this Policy.
	XmlContent pulumi.StringInput `pulumi:"xmlContent"`
	// A link to a Policy XML Document, which must be publicly available.
	XmlLink pulumi.StringInput `pulumi:"xmlLink"`
}

// The set of arguments for constructing a ApiOperationPolicy resource.
type ApiOperationPolicyArgs struct {
	// The name of the API Management Service. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// The ID of the API Management API Operation within the API Management Service. Changing this forces a new resource to be created.
	ApiName pulumi.StringInput `pulumi:"apiName"`
	OperationId pulumi.StringInput `pulumi:"operationId"`
	// The name of the Resource Group in which the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The XML Content for this Policy.
	XmlContent pulumi.StringInput `pulumi:"xmlContent"`
	// A link to a Policy XML Document, which must be publicly available.
	XmlLink pulumi.StringInput `pulumi:"xmlLink"`
}
