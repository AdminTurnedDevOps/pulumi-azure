// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apimanagement

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an OpenID Connect Provider within a API Management Service.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/api_management_openid_connect_provider.html.markdown.
type OpenIdConnectProvider struct {
	pulumi.CustomResourceState

	// The name of the API Management Service in which this OpenID Connect Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringOutput `pulumi:"apiManagementName"`

	// The Client ID used for the Client Application.
	ClientId pulumi.StringOutput `pulumi:"clientId"`

	// The Client Secret used for the Client Application.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`

	// A description of this OpenID Connect Provider.
	Description pulumi.StringOutput `pulumi:"description"`

	// A user-friendly name for this OpenID Connect Provider.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`

	// The URI of the Metadata endpoint.
	MetadataEndpoint pulumi.StringOutput `pulumi:"metadataEndpoint"`

	// the Name of the OpenID Connect Provider which should be created within the API Management Service. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewOpenIdConnectProvider registers a new resource with the given unique name, arguments, and options.
func NewOpenIdConnectProvider(ctx *pulumi.Context,
	name string, args *OpenIdConnectProviderArgs, opts ...pulumi.ResourceOption) (*OpenIdConnectProvider, error) {
	if args == nil || args.ApiManagementName == nil {
		return nil, errors.New("missing required argument 'ApiManagementName'")
	}
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.ClientSecret == nil {
		return nil, errors.New("missing required argument 'ClientSecret'")
	}
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	if args == nil || args.MetadataEndpoint == nil {
		return nil, errors.New("missing required argument 'MetadataEndpoint'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ApiManagementName; i != nil { inputs["apiManagementName"] = i.ToStringOutput() }
		if i := args.ClientId; i != nil { inputs["clientId"] = i.ToStringOutput() }
		if i := args.ClientSecret; i != nil { inputs["clientSecret"] = i.ToStringOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.DisplayName; i != nil { inputs["displayName"] = i.ToStringOutput() }
		if i := args.MetadataEndpoint; i != nil { inputs["metadataEndpoint"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
	}
	var resource OpenIdConnectProvider
	err := ctx.RegisterResource("azure:apimanagement/openIdConnectProvider:OpenIdConnectProvider", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenIdConnectProvider gets an existing OpenIdConnectProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenIdConnectProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenIdConnectProviderState, opts ...pulumi.ResourceOption) (*OpenIdConnectProvider, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ApiManagementName; i != nil { inputs["apiManagementName"] = i.ToStringOutput() }
		if i := state.ClientId; i != nil { inputs["clientId"] = i.ToStringOutput() }
		if i := state.ClientSecret; i != nil { inputs["clientSecret"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.DisplayName; i != nil { inputs["displayName"] = i.ToStringOutput() }
		if i := state.MetadataEndpoint; i != nil { inputs["metadataEndpoint"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
	}
	var resource OpenIdConnectProvider
	err := ctx.ReadResource("azure:apimanagement/openIdConnectProvider:OpenIdConnectProvider", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenIdConnectProvider resources.
type OpenIdConnectProviderState struct {
	// The name of the API Management Service in which this OpenID Connect Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// The Client ID used for the Client Application.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The Client Secret used for the Client Application.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// A description of this OpenID Connect Provider.
	Description pulumi.StringInput `pulumi:"description"`
	// A user-friendly name for this OpenID Connect Provider.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The URI of the Metadata endpoint.
	MetadataEndpoint pulumi.StringInput `pulumi:"metadataEndpoint"`
	// the Name of the OpenID Connect Provider which should be created within the API Management Service. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a OpenIdConnectProvider resource.
type OpenIdConnectProviderArgs struct {
	// The name of the API Management Service in which this OpenID Connect Provider should be created. Changing this forces a new resource to be created.
	ApiManagementName pulumi.StringInput `pulumi:"apiManagementName"`
	// The Client ID used for the Client Application.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The Client Secret used for the Client Application.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// A description of this OpenID Connect Provider.
	Description pulumi.StringInput `pulumi:"description"`
	// A user-friendly name for this OpenID Connect Provider.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The URI of the Metadata endpoint.
	MetadataEndpoint pulumi.StringInput `pulumi:"metadataEndpoint"`
	// the Name of the OpenID Connect Provider which should be created within the API Management Service. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the API Management Service exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}
