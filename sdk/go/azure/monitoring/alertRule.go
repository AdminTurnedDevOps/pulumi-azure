// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a [metric-based alert rule](https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitor-quick-resource-metric-alert-portal) in Azure Monitor.
// 
// > **NOTE:** This resource has been [deprecated](https://docs.microsoft.com/en-us/azure/azure-monitor/platform/monitoring-classic-retirement) in favour of the `monitoring.MetricAlert` resource and will be removed in the next major version of the AzureRM Provider. The new resource shares the same fields as this one, and information on migrating across can be found in this guide.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/metric_alertrule.html.markdown.
type AlertRule struct {
	pulumi.CustomResourceState

	// Defines how the metric data is combined over time. Possible values are `Average`, `Minimum`, `Maximum`, `Total`, and `Last`.
	Aggregation pulumi.StringOutput `pulumi:"aggregation"`

	// A verbose description of the alert rule that will be included in the alert email.
	Description pulumi.StringOutput `pulumi:"description"`

	// A `emailAction` block as defined below.
	EmailAction AlertRuleEmailActionOutput `pulumi:"emailAction"`

	// If `true`, the alert rule is enabled. Defaults to `true`.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// The metric that defines what the rule monitors.
	MetricName pulumi.StringOutput `pulumi:"metricName"`

	// Specifies the name of the alert rule. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The operator used to compare the metric data and the threshold. Possible values are `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, and `LessThanOrEqual`.
	Operator pulumi.StringOutput `pulumi:"operator"`

	// The period of time formatted in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations) that is used to monitor the alert activity based on the threshold. The period must be between 5 minutes and 1 day.
	Period pulumi.StringOutput `pulumi:"period"`

	// The name of the resource group in which to create the alert rule. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The ID of the resource monitored by the alert rule.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`

	// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
	Tags pulumi.StringMapOutput `pulumi:"tags"`

	// The threshold value that activates the alert.
	Threshold pulumi.Float64Output `pulumi:"threshold"`

	// A `webhookAction` block as defined below.
	WebhookAction AlertRuleWebhookActionOutput `pulumi:"webhookAction"`
}

// NewAlertRule registers a new resource with the given unique name, arguments, and options.
func NewAlertRule(ctx *pulumi.Context,
	name string, args *AlertRuleArgs, opts ...pulumi.ResourceOption) (*AlertRule, error) {
	if args == nil || args.Aggregation == nil {
		return nil, errors.New("missing required argument 'Aggregation'")
	}
	if args == nil || args.MetricName == nil {
		return nil, errors.New("missing required argument 'MetricName'")
	}
	if args == nil || args.Operator == nil {
		return nil, errors.New("missing required argument 'Operator'")
	}
	if args == nil || args.Period == nil {
		return nil, errors.New("missing required argument 'Period'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ResourceId == nil {
		return nil, errors.New("missing required argument 'ResourceId'")
	}
	if args == nil || args.Threshold == nil {
		return nil, errors.New("missing required argument 'Threshold'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Aggregation; i != nil { inputs["aggregation"] = i.ToStringOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.EmailAction; i != nil { inputs["emailAction"] = i.ToAlertRuleEmailActionOutput() }
		if i := args.Enabled; i != nil { inputs["enabled"] = i.ToBoolOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.MetricName; i != nil { inputs["metricName"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Operator; i != nil { inputs["operator"] = i.ToStringOutput() }
		if i := args.Period; i != nil { inputs["period"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.ResourceId; i != nil { inputs["resourceId"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToStringMapOutput() }
		if i := args.Threshold; i != nil { inputs["threshold"] = i.ToFloat64Output() }
		if i := args.WebhookAction; i != nil { inputs["webhookAction"] = i.ToAlertRuleWebhookActionOutput() }
	}
	var resource AlertRule
	err := ctx.RegisterResource("azure:monitoring/alertRule:AlertRule", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertRule gets an existing AlertRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertRuleState, opts ...pulumi.ResourceOption) (*AlertRule, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Aggregation; i != nil { inputs["aggregation"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.EmailAction; i != nil { inputs["emailAction"] = i.ToAlertRuleEmailActionOutput() }
		if i := state.Enabled; i != nil { inputs["enabled"] = i.ToBoolOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.MetricName; i != nil { inputs["metricName"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Operator; i != nil { inputs["operator"] = i.ToStringOutput() }
		if i := state.Period; i != nil { inputs["period"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.ResourceId; i != nil { inputs["resourceId"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToStringMapOutput() }
		if i := state.Threshold; i != nil { inputs["threshold"] = i.ToFloat64Output() }
		if i := state.WebhookAction; i != nil { inputs["webhookAction"] = i.ToAlertRuleWebhookActionOutput() }
	}
	var resource AlertRule
	err := ctx.ReadResource("azure:monitoring/alertRule:AlertRule", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertRule resources.
type AlertRuleState struct {
	// Defines how the metric data is combined over time. Possible values are `Average`, `Minimum`, `Maximum`, `Total`, and `Last`.
	Aggregation pulumi.StringInput `pulumi:"aggregation"`
	// A verbose description of the alert rule that will be included in the alert email.
	Description pulumi.StringInput `pulumi:"description"`
	// A `emailAction` block as defined below.
	EmailAction AlertRuleEmailActionInput `pulumi:"emailAction"`
	// If `true`, the alert rule is enabled. Defaults to `true`.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The metric that defines what the rule monitors.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// Specifies the name of the alert rule. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator used to compare the metric data and the threshold. Possible values are `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, and `LessThanOrEqual`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// The period of time formatted in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations) that is used to monitor the alert activity based on the threshold. The period must be between 5 minutes and 1 day.
	Period pulumi.StringInput `pulumi:"period"`
	// The name of the resource group in which to create the alert rule. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The ID of the resource monitored by the alert rule.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The threshold value that activates the alert.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// A `webhookAction` block as defined below.
	WebhookAction AlertRuleWebhookActionInput `pulumi:"webhookAction"`
}

// The set of arguments for constructing a AlertRule resource.
type AlertRuleArgs struct {
	// Defines how the metric data is combined over time. Possible values are `Average`, `Minimum`, `Maximum`, `Total`, and `Last`.
	Aggregation pulumi.StringInput `pulumi:"aggregation"`
	// A verbose description of the alert rule that will be included in the alert email.
	Description pulumi.StringInput `pulumi:"description"`
	// A `emailAction` block as defined below.
	EmailAction AlertRuleEmailActionInput `pulumi:"emailAction"`
	// If `true`, the alert rule is enabled. Defaults to `true`.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The metric that defines what the rule monitors.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// Specifies the name of the alert rule. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator used to compare the metric data and the threshold. Possible values are `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, and `LessThanOrEqual`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// The period of time formatted in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations) that is used to monitor the alert activity based on the threshold. The period must be between 5 minutes and 1 day.
	Period pulumi.StringInput `pulumi:"period"`
	// The name of the resource group in which to create the alert rule. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The ID of the resource monitored by the alert rule.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The threshold value that activates the alert.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// A `webhookAction` block as defined below.
	WebhookAction AlertRuleWebhookActionInput `pulumi:"webhookAction"`
}
type AlertRuleEmailAction struct {
	// A list of email addresses to be notified when the alert is triggered.
	CustomEmails *[]string `pulumi:"customEmails"`
	// If `true`, the administrators (service and co-administrators) of the subscription are notified when the alert is triggered. Defaults to `false`.
	SendToServiceOwners *bool `pulumi:"sendToServiceOwners"`
}
var alertRuleEmailActionType = reflect.TypeOf((*AlertRuleEmailAction)(nil)).Elem()

type AlertRuleEmailActionInput interface {
	pulumi.Input

	ToAlertRuleEmailActionOutput() AlertRuleEmailActionOutput
	ToAlertRuleEmailActionOutputWithContext(ctx context.Context) AlertRuleEmailActionOutput
}

type AlertRuleEmailActionArgs struct {
	// A list of email addresses to be notified when the alert is triggered.
	CustomEmails pulumi.StringArrayInput `pulumi:"customEmails"`
	// If `true`, the administrators (service and co-administrators) of the subscription are notified when the alert is triggered. Defaults to `false`.
	SendToServiceOwners pulumi.BoolInput `pulumi:"sendToServiceOwners"`
}

func (AlertRuleEmailActionArgs) ElementType() reflect.Type {
	return alertRuleEmailActionType
}

func (a AlertRuleEmailActionArgs) ToAlertRuleEmailActionOutput() AlertRuleEmailActionOutput {
	return pulumi.ToOutput(a).(AlertRuleEmailActionOutput)
}

func (a AlertRuleEmailActionArgs) ToAlertRuleEmailActionOutputWithContext(ctx context.Context) AlertRuleEmailActionOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AlertRuleEmailActionOutput)
}

type AlertRuleEmailActionOutput struct { *pulumi.OutputState }

// A list of email addresses to be notified when the alert is triggered.
func (o AlertRuleEmailActionOutput) CustomEmails() pulumi.StringArrayOutput {
	return o.Apply(func(v AlertRuleEmailAction) []string {
		if v.CustomEmails == nil { return *new([]string) } else { return *v.CustomEmails }
	}).(pulumi.StringArrayOutput)
}

// If `true`, the administrators (service and co-administrators) of the subscription are notified when the alert is triggered. Defaults to `false`.
func (o AlertRuleEmailActionOutput) SendToServiceOwners() pulumi.BoolOutput {
	return o.Apply(func(v AlertRuleEmailAction) bool {
		if v.SendToServiceOwners == nil { return *new(bool) } else { return *v.SendToServiceOwners }
	}).(pulumi.BoolOutput)
}

func (AlertRuleEmailActionOutput) ElementType() reflect.Type {
	return alertRuleEmailActionType
}

func (o AlertRuleEmailActionOutput) ToAlertRuleEmailActionOutput() AlertRuleEmailActionOutput {
	return o
}

func (o AlertRuleEmailActionOutput) ToAlertRuleEmailActionOutputWithContext(ctx context.Context) AlertRuleEmailActionOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AlertRuleEmailActionOutput{}) }

type AlertRuleWebhookAction struct {
	// A dictionary of custom properties to include with the webhook POST operation payload.
	Properties *map[string]string `pulumi:"properties"`
	// The service uri of the webhook to POST the notification when the alert is triggered.
	ServiceUri string `pulumi:"serviceUri"`
}
var alertRuleWebhookActionType = reflect.TypeOf((*AlertRuleWebhookAction)(nil)).Elem()

type AlertRuleWebhookActionInput interface {
	pulumi.Input

	ToAlertRuleWebhookActionOutput() AlertRuleWebhookActionOutput
	ToAlertRuleWebhookActionOutputWithContext(ctx context.Context) AlertRuleWebhookActionOutput
}

type AlertRuleWebhookActionArgs struct {
	// A dictionary of custom properties to include with the webhook POST operation payload.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// The service uri of the webhook to POST the notification when the alert is triggered.
	ServiceUri pulumi.StringInput `pulumi:"serviceUri"`
}

func (AlertRuleWebhookActionArgs) ElementType() reflect.Type {
	return alertRuleWebhookActionType
}

func (a AlertRuleWebhookActionArgs) ToAlertRuleWebhookActionOutput() AlertRuleWebhookActionOutput {
	return pulumi.ToOutput(a).(AlertRuleWebhookActionOutput)
}

func (a AlertRuleWebhookActionArgs) ToAlertRuleWebhookActionOutputWithContext(ctx context.Context) AlertRuleWebhookActionOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AlertRuleWebhookActionOutput)
}

type AlertRuleWebhookActionOutput struct { *pulumi.OutputState }

// A dictionary of custom properties to include with the webhook POST operation payload.
func (o AlertRuleWebhookActionOutput) Properties() pulumi.StringMapOutput {
	return o.Apply(func(v AlertRuleWebhookAction) map[string]string {
		if v.Properties == nil { return *new(map[string]string) } else { return *v.Properties }
	}).(pulumi.StringMapOutput)
}

// The service uri of the webhook to POST the notification when the alert is triggered.
func (o AlertRuleWebhookActionOutput) ServiceUri() pulumi.StringOutput {
	return o.Apply(func(v AlertRuleWebhookAction) string {
		return v.ServiceUri
	}).(pulumi.StringOutput)
}

func (AlertRuleWebhookActionOutput) ElementType() reflect.Type {
	return alertRuleWebhookActionType
}

func (o AlertRuleWebhookActionOutput) ToAlertRuleWebhookActionOutput() AlertRuleWebhookActionOutput {
	return o
}

func (o AlertRuleWebhookActionOutput) ToAlertRuleWebhookActionOutputWithContext(ctx context.Context) AlertRuleWebhookActionOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AlertRuleWebhookActionOutput{}) }

