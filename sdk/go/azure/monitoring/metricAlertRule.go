// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package monitoring

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a [metric-based alert rule](https://docs.microsoft.com/en-us/azure/monitoring-and-diagnostics/monitor-quick-resource-metric-alert-portal) in Azure Monitor.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/monitor_metric_alertrule.html.markdown.
type MetricAlertRule struct {
	pulumi.CustomResourceState

	// Defines how the metric data is combined over time. Possible values are `Average`, `Minimum`, `Maximum`, `Total`, and `Last`.
	Aggregation pulumi.StringOutput `pulumi:"aggregation"`

	// A verbose description of the alert rule that will be included in the alert email.
	Description pulumi.StringOutput `pulumi:"description"`

	// A `emailAction` block as defined below.
	EmailAction MetricAlertRuleEmailActionOutput `pulumi:"emailAction"`

	// If `true`, the alert rule is enabled. Defaults to `true`.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// The metric that defines what the rule monitors.
	MetricName pulumi.StringOutput `pulumi:"metricName"`

	// Specifies the name of the alert rule. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The operator used to compare the metric data and the threshold. Possible values are `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, and `LessThanOrEqual`.
	Operator pulumi.StringOutput `pulumi:"operator"`

	// The period of time formatted in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations) that is used to monitor the alert activity based on the threshold. The period must be between 5 minutes and 1 day.
	Period pulumi.StringOutput `pulumi:"period"`

	// The name of the resource group in which to create the alert rule. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The ID of the resource monitored by the alert rule.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`

	// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
	Tags pulumi.StringMapOutput `pulumi:"tags"`

	// The threshold value that activates the alert.
	Threshold pulumi.Float64Output `pulumi:"threshold"`

	// A `webhookAction` block as defined below.
	WebhookAction MetricAlertRuleWebhookActionOutput `pulumi:"webhookAction"`
}

// NewMetricAlertRule registers a new resource with the given unique name, arguments, and options.
func NewMetricAlertRule(ctx *pulumi.Context,
	name string, args *MetricAlertRuleArgs, opts ...pulumi.ResourceOption) (*MetricAlertRule, error) {
	if args == nil || args.Aggregation == nil {
		return nil, errors.New("missing required argument 'Aggregation'")
	}
	if args == nil || args.MetricName == nil {
		return nil, errors.New("missing required argument 'MetricName'")
	}
	if args == nil || args.Operator == nil {
		return nil, errors.New("missing required argument 'Operator'")
	}
	if args == nil || args.Period == nil {
		return nil, errors.New("missing required argument 'Period'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ResourceId == nil {
		return nil, errors.New("missing required argument 'ResourceId'")
	}
	if args == nil || args.Threshold == nil {
		return nil, errors.New("missing required argument 'Threshold'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Aggregation; i != nil { inputs["aggregation"] = i.ToStringOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.EmailAction; i != nil { inputs["emailAction"] = i.ToMetricAlertRuleEmailActionOutput() }
		if i := args.Enabled; i != nil { inputs["enabled"] = i.ToBoolOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.MetricName; i != nil { inputs["metricName"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Operator; i != nil { inputs["operator"] = i.ToStringOutput() }
		if i := args.Period; i != nil { inputs["period"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.ResourceId; i != nil { inputs["resourceId"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToStringMapOutput() }
		if i := args.Threshold; i != nil { inputs["threshold"] = i.ToFloat64Output() }
		if i := args.WebhookAction; i != nil { inputs["webhookAction"] = i.ToMetricAlertRuleWebhookActionOutput() }
	}
	var resource MetricAlertRule
	err := ctx.RegisterResource("azure:monitoring/metricAlertRule:MetricAlertRule", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMetricAlertRule gets an existing MetricAlertRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMetricAlertRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MetricAlertRuleState, opts ...pulumi.ResourceOption) (*MetricAlertRule, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Aggregation; i != nil { inputs["aggregation"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.EmailAction; i != nil { inputs["emailAction"] = i.ToMetricAlertRuleEmailActionOutput() }
		if i := state.Enabled; i != nil { inputs["enabled"] = i.ToBoolOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.MetricName; i != nil { inputs["metricName"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Operator; i != nil { inputs["operator"] = i.ToStringOutput() }
		if i := state.Period; i != nil { inputs["period"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.ResourceId; i != nil { inputs["resourceId"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToStringMapOutput() }
		if i := state.Threshold; i != nil { inputs["threshold"] = i.ToFloat64Output() }
		if i := state.WebhookAction; i != nil { inputs["webhookAction"] = i.ToMetricAlertRuleWebhookActionOutput() }
	}
	var resource MetricAlertRule
	err := ctx.ReadResource("azure:monitoring/metricAlertRule:MetricAlertRule", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MetricAlertRule resources.
type MetricAlertRuleState struct {
	// Defines how the metric data is combined over time. Possible values are `Average`, `Minimum`, `Maximum`, `Total`, and `Last`.
	Aggregation pulumi.StringInput `pulumi:"aggregation"`
	// A verbose description of the alert rule that will be included in the alert email.
	Description pulumi.StringInput `pulumi:"description"`
	// A `emailAction` block as defined below.
	EmailAction MetricAlertRuleEmailActionInput `pulumi:"emailAction"`
	// If `true`, the alert rule is enabled. Defaults to `true`.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The metric that defines what the rule monitors.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// Specifies the name of the alert rule. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator used to compare the metric data and the threshold. Possible values are `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, and `LessThanOrEqual`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// The period of time formatted in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations) that is used to monitor the alert activity based on the threshold. The period must be between 5 minutes and 1 day.
	Period pulumi.StringInput `pulumi:"period"`
	// The name of the resource group in which to create the alert rule. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The ID of the resource monitored by the alert rule.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The threshold value that activates the alert.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// A `webhookAction` block as defined below.
	WebhookAction MetricAlertRuleWebhookActionInput `pulumi:"webhookAction"`
}

// The set of arguments for constructing a MetricAlertRule resource.
type MetricAlertRuleArgs struct {
	// Defines how the metric data is combined over time. Possible values are `Average`, `Minimum`, `Maximum`, `Total`, and `Last`.
	Aggregation pulumi.StringInput `pulumi:"aggregation"`
	// A verbose description of the alert rule that will be included in the alert email.
	Description pulumi.StringInput `pulumi:"description"`
	// A `emailAction` block as defined below.
	EmailAction MetricAlertRuleEmailActionInput `pulumi:"emailAction"`
	// If `true`, the alert rule is enabled. Defaults to `true`.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The metric that defines what the rule monitors.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// Specifies the name of the alert rule. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator used to compare the metric data and the threshold. Possible values are `GreaterThan`, `GreaterThanOrEqual`, `LessThan`, and `LessThanOrEqual`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// The period of time formatted in [ISO 8601 duration format](https://en.wikipedia.org/wiki/ISO_8601#Durations) that is used to monitor the alert activity based on the threshold. The period must be between 5 minutes and 1 day.
	Period pulumi.StringInput `pulumi:"period"`
	// The name of the resource group in which to create the alert rule. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The ID of the resource monitored by the alert rule.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// A mapping of tags to assign to the resource. Changing this forces a new resource to be created.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The threshold value that activates the alert.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// A `webhookAction` block as defined below.
	WebhookAction MetricAlertRuleWebhookActionInput `pulumi:"webhookAction"`
}
type MetricAlertRuleEmailAction struct {
	// A list of email addresses to be notified when the alert is triggered.
	CustomEmails *[]string `pulumi:"customEmails"`
	// If `true`, the administrators (service and co-administrators) of the subscription are notified when the alert is triggered. Defaults to `false`.
	SendToServiceOwners *bool `pulumi:"sendToServiceOwners"`
}
var metricAlertRuleEmailActionType = reflect.TypeOf((*MetricAlertRuleEmailAction)(nil)).Elem()

type MetricAlertRuleEmailActionInput interface {
	pulumi.Input

	ToMetricAlertRuleEmailActionOutput() MetricAlertRuleEmailActionOutput
	ToMetricAlertRuleEmailActionOutputWithContext(ctx context.Context) MetricAlertRuleEmailActionOutput
}

type MetricAlertRuleEmailActionArgs struct {
	// A list of email addresses to be notified when the alert is triggered.
	CustomEmails pulumi.StringArrayInput `pulumi:"customEmails"`
	// If `true`, the administrators (service and co-administrators) of the subscription are notified when the alert is triggered. Defaults to `false`.
	SendToServiceOwners pulumi.BoolInput `pulumi:"sendToServiceOwners"`
}

func (MetricAlertRuleEmailActionArgs) ElementType() reflect.Type {
	return metricAlertRuleEmailActionType
}

func (a MetricAlertRuleEmailActionArgs) ToMetricAlertRuleEmailActionOutput() MetricAlertRuleEmailActionOutput {
	return pulumi.ToOutput(a).(MetricAlertRuleEmailActionOutput)
}

func (a MetricAlertRuleEmailActionArgs) ToMetricAlertRuleEmailActionOutputWithContext(ctx context.Context) MetricAlertRuleEmailActionOutput {
	return pulumi.ToOutputWithContext(ctx, a).(MetricAlertRuleEmailActionOutput)
}

type MetricAlertRuleEmailActionOutput struct { *pulumi.OutputState }

// A list of email addresses to be notified when the alert is triggered.
func (o MetricAlertRuleEmailActionOutput) CustomEmails() pulumi.StringArrayOutput {
	return o.Apply(func(v MetricAlertRuleEmailAction) []string {
		if v.CustomEmails == nil { return *new([]string) } else { return *v.CustomEmails }
	}).(pulumi.StringArrayOutput)
}

// If `true`, the administrators (service and co-administrators) of the subscription are notified when the alert is triggered. Defaults to `false`.
func (o MetricAlertRuleEmailActionOutput) SendToServiceOwners() pulumi.BoolOutput {
	return o.Apply(func(v MetricAlertRuleEmailAction) bool {
		if v.SendToServiceOwners == nil { return *new(bool) } else { return *v.SendToServiceOwners }
	}).(pulumi.BoolOutput)
}

func (MetricAlertRuleEmailActionOutput) ElementType() reflect.Type {
	return metricAlertRuleEmailActionType
}

func (o MetricAlertRuleEmailActionOutput) ToMetricAlertRuleEmailActionOutput() MetricAlertRuleEmailActionOutput {
	return o
}

func (o MetricAlertRuleEmailActionOutput) ToMetricAlertRuleEmailActionOutputWithContext(ctx context.Context) MetricAlertRuleEmailActionOutput {
	return o
}

func init() { pulumi.RegisterOutputType(MetricAlertRuleEmailActionOutput{}) }

type MetricAlertRuleWebhookAction struct {
	// A dictionary of custom properties to include with the webhook POST operation payload.
	Properties *map[string]string `pulumi:"properties"`
	// The service uri of the webhook to POST the notification when the alert is triggered.
	ServiceUri string `pulumi:"serviceUri"`
}
var metricAlertRuleWebhookActionType = reflect.TypeOf((*MetricAlertRuleWebhookAction)(nil)).Elem()

type MetricAlertRuleWebhookActionInput interface {
	pulumi.Input

	ToMetricAlertRuleWebhookActionOutput() MetricAlertRuleWebhookActionOutput
	ToMetricAlertRuleWebhookActionOutputWithContext(ctx context.Context) MetricAlertRuleWebhookActionOutput
}

type MetricAlertRuleWebhookActionArgs struct {
	// A dictionary of custom properties to include with the webhook POST operation payload.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// The service uri of the webhook to POST the notification when the alert is triggered.
	ServiceUri pulumi.StringInput `pulumi:"serviceUri"`
}

func (MetricAlertRuleWebhookActionArgs) ElementType() reflect.Type {
	return metricAlertRuleWebhookActionType
}

func (a MetricAlertRuleWebhookActionArgs) ToMetricAlertRuleWebhookActionOutput() MetricAlertRuleWebhookActionOutput {
	return pulumi.ToOutput(a).(MetricAlertRuleWebhookActionOutput)
}

func (a MetricAlertRuleWebhookActionArgs) ToMetricAlertRuleWebhookActionOutputWithContext(ctx context.Context) MetricAlertRuleWebhookActionOutput {
	return pulumi.ToOutputWithContext(ctx, a).(MetricAlertRuleWebhookActionOutput)
}

type MetricAlertRuleWebhookActionOutput struct { *pulumi.OutputState }

// A dictionary of custom properties to include with the webhook POST operation payload.
func (o MetricAlertRuleWebhookActionOutput) Properties() pulumi.StringMapOutput {
	return o.Apply(func(v MetricAlertRuleWebhookAction) map[string]string {
		if v.Properties == nil { return *new(map[string]string) } else { return *v.Properties }
	}).(pulumi.StringMapOutput)
}

// The service uri of the webhook to POST the notification when the alert is triggered.
func (o MetricAlertRuleWebhookActionOutput) ServiceUri() pulumi.StringOutput {
	return o.Apply(func(v MetricAlertRuleWebhookAction) string {
		return v.ServiceUri
	}).(pulumi.StringOutput)
}

func (MetricAlertRuleWebhookActionOutput) ElementType() reflect.Type {
	return metricAlertRuleWebhookActionType
}

func (o MetricAlertRuleWebhookActionOutput) ToMetricAlertRuleWebhookActionOutput() MetricAlertRuleWebhookActionOutput {
	return o
}

func (o MetricAlertRuleWebhookActionOutput) ToMetricAlertRuleWebhookActionOutputWithContext(ctx context.Context) MetricAlertRuleWebhookActionOutput {
	return o
}

func init() { pulumi.RegisterOutputType(MetricAlertRuleWebhookActionOutput{}) }

