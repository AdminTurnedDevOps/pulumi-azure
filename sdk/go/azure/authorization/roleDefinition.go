// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package authorization

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a custom Role Definition, used to assign Roles to Users/Principals. See ['Understand role definitions'](https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions) in the Azure documentation for more details.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/role_definition.html.markdown.
type RoleDefinition struct {
	pulumi.CustomResourceState

	// One or more assignable scopes for this Role Definition, such as `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333`, `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup`, or `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup/providers/Microsoft.Compute/virtualMachines/myVM`.
	AssignableScopes pulumi.StringArrayOutput `pulumi:"assignableScopes"`

	// A description of the Role Definition.
	Description pulumi.StringOutput `pulumi:"description"`

	// The name of the Role Definition. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// A `permissions` block as defined below.
	Permissions RoleDefinitionPermissionsArrayOutput `pulumi:"permissions"`

	// A unique UUID/GUID which identifies this role - one will be generated if not specified. Changing this forces a new resource to be created.
	RoleDefinitionId pulumi.StringOutput `pulumi:"roleDefinitionId"`

	// The scope at which the Role Definition applies too, such as `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333`, `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup`, or `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup/providers/Microsoft.Compute/virtualMachines/myVM`. Changing this forces a new resource to be created.
	Scope pulumi.StringOutput `pulumi:"scope"`
}

// NewRoleDefinition registers a new resource with the given unique name, arguments, and options.
func NewRoleDefinition(ctx *pulumi.Context,
	name string, args *RoleDefinitionArgs, opts ...pulumi.ResourceOption) (*RoleDefinition, error) {
	if args == nil || args.AssignableScopes == nil {
		return nil, errors.New("missing required argument 'AssignableScopes'")
	}
	if args == nil || args.Permissions == nil {
		return nil, errors.New("missing required argument 'Permissions'")
	}
	if args == nil || args.Scope == nil {
		return nil, errors.New("missing required argument 'Scope'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AssignableScopes; i != nil { inputs["assignableScopes"] = i.ToStringArrayOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Permissions; i != nil { inputs["permissions"] = i.ToRoleDefinitionPermissionsArrayOutput() }
		if i := args.RoleDefinitionId; i != nil { inputs["roleDefinitionId"] = i.ToStringOutput() }
		if i := args.Scope; i != nil { inputs["scope"] = i.ToStringOutput() }
	}
	var resource RoleDefinition
	err := ctx.RegisterResource("azure:authorization/roleDefinition:RoleDefinition", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleDefinition gets an existing RoleDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleDefinitionState, opts ...pulumi.ResourceOption) (*RoleDefinition, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AssignableScopes; i != nil { inputs["assignableScopes"] = i.ToStringArrayOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Permissions; i != nil { inputs["permissions"] = i.ToRoleDefinitionPermissionsArrayOutput() }
		if i := state.RoleDefinitionId; i != nil { inputs["roleDefinitionId"] = i.ToStringOutput() }
		if i := state.Scope; i != nil { inputs["scope"] = i.ToStringOutput() }
	}
	var resource RoleDefinition
	err := ctx.ReadResource("azure:authorization/roleDefinition:RoleDefinition", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleDefinition resources.
type RoleDefinitionState struct {
	// One or more assignable scopes for this Role Definition, such as `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333`, `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup`, or `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup/providers/Microsoft.Compute/virtualMachines/myVM`.
	AssignableScopes pulumi.StringArrayInput `pulumi:"assignableScopes"`
	// A description of the Role Definition.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the Role Definition. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// A `permissions` block as defined below.
	Permissions RoleDefinitionPermissionsArrayInput `pulumi:"permissions"`
	// A unique UUID/GUID which identifies this role - one will be generated if not specified. Changing this forces a new resource to be created.
	RoleDefinitionId pulumi.StringInput `pulumi:"roleDefinitionId"`
	// The scope at which the Role Definition applies too, such as `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333`, `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup`, or `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup/providers/Microsoft.Compute/virtualMachines/myVM`. Changing this forces a new resource to be created.
	Scope pulumi.StringInput `pulumi:"scope"`
}

// The set of arguments for constructing a RoleDefinition resource.
type RoleDefinitionArgs struct {
	// One or more assignable scopes for this Role Definition, such as `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333`, `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup`, or `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup/providers/Microsoft.Compute/virtualMachines/myVM`.
	AssignableScopes pulumi.StringArrayInput `pulumi:"assignableScopes"`
	// A description of the Role Definition.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of the Role Definition. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// A `permissions` block as defined below.
	Permissions RoleDefinitionPermissionsArrayInput `pulumi:"permissions"`
	// A unique UUID/GUID which identifies this role - one will be generated if not specified. Changing this forces a new resource to be created.
	RoleDefinitionId pulumi.StringInput `pulumi:"roleDefinitionId"`
	// The scope at which the Role Definition applies too, such as `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333`, `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup`, or `/subscriptions/0b1f6471-1bf0-4dda-aec3-111122223333/resourceGroups/myGroup/providers/Microsoft.Compute/virtualMachines/myVM`. Changing this forces a new resource to be created.
	Scope pulumi.StringInput `pulumi:"scope"`
}
type RoleDefinitionPermissions struct {
	Actions *[]string `pulumi:"actions"`
	DataActions *[]string `pulumi:"dataActions"`
	NotActions *[]string `pulumi:"notActions"`
	NotDataActions *[]string `pulumi:"notDataActions"`
}
var roleDefinitionPermissionsType = reflect.TypeOf((*RoleDefinitionPermissions)(nil)).Elem()

type RoleDefinitionPermissionsInput interface {
	pulumi.Input

	ToRoleDefinitionPermissionsOutput() RoleDefinitionPermissionsOutput
	ToRoleDefinitionPermissionsOutputWithContext(ctx context.Context) RoleDefinitionPermissionsOutput
}

type RoleDefinitionPermissionsArgs struct {
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	DataActions pulumi.StringArrayInput `pulumi:"dataActions"`
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	NotDataActions pulumi.StringArrayInput `pulumi:"notDataActions"`
}

func (RoleDefinitionPermissionsArgs) ElementType() reflect.Type {
	return roleDefinitionPermissionsType
}

func (a RoleDefinitionPermissionsArgs) ToRoleDefinitionPermissionsOutput() RoleDefinitionPermissionsOutput {
	return pulumi.ToOutput(a).(RoleDefinitionPermissionsOutput)
}

func (a RoleDefinitionPermissionsArgs) ToRoleDefinitionPermissionsOutputWithContext(ctx context.Context) RoleDefinitionPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(RoleDefinitionPermissionsOutput)
}

type RoleDefinitionPermissionsOutput struct { *pulumi.OutputState }

func (o RoleDefinitionPermissionsOutput) Actions() pulumi.StringArrayOutput {
	return o.Apply(func(v RoleDefinitionPermissions) []string {
		if v.Actions == nil { return *new([]string) } else { return *v.Actions }
	}).(pulumi.StringArrayOutput)
}

func (o RoleDefinitionPermissionsOutput) DataActions() pulumi.StringArrayOutput {
	return o.Apply(func(v RoleDefinitionPermissions) []string {
		if v.DataActions == nil { return *new([]string) } else { return *v.DataActions }
	}).(pulumi.StringArrayOutput)
}

func (o RoleDefinitionPermissionsOutput) NotActions() pulumi.StringArrayOutput {
	return o.Apply(func(v RoleDefinitionPermissions) []string {
		if v.NotActions == nil { return *new([]string) } else { return *v.NotActions }
	}).(pulumi.StringArrayOutput)
}

func (o RoleDefinitionPermissionsOutput) NotDataActions() pulumi.StringArrayOutput {
	return o.Apply(func(v RoleDefinitionPermissions) []string {
		if v.NotDataActions == nil { return *new([]string) } else { return *v.NotDataActions }
	}).(pulumi.StringArrayOutput)
}

func (RoleDefinitionPermissionsOutput) ElementType() reflect.Type {
	return roleDefinitionPermissionsType
}

func (o RoleDefinitionPermissionsOutput) ToRoleDefinitionPermissionsOutput() RoleDefinitionPermissionsOutput {
	return o
}

func (o RoleDefinitionPermissionsOutput) ToRoleDefinitionPermissionsOutputWithContext(ctx context.Context) RoleDefinitionPermissionsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(RoleDefinitionPermissionsOutput{}) }

var roleDefinitionPermissionsArrayType = reflect.TypeOf((*[]RoleDefinitionPermissions)(nil)).Elem()

type RoleDefinitionPermissionsArrayInput interface {
	pulumi.Input

	ToRoleDefinitionPermissionsArrayOutput() RoleDefinitionPermissionsArrayOutput
	ToRoleDefinitionPermissionsArrayOutputWithContext(ctx context.Context) RoleDefinitionPermissionsArrayOutput
}

type RoleDefinitionPermissionsArrayArgs []RoleDefinitionPermissionsInput

func (RoleDefinitionPermissionsArrayArgs) ElementType() reflect.Type {
	return roleDefinitionPermissionsArrayType
}

func (a RoleDefinitionPermissionsArrayArgs) ToRoleDefinitionPermissionsArrayOutput() RoleDefinitionPermissionsArrayOutput {
	return pulumi.ToOutput(a).(RoleDefinitionPermissionsArrayOutput)
}

func (a RoleDefinitionPermissionsArrayArgs) ToRoleDefinitionPermissionsArrayOutputWithContext(ctx context.Context) RoleDefinitionPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(RoleDefinitionPermissionsArrayOutput)
}

type RoleDefinitionPermissionsArrayOutput struct { *pulumi.OutputState }

func (o RoleDefinitionPermissionsArrayOutput) Index(i pulumi.IntInput) RoleDefinitionPermissionsOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) RoleDefinitionPermissions {
		return vs[0].([]RoleDefinitionPermissions)[vs[1].(int)]
	}).(RoleDefinitionPermissionsOutput)
}

func (RoleDefinitionPermissionsArrayOutput) ElementType() reflect.Type {
	return roleDefinitionPermissionsArrayType
}

func (o RoleDefinitionPermissionsArrayOutput) ToRoleDefinitionPermissionsArrayOutput() RoleDefinitionPermissionsArrayOutput {
	return o
}

func (o RoleDefinitionPermissionsArrayOutput) ToRoleDefinitionPermissionsArrayOutputWithContext(ctx context.Context) RoleDefinitionPermissionsArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(RoleDefinitionPermissionsArrayOutput{}) }

