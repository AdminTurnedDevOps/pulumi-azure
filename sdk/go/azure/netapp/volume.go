// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a NetApp Volume.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/netapp_volume.html.markdown.
type Volume struct {
	s *pulumi.ResourceState
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOpt) (*Volume, error) {
	if args == nil || args.AccountName == nil {
		return nil, errors.New("missing required argument 'AccountName'")
	}
	if args == nil || args.PoolName == nil {
		return nil, errors.New("missing required argument 'PoolName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ServiceLevel == nil {
		return nil, errors.New("missing required argument 'ServiceLevel'")
	}
	if args == nil || args.StorageQuotaInGb == nil {
		return nil, errors.New("missing required argument 'StorageQuotaInGb'")
	}
	if args == nil || args.SubnetId == nil {
		return nil, errors.New("missing required argument 'SubnetId'")
	}
	if args == nil || args.VolumePath == nil {
		return nil, errors.New("missing required argument 'VolumePath'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accountName"] = nil
		inputs["exportPolicyRules"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["poolName"] = nil
		inputs["resourceGroupName"] = nil
		inputs["serviceLevel"] = nil
		inputs["storageQuotaInGb"] = nil
		inputs["subnetId"] = nil
		inputs["volumePath"] = nil
	} else {
		inputs["accountName"] = args.AccountName
		inputs["exportPolicyRules"] = args.ExportPolicyRules
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["poolName"] = args.PoolName
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["serviceLevel"] = args.ServiceLevel
		inputs["storageQuotaInGb"] = args.StorageQuotaInGb
		inputs["subnetId"] = args.SubnetId
		inputs["volumePath"] = args.VolumePath
	}
	s, err := ctx.RegisterResource("azure:netapp/volume:Volume", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Volume{s: s}, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VolumeState, opts ...pulumi.ResourceOpt) (*Volume, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accountName"] = state.AccountName
		inputs["exportPolicyRules"] = state.ExportPolicyRules
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["poolName"] = state.PoolName
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["serviceLevel"] = state.ServiceLevel
		inputs["storageQuotaInGb"] = state.StorageQuotaInGb
		inputs["subnetId"] = state.SubnetId
		inputs["volumePath"] = state.VolumePath
	}
	s, err := ctx.ReadResource("azure:netapp/volume:Volume", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Volume{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Volume) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Volume) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
func (r *Volume) AccountName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["accountName"])
}

// One or more `exportPolicyRule` block defined below.
func (r *Volume) ExportPolicyRules() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["exportPolicyRules"])
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (r *Volume) Location() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["location"])
}

// The name of the NetApp Volume. Changing this forces a new resource to be created.
func (r *Volume) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The name of the NetApp pool in which the NetApp Volume should be created. Changing this forces a new resource to be created.
func (r *Volume) PoolName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["poolName"])
}

// The name of the resource group where the NetApp Volume should be created. Changing this forces a new resource to be created.
func (r *Volume) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The target performance of the file system. Valid values include `Premium`, `Standard`, or `Ultra`.
func (r *Volume) ServiceLevel() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serviceLevel"])
}

// The maximum Storage Quota allowed for a file system in Gigabytes.
func (r *Volume) StorageQuotaInGb() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["storageQuotaInGb"])
}

// The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new resource to be created.
func (r *Volume) SubnetId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["subnetId"])
}

// A unique file path for the volume. Used when creating mount targets. Changing this forces a new resource to be created.
func (r *Volume) VolumePath() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["volumePath"])
}

// Input properties used for looking up and filtering Volume resources.
type VolumeState struct {
	// The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
	AccountName interface{}
	// One or more `exportPolicyRule` block defined below.
	ExportPolicyRules interface{}
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// The name of the NetApp Volume. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the NetApp pool in which the NetApp Volume should be created. Changing this forces a new resource to be created.
	PoolName interface{}
	// The name of the resource group where the NetApp Volume should be created. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The target performance of the file system. Valid values include `Premium`, `Standard`, or `Ultra`.
	ServiceLevel interface{}
	// The maximum Storage Quota allowed for a file system in Gigabytes.
	StorageQuotaInGb interface{}
	// The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new resource to be created.
	SubnetId interface{}
	// A unique file path for the volume. Used when creating mount targets. Changing this forces a new resource to be created.
	VolumePath interface{}
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// The name of the NetApp account in which the NetApp Pool should be created. Changing this forces a new resource to be created.
	AccountName interface{}
	// One or more `exportPolicyRule` block defined below.
	ExportPolicyRules interface{}
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// The name of the NetApp Volume. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the NetApp pool in which the NetApp Volume should be created. Changing this forces a new resource to be created.
	PoolName interface{}
	// The name of the resource group where the NetApp Volume should be created. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The target performance of the file system. Valid values include `Premium`, `Standard`, or `Ultra`.
	ServiceLevel interface{}
	// The maximum Storage Quota allowed for a file system in Gigabytes.
	StorageQuotaInGb interface{}
	// The ID of the Subnet the NetApp Volume resides in, which must have the `Microsoft.NetApp/volumes` delegation. Changing this forces a new resource to be created.
	SubnetId interface{}
	// A unique file path for the volume. Used when creating mount targets. Changing this forces a new resource to be created.
	VolumePath interface{}
}
