// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package securitycenter

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages the subscription's Security Center Workspace.
// 
// > **NOTE:** Owner access permission is required.
// 
// > **NOTE:** The subscription's pricing model can not be `Free` for this to have any affect.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/security_center_workspace.html.markdown.
type Workspace struct {
	pulumi.CustomResourceState

	// The scope of VMs to send their security data to the desired workspace, unless overridden by a setting with more specific scope.
	Scope pulumi.StringOutput `pulumi:"scope"`

	// The ID of the Log Analytics Workspace to save the data in.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWorkspace(ctx *pulumi.Context,
	name string, args *WorkspaceArgs, opts ...pulumi.ResourceOption) (*Workspace, error) {
	if args == nil || args.Scope == nil {
		return nil, errors.New("missing required argument 'Scope'")
	}
	if args == nil || args.WorkspaceId == nil {
		return nil, errors.New("missing required argument 'WorkspaceId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Scope; i != nil { inputs["scope"] = i.ToStringOutput() }
		if i := args.WorkspaceId; i != nil { inputs["workspaceId"] = i.ToStringOutput() }
	}
	var resource Workspace
	err := ctx.RegisterResource("azure:securitycenter/workspace:Workspace", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspace gets an existing Workspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceState, opts ...pulumi.ResourceOption) (*Workspace, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Scope; i != nil { inputs["scope"] = i.ToStringOutput() }
		if i := state.WorkspaceId; i != nil { inputs["workspaceId"] = i.ToStringOutput() }
	}
	var resource Workspace
	err := ctx.ReadResource("azure:securitycenter/workspace:Workspace", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workspace resources.
type WorkspaceState struct {
	// The scope of VMs to send their security data to the desired workspace, unless overridden by a setting with more specific scope.
	Scope pulumi.StringInput `pulumi:"scope"`
	// The ID of the Log Analytics Workspace to save the data in.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

// The set of arguments for constructing a Workspace resource.
type WorkspaceArgs struct {
	// The scope of VMs to send their security data to the desired workspace, unless overridden by a setting with more specific scope.
	Scope pulumi.StringInput `pulumi:"scope"`
	// The ID of the Log Analytics Workspace to save the data in.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}
