// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cosmosdb

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a SQL Container within a Cosmos DB Account.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/cosmosdb_sql_container.html.markdown.
type SqlContainer struct {
	pulumi.CustomResourceState

	// The name of the Cosmos DB Account to create the container within. Changing this forces a new resource to be created.
	AccountName pulumi.StringOutput `pulumi:"accountName"`

	// The name of the Cosmos DB SQL Database to create the container within. Changing this forces a new resource to be created.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`

	// Specifies the name of the Cosmos DB SQL Database. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// Define a partition key. Changing this forces a new resource to be created.
	PartitionKeyPath pulumi.StringOutput `pulumi:"partitionKeyPath"`

	// The name of the resource group in which the Cosmos DB SQL Database is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// One or more `uniqueKey` blocks as defined below. Changing this forces a new resource to be created.
	UniqueKeys SqlContainerUniqueKeysArrayOutput `pulumi:"uniqueKeys"`
}

// NewSqlContainer registers a new resource with the given unique name, arguments, and options.
func NewSqlContainer(ctx *pulumi.Context,
	name string, args *SqlContainerArgs, opts ...pulumi.ResourceOption) (*SqlContainer, error) {
	if args == nil || args.AccountName == nil {
		return nil, errors.New("missing required argument 'AccountName'")
	}
	if args == nil || args.DatabaseName == nil {
		return nil, errors.New("missing required argument 'DatabaseName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AccountName; i != nil { inputs["accountName"] = i.ToStringOutput() }
		if i := args.DatabaseName; i != nil { inputs["databaseName"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.PartitionKeyPath; i != nil { inputs["partitionKeyPath"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.UniqueKeys; i != nil { inputs["uniqueKeys"] = i.ToSqlContainerUniqueKeysArrayOutput() }
	}
	var resource SqlContainer
	err := ctx.RegisterResource("azure:cosmosdb/sqlContainer:SqlContainer", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlContainer gets an existing SqlContainer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlContainer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlContainerState, opts ...pulumi.ResourceOption) (*SqlContainer, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AccountName; i != nil { inputs["accountName"] = i.ToStringOutput() }
		if i := state.DatabaseName; i != nil { inputs["databaseName"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.PartitionKeyPath; i != nil { inputs["partitionKeyPath"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.UniqueKeys; i != nil { inputs["uniqueKeys"] = i.ToSqlContainerUniqueKeysArrayOutput() }
	}
	var resource SqlContainer
	err := ctx.ReadResource("azure:cosmosdb/sqlContainer:SqlContainer", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlContainer resources.
type SqlContainerState struct {
	// The name of the Cosmos DB Account to create the container within. Changing this forces a new resource to be created.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the Cosmos DB SQL Database to create the container within. Changing this forces a new resource to be created.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Specifies the name of the Cosmos DB SQL Database. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// Define a partition key. Changing this forces a new resource to be created.
	PartitionKeyPath pulumi.StringInput `pulumi:"partitionKeyPath"`
	// The name of the resource group in which the Cosmos DB SQL Database is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// One or more `uniqueKey` blocks as defined below. Changing this forces a new resource to be created.
	UniqueKeys SqlContainerUniqueKeysArrayInput `pulumi:"uniqueKeys"`
}

// The set of arguments for constructing a SqlContainer resource.
type SqlContainerArgs struct {
	// The name of the Cosmos DB Account to create the container within. Changing this forces a new resource to be created.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the Cosmos DB SQL Database to create the container within. Changing this forces a new resource to be created.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Specifies the name of the Cosmos DB SQL Database. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// Define a partition key. Changing this forces a new resource to be created.
	PartitionKeyPath pulumi.StringInput `pulumi:"partitionKeyPath"`
	// The name of the resource group in which the Cosmos DB SQL Database is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// One or more `uniqueKey` blocks as defined below. Changing this forces a new resource to be created.
	UniqueKeys SqlContainerUniqueKeysArrayInput `pulumi:"uniqueKeys"`
}
type SqlContainerUniqueKeys struct {
	Paths []string `pulumi:"paths"`
}
var sqlContainerUniqueKeysType = reflect.TypeOf((*SqlContainerUniqueKeys)(nil)).Elem()

type SqlContainerUniqueKeysInput interface {
	pulumi.Input

	ToSqlContainerUniqueKeysOutput() SqlContainerUniqueKeysOutput
	ToSqlContainerUniqueKeysOutputWithContext(ctx context.Context) SqlContainerUniqueKeysOutput
}

type SqlContainerUniqueKeysArgs struct {
	Paths pulumi.StringArrayInput `pulumi:"paths"`
}

func (SqlContainerUniqueKeysArgs) ElementType() reflect.Type {
	return sqlContainerUniqueKeysType
}

func (a SqlContainerUniqueKeysArgs) ToSqlContainerUniqueKeysOutput() SqlContainerUniqueKeysOutput {
	return pulumi.ToOutput(a).(SqlContainerUniqueKeysOutput)
}

func (a SqlContainerUniqueKeysArgs) ToSqlContainerUniqueKeysOutputWithContext(ctx context.Context) SqlContainerUniqueKeysOutput {
	return pulumi.ToOutputWithContext(ctx, a).(SqlContainerUniqueKeysOutput)
}

type SqlContainerUniqueKeysOutput struct { *pulumi.OutputState }

func (o SqlContainerUniqueKeysOutput) Paths() pulumi.StringArrayOutput {
	return o.Apply(func(v SqlContainerUniqueKeys) []string {
		return v.Paths
	}).(pulumi.StringArrayOutput)
}

func (SqlContainerUniqueKeysOutput) ElementType() reflect.Type {
	return sqlContainerUniqueKeysType
}

func (o SqlContainerUniqueKeysOutput) ToSqlContainerUniqueKeysOutput() SqlContainerUniqueKeysOutput {
	return o
}

func (o SqlContainerUniqueKeysOutput) ToSqlContainerUniqueKeysOutputWithContext(ctx context.Context) SqlContainerUniqueKeysOutput {
	return o
}

func init() { pulumi.RegisterOutputType(SqlContainerUniqueKeysOutput{}) }

var sqlContainerUniqueKeysArrayType = reflect.TypeOf((*[]SqlContainerUniqueKeys)(nil)).Elem()

type SqlContainerUniqueKeysArrayInput interface {
	pulumi.Input

	ToSqlContainerUniqueKeysArrayOutput() SqlContainerUniqueKeysArrayOutput
	ToSqlContainerUniqueKeysArrayOutputWithContext(ctx context.Context) SqlContainerUniqueKeysArrayOutput
}

type SqlContainerUniqueKeysArrayArgs []SqlContainerUniqueKeysInput

func (SqlContainerUniqueKeysArrayArgs) ElementType() reflect.Type {
	return sqlContainerUniqueKeysArrayType
}

func (a SqlContainerUniqueKeysArrayArgs) ToSqlContainerUniqueKeysArrayOutput() SqlContainerUniqueKeysArrayOutput {
	return pulumi.ToOutput(a).(SqlContainerUniqueKeysArrayOutput)
}

func (a SqlContainerUniqueKeysArrayArgs) ToSqlContainerUniqueKeysArrayOutputWithContext(ctx context.Context) SqlContainerUniqueKeysArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(SqlContainerUniqueKeysArrayOutput)
}

type SqlContainerUniqueKeysArrayOutput struct { *pulumi.OutputState }

func (o SqlContainerUniqueKeysArrayOutput) Index(i pulumi.IntInput) SqlContainerUniqueKeysOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) SqlContainerUniqueKeys {
		return vs[0].([]SqlContainerUniqueKeys)[vs[1].(int)]
	}).(SqlContainerUniqueKeysOutput)
}

func (SqlContainerUniqueKeysArrayOutput) ElementType() reflect.Type {
	return sqlContainerUniqueKeysArrayType
}

func (o SqlContainerUniqueKeysArrayOutput) ToSqlContainerUniqueKeysArrayOutput() SqlContainerUniqueKeysArrayOutput {
	return o
}

func (o SqlContainerUniqueKeysArrayOutput) ToSqlContainerUniqueKeysArrayOutputWithContext(ctx context.Context) SqlContainerUniqueKeysArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(SqlContainerUniqueKeysArrayOutput{}) }

