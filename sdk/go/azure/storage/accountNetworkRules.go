// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package storage

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages network rules inside of a Azure Storage Account.
// 
// > **NOTE:** Network Rules can be defined either directly on the `storage.Account` resource, or using the `storage.AccountNetworkRules` resource - but the two cannot be used together. Spurious changes will occur if both are used against the same Storage Account. 
// 
// > **NOTE:** Only one `storage.AccountNetworkRules` can be tied to an `storage.Account`. Spurious changes will occur if more than `storage.AccountNetworkRules` is tied to the same `storage.Account`.
// 
// > **NOTE:** Deleting this resource updates the storage account back to the default values it had when the storage account was created.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/storage_account_network_rules.html.markdown.
type AccountNetworkRules struct {
	s *pulumi.ResourceState
}

// NewAccountNetworkRules registers a new resource with the given unique name, arguments, and options.
func NewAccountNetworkRules(ctx *pulumi.Context,
	name string, args *AccountNetworkRulesArgs, opts ...pulumi.ResourceOpt) (*AccountNetworkRules, error) {
	if args == nil || args.DefaultAction == nil {
		return nil, errors.New("missing required argument 'DefaultAction'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.StorageAccountName == nil {
		return nil, errors.New("missing required argument 'StorageAccountName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["bypasses"] = nil
		inputs["defaultAction"] = nil
		inputs["ipRules"] = nil
		inputs["resourceGroupName"] = nil
		inputs["storageAccountName"] = nil
		inputs["virtualNetworkSubnetIds"] = nil
	} else {
		inputs["bypasses"] = args.Bypasses
		inputs["defaultAction"] = args.DefaultAction
		inputs["ipRules"] = args.IpRules
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["storageAccountName"] = args.StorageAccountName
		inputs["virtualNetworkSubnetIds"] = args.VirtualNetworkSubnetIds
	}
	s, err := ctx.RegisterResource("azure:storage/accountNetworkRules:AccountNetworkRules", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccountNetworkRules{s: s}, nil
}

// GetAccountNetworkRules gets an existing AccountNetworkRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountNetworkRules(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AccountNetworkRulesState, opts ...pulumi.ResourceOpt) (*AccountNetworkRules, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["bypasses"] = state.Bypasses
		inputs["defaultAction"] = state.DefaultAction
		inputs["ipRules"] = state.IpRules
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["storageAccountName"] = state.StorageAccountName
		inputs["virtualNetworkSubnetIds"] = state.VirtualNetworkSubnetIds
	}
	s, err := ctx.ReadResource("azure:storage/accountNetworkRules:AccountNetworkRules", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AccountNetworkRules{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AccountNetworkRules) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AccountNetworkRules) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are any combination of `Logging`, `Metrics`, `AzureServices`, or `None`. 
func (r *AccountNetworkRules) Bypasses() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["bypasses"])
}

// Specifies the default action of allow or deny when no other rules match. Valid options are `Deny` or `Allow`.
func (r *AccountNetworkRules) DefaultAction() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["defaultAction"])
}

// List of public IP or IP ranges in CIDR Format. Only IPV4 addresses are allowed. Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)) are not allowed.
func (r *AccountNetworkRules) IpRules() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["ipRules"])
}

// The name of the resource group in which to create the storage account. Changing this forces a new resource to be created.
func (r *AccountNetworkRules) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
func (r *AccountNetworkRules) StorageAccountName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["storageAccountName"])
}

// A list of virtual network subnet ids to to secure the storage account.
func (r *AccountNetworkRules) VirtualNetworkSubnetIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["virtualNetworkSubnetIds"])
}

// Input properties used for looking up and filtering AccountNetworkRules resources.
type AccountNetworkRulesState struct {
	// Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are any combination of `Logging`, `Metrics`, `AzureServices`, or `None`. 
	Bypasses interface{}
	// Specifies the default action of allow or deny when no other rules match. Valid options are `Deny` or `Allow`.
	DefaultAction interface{}
	// List of public IP or IP ranges in CIDR Format. Only IPV4 addresses are allowed. Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)) are not allowed.
	IpRules interface{}
	// The name of the resource group in which to create the storage account. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
	StorageAccountName interface{}
	// A list of virtual network subnet ids to to secure the storage account.
	VirtualNetworkSubnetIds interface{}
}

// The set of arguments for constructing a AccountNetworkRules resource.
type AccountNetworkRulesArgs struct {
	// Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Valid options are any combination of `Logging`, `Metrics`, `AzureServices`, or `None`. 
	Bypasses interface{}
	// Specifies the default action of allow or deny when no other rules match. Valid options are `Deny` or `Allow`.
	DefaultAction interface{}
	// List of public IP or IP ranges in CIDR Format. Only IPV4 addresses are allowed. Private IP address ranges (as defined in [RFC 1918](https://tools.ietf.org/html/rfc1918#section-3)) are not allowed.
	IpRules interface{}
	// The name of the resource group in which to create the storage account. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Specifies the name of the storage account. Changing this forces a new resource to be created. This must be unique across the entire Azure service, not just within the resource group.
	StorageAccountName interface{}
	// A list of virtual network subnet ids to to secure the storage account.
	VirtualNetworkSubnetIds interface{}
}
