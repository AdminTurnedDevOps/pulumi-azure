// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package core

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a template deployment of resources
// 
// > **Note on ARM Template Deployments:** Due to the way the underlying Azure API is designed, this provider can only manage the deployment of the ARM Template - and not any resources which are created by it.
// This means that when deleting the `core.TemplateDeployment` resource, this provider will only remove the reference to the deployment, whilst leaving any resources created by that ARM Template Deployment.
// One workaround for this is to use a unique Resource Group for each ARM Template Deployment, which means deleting the Resource Group would contain any resources created within it - however this isn't ideal. [More information](https://docs.microsoft.com/en-us/rest/api/resources/deployments#Deployments_Delete).
// 
// ## Note
// 
// This provider does not know about the individual resources created by Azure using a deployment template and therefore cannot delete these resources during a destroy. Destroying a template deployment removes the associated deployment operations, but will not delete the Azure resources created by the deployment. In order to delete these resources, the containing resource group must also be destroyed. [More information](https://docs.microsoft.com/en-us/rest/api/resources/deployments#Deployments_Delete).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/template_deployment.html.markdown.
type TemplateDeployment struct {
	pulumi.CustomResourceState

	// Specifies the mode that is used to deploy resources. This value could be either `Incremental` or `Complete`.
	// Note that you will almost *always* want this to be set to `Incremental` otherwise the deployment will destroy all infrastructure not
	// specified within the template, and this provider will not be aware of this.
	DeploymentMode pulumi.StringOutput `pulumi:"deploymentMode"`

	// Specifies the name of the template deployment. Changing this forces a
	// new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// A map of supported scalar output types returned from the deployment (currently, Azure Template Deployment outputs of type String, Int and Bool are supported, and are converted to strings - others will be ignored) and can be accessed using `.outputs["name"]`.
	Outputs pulumi.StringMapOutput `pulumi:"outputs"`

	// Specifies the name and value pairs that define the deployment parameters for the template.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`

	// Specifies a valid Azure JSON parameters file that define the deployment parameters. It can contain KeyVault references
	ParametersBody pulumi.StringOutput `pulumi:"parametersBody"`

	// The name of the resource group in which to
	// create the template deployment.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// Specifies the JSON definition for the template.
	TemplateBody pulumi.StringOutput `pulumi:"templateBody"`
}

// NewTemplateDeployment registers a new resource with the given unique name, arguments, and options.
func NewTemplateDeployment(ctx *pulumi.Context,
	name string, args *TemplateDeploymentArgs, opts ...pulumi.ResourceOption) (*TemplateDeployment, error) {
	if args == nil || args.DeploymentMode == nil {
		return nil, errors.New("missing required argument 'DeploymentMode'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.DeploymentMode; i != nil { inputs["deploymentMode"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Parameters; i != nil { inputs["parameters"] = i.ToStringMapOutput() }
		if i := args.ParametersBody; i != nil { inputs["parametersBody"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.TemplateBody; i != nil { inputs["templateBody"] = i.ToStringOutput() }
	}
	var resource TemplateDeployment
	err := ctx.RegisterResource("azure:core/templateDeployment:TemplateDeployment", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplateDeployment gets an existing TemplateDeployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplateDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateDeploymentState, opts ...pulumi.ResourceOption) (*TemplateDeployment, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.DeploymentMode; i != nil { inputs["deploymentMode"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Outputs; i != nil { inputs["outputs"] = i.ToStringMapOutput() }
		if i := state.Parameters; i != nil { inputs["parameters"] = i.ToStringMapOutput() }
		if i := state.ParametersBody; i != nil { inputs["parametersBody"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.TemplateBody; i != nil { inputs["templateBody"] = i.ToStringOutput() }
	}
	var resource TemplateDeployment
	err := ctx.ReadResource("azure:core/templateDeployment:TemplateDeployment", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TemplateDeployment resources.
type TemplateDeploymentState struct {
	// Specifies the mode that is used to deploy resources. This value could be either `Incremental` or `Complete`.
	// Note that you will almost *always* want this to be set to `Incremental` otherwise the deployment will destroy all infrastructure not
	// specified within the template, and this provider will not be aware of this.
	DeploymentMode pulumi.StringInput `pulumi:"deploymentMode"`
	// Specifies the name of the template deployment. Changing this forces a
	// new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// A map of supported scalar output types returned from the deployment (currently, Azure Template Deployment outputs of type String, Int and Bool are supported, and are converted to strings - others will be ignored) and can be accessed using `.outputs["name"]`.
	Outputs pulumi.StringMapInput `pulumi:"outputs"`
	// Specifies the name and value pairs that define the deployment parameters for the template.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// Specifies a valid Azure JSON parameters file that define the deployment parameters. It can contain KeyVault references
	ParametersBody pulumi.StringInput `pulumi:"parametersBody"`
	// The name of the resource group in which to
	// create the template deployment.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Specifies the JSON definition for the template.
	TemplateBody pulumi.StringInput `pulumi:"templateBody"`
}

// The set of arguments for constructing a TemplateDeployment resource.
type TemplateDeploymentArgs struct {
	// Specifies the mode that is used to deploy resources. This value could be either `Incremental` or `Complete`.
	// Note that you will almost *always* want this to be set to `Incremental` otherwise the deployment will destroy all infrastructure not
	// specified within the template, and this provider will not be aware of this.
	DeploymentMode pulumi.StringInput `pulumi:"deploymentMode"`
	// Specifies the name of the template deployment. Changing this forces a
	// new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the name and value pairs that define the deployment parameters for the template.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// Specifies a valid Azure JSON parameters file that define the deployment parameters. It can contain KeyVault references
	ParametersBody pulumi.StringInput `pulumi:"parametersBody"`
	// The name of the resource group in which to
	// create the template deployment.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Specifies the JSON definition for the template.
	TemplateBody pulumi.StringInput `pulumi:"templateBody"`
}
