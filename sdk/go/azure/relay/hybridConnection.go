// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package relay

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Azure Relay Hybrid Connection.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/relay_hybrid_connection.html.markdown.
type HybridConnection struct {
	pulumi.CustomResourceState

	// Specifies the name of the Azure Relay Hybrid Connection. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the Azure Relay in which to create the Azure Relay Hybrid Connection. Changing this forces a new resource to be created.
	RelayNamespaceName pulumi.StringOutput `pulumi:"relayNamespaceName"`

	// Specify if client authorization is needed for this hybrid connection. True by default. Changing this forces a new resource to be created.
	RequiresClientAuthorization pulumi.BoolOutput `pulumi:"requiresClientAuthorization"`

	// The name of the resource group in which to create the Azure Relay Hybrid Connection. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
	UserMetadata pulumi.StringOutput `pulumi:"userMetadata"`
}

// NewHybridConnection registers a new resource with the given unique name, arguments, and options.
func NewHybridConnection(ctx *pulumi.Context,
	name string, args *HybridConnectionArgs, opts ...pulumi.ResourceOption) (*HybridConnection, error) {
	if args == nil || args.RelayNamespaceName == nil {
		return nil, errors.New("missing required argument 'RelayNamespaceName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.RelayNamespaceName; i != nil { inputs["relayNamespaceName"] = i.ToStringOutput() }
		if i := args.RequiresClientAuthorization; i != nil { inputs["requiresClientAuthorization"] = i.ToBoolOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.UserMetadata; i != nil { inputs["userMetadata"] = i.ToStringOutput() }
	}
	var resource HybridConnection
	err := ctx.RegisterResource("azure:relay/hybridConnection:HybridConnection", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHybridConnection gets an existing HybridConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHybridConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HybridConnectionState, opts ...pulumi.ResourceOption) (*HybridConnection, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.RelayNamespaceName; i != nil { inputs["relayNamespaceName"] = i.ToStringOutput() }
		if i := state.RequiresClientAuthorization; i != nil { inputs["requiresClientAuthorization"] = i.ToBoolOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.UserMetadata; i != nil { inputs["userMetadata"] = i.ToStringOutput() }
	}
	var resource HybridConnection
	err := ctx.ReadResource("azure:relay/hybridConnection:HybridConnection", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HybridConnection resources.
type HybridConnectionState struct {
	// Specifies the name of the Azure Relay Hybrid Connection. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Azure Relay in which to create the Azure Relay Hybrid Connection. Changing this forces a new resource to be created.
	RelayNamespaceName pulumi.StringInput `pulumi:"relayNamespaceName"`
	// Specify if client authorization is needed for this hybrid connection. True by default. Changing this forces a new resource to be created.
	RequiresClientAuthorization pulumi.BoolInput `pulumi:"requiresClientAuthorization"`
	// The name of the resource group in which to create the Azure Relay Hybrid Connection. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
	UserMetadata pulumi.StringInput `pulumi:"userMetadata"`
}

// The set of arguments for constructing a HybridConnection resource.
type HybridConnectionArgs struct {
	// Specifies the name of the Azure Relay Hybrid Connection. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Azure Relay in which to create the Azure Relay Hybrid Connection. Changing this forces a new resource to be created.
	RelayNamespaceName pulumi.StringInput `pulumi:"relayNamespaceName"`
	// Specify if client authorization is needed for this hybrid connection. True by default. Changing this forces a new resource to be created.
	RequiresClientAuthorization pulumi.BoolInput `pulumi:"requiresClientAuthorization"`
	// The name of the resource group in which to create the Azure Relay Hybrid Connection. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
	UserMetadata pulumi.StringInput `pulumi:"userMetadata"`
}
