// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package relay

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Azure Relay Namespace.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/relay_namespace.html.markdown.
type Namespace struct {
	pulumi.CustomResourceState

	// Specifies the supported Azure location where the Azure Relay Namespace exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// The Identifier for Azure Insights metrics.
	MetricId pulumi.StringOutput `pulumi:"metricId"`

	// Specifies the name of the Azure Relay Namespace. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The primary connection string for the authorization rule `RootManageSharedAccessKey`.
	PrimaryConnectionString pulumi.StringOutput `pulumi:"primaryConnectionString"`

	// The primary access key for the authorization rule `RootManageSharedAccessKey`.
	PrimaryKey pulumi.StringOutput `pulumi:"primaryKey"`

	// The name of the resource group in which to create the Azure Relay Namespace.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The secondary connection string for the authorization rule `RootManageSharedAccessKey`.
	SecondaryConnectionString pulumi.StringOutput `pulumi:"secondaryConnectionString"`

	// The secondary access key for the authorization rule `RootManageSharedAccessKey`.
	SecondaryKey pulumi.StringOutput `pulumi:"secondaryKey"`

	// ) A `sku` block as described below.
	Sku NamespaceSkuOutput `pulumi:"sku"`

	// The name of the SKU to use. At this time the only supported value is `Standard`.
	SkuName pulumi.StringOutput `pulumi:"skuName"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewNamespace registers a new resource with the given unique name, arguments, and options.
func NewNamespace(ctx *pulumi.Context,
	name string, args *NamespaceArgs, opts ...pulumi.ResourceOption) (*Namespace, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Sku; i != nil { inputs["sku"] = i.ToNamespaceSkuOutput() }
		if i := args.SkuName; i != nil { inputs["skuName"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Namespace
	err := ctx.RegisterResource("azure:relay/namespace:Namespace", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespace gets an existing Namespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceState, opts ...pulumi.ResourceOption) (*Namespace, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.MetricId; i != nil { inputs["metricId"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.PrimaryConnectionString; i != nil { inputs["primaryConnectionString"] = i.ToStringOutput() }
		if i := state.PrimaryKey; i != nil { inputs["primaryKey"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.SecondaryConnectionString; i != nil { inputs["secondaryConnectionString"] = i.ToStringOutput() }
		if i := state.SecondaryKey; i != nil { inputs["secondaryKey"] = i.ToStringOutput() }
		if i := state.Sku; i != nil { inputs["sku"] = i.ToNamespaceSkuOutput() }
		if i := state.SkuName; i != nil { inputs["skuName"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Namespace
	err := ctx.ReadResource("azure:relay/namespace:Namespace", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Namespace resources.
type NamespaceState struct {
	// Specifies the supported Azure location where the Azure Relay Namespace exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The Identifier for Azure Insights metrics.
	MetricId pulumi.StringInput `pulumi:"metricId"`
	// Specifies the name of the Azure Relay Namespace. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The primary connection string for the authorization rule `RootManageSharedAccessKey`.
	PrimaryConnectionString pulumi.StringInput `pulumi:"primaryConnectionString"`
	// The primary access key for the authorization rule `RootManageSharedAccessKey`.
	PrimaryKey pulumi.StringInput `pulumi:"primaryKey"`
	// The name of the resource group in which to create the Azure Relay Namespace.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The secondary connection string for the authorization rule `RootManageSharedAccessKey`.
	SecondaryConnectionString pulumi.StringInput `pulumi:"secondaryConnectionString"`
	// The secondary access key for the authorization rule `RootManageSharedAccessKey`.
	SecondaryKey pulumi.StringInput `pulumi:"secondaryKey"`
	// ) A `sku` block as described below.
	Sku NamespaceSkuInput `pulumi:"sku"`
	// The name of the SKU to use. At this time the only supported value is `Standard`.
	SkuName pulumi.StringInput `pulumi:"skuName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Namespace resource.
type NamespaceArgs struct {
	// Specifies the supported Azure location where the Azure Relay Namespace exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the Azure Relay Namespace. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which to create the Azure Relay Namespace.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// ) A `sku` block as described below.
	Sku NamespaceSkuInput `pulumi:"sku"`
	// The name of the SKU to use. At this time the only supported value is `Standard`.
	SkuName pulumi.StringInput `pulumi:"skuName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
type NamespaceSku struct {
	// Specifies the name of the Azure Relay Namespace. Changing this forces a new resource to be created.
	Name string `pulumi:"name"`
}
var namespaceSkuType = reflect.TypeOf((*NamespaceSku)(nil)).Elem()

type NamespaceSkuInput interface {
	pulumi.Input

	ToNamespaceSkuOutput() NamespaceSkuOutput
	ToNamespaceSkuOutputWithContext(ctx context.Context) NamespaceSkuOutput
}

type NamespaceSkuArgs struct {
	// Specifies the name of the Azure Relay Namespace. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
}

func (NamespaceSkuArgs) ElementType() reflect.Type {
	return namespaceSkuType
}

func (a NamespaceSkuArgs) ToNamespaceSkuOutput() NamespaceSkuOutput {
	return pulumi.ToOutput(a).(NamespaceSkuOutput)
}

func (a NamespaceSkuArgs) ToNamespaceSkuOutputWithContext(ctx context.Context) NamespaceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, a).(NamespaceSkuOutput)
}

type NamespaceSkuOutput struct { *pulumi.OutputState }

// Specifies the name of the Azure Relay Namespace. Changing this forces a new resource to be created.
func (o NamespaceSkuOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v NamespaceSku) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (NamespaceSkuOutput) ElementType() reflect.Type {
	return namespaceSkuType
}

func (o NamespaceSkuOutput) ToNamespaceSkuOutput() NamespaceSkuOutput {
	return o
}

func (o NamespaceSkuOutput) ToNamespaceSkuOutputWithContext(ctx context.Context) NamespaceSkuOutput {
	return o
}

func init() { pulumi.RegisterOutputType(NamespaceSkuOutput{}) }

