// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appservice

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an App Service certificate.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/app_service_certificate.html.markdown.
type Certificate struct {
	pulumi.CustomResourceState

	// The expiration date for the certificate.
	ExpirationDate pulumi.StringOutput `pulumi:"expirationDate"`

	// The friendly name of the certificate.
	FriendlyName pulumi.StringOutput `pulumi:"friendlyName"`

	// List of host names the certificate applies to.
	HostNames pulumi.StringArrayOutput `pulumi:"hostNames"`

	// The issue date for the certificate.
	IssueDate pulumi.StringOutput `pulumi:"issueDate"`

	// The name of the certificate issuer.
	Issuer pulumi.StringOutput `pulumi:"issuer"`

	// The ID of the Key Vault secret. Changing this forces a new resource to be created.
	KeyVaultSecretId pulumi.StringOutput `pulumi:"keyVaultSecretId"`

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// Specifies the name of the certificate. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The password to access the certificate's private key. Changing this forces a new resource to be created.
	Password pulumi.StringOutput `pulumi:"password"`

	// The base64-encoded contents of the certificate. Changing this forces a new resource to be created.
	PfxBlob pulumi.StringOutput `pulumi:"pfxBlob"`

	// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The subject name of the certificate.
	SubjectName pulumi.StringOutput `pulumi:"subjectName"`

	Tags pulumi.MapOutput `pulumi:"tags"`

	// The thumbprint for the certificate.
	Thumbprint pulumi.StringOutput `pulumi:"thumbprint"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.KeyVaultSecretId; i != nil { inputs["keyVaultSecretId"] = i.ToStringOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Password; i != nil { inputs["password"] = i.ToStringOutput() }
		if i := args.PfxBlob; i != nil { inputs["pfxBlob"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Certificate
	err := ctx.RegisterResource("azure:appservice/certificate:Certificate", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ExpirationDate; i != nil { inputs["expirationDate"] = i.ToStringOutput() }
		if i := state.FriendlyName; i != nil { inputs["friendlyName"] = i.ToStringOutput() }
		if i := state.HostNames; i != nil { inputs["hostNames"] = i.ToStringArrayOutput() }
		if i := state.IssueDate; i != nil { inputs["issueDate"] = i.ToStringOutput() }
		if i := state.Issuer; i != nil { inputs["issuer"] = i.ToStringOutput() }
		if i := state.KeyVaultSecretId; i != nil { inputs["keyVaultSecretId"] = i.ToStringOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Password; i != nil { inputs["password"] = i.ToStringOutput() }
		if i := state.PfxBlob; i != nil { inputs["pfxBlob"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.SubjectName; i != nil { inputs["subjectName"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.Thumbprint; i != nil { inputs["thumbprint"] = i.ToStringOutput() }
	}
	var resource Certificate
	err := ctx.ReadResource("azure:appservice/certificate:Certificate", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type CertificateState struct {
	// The expiration date for the certificate.
	ExpirationDate pulumi.StringInput `pulumi:"expirationDate"`
	// The friendly name of the certificate.
	FriendlyName pulumi.StringInput `pulumi:"friendlyName"`
	// List of host names the certificate applies to.
	HostNames pulumi.StringArrayInput `pulumi:"hostNames"`
	// The issue date for the certificate.
	IssueDate pulumi.StringInput `pulumi:"issueDate"`
	// The name of the certificate issuer.
	Issuer pulumi.StringInput `pulumi:"issuer"`
	// The ID of the Key Vault secret. Changing this forces a new resource to be created.
	KeyVaultSecretId pulumi.StringInput `pulumi:"keyVaultSecretId"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the certificate. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to access the certificate's private key. Changing this forces a new resource to be created.
	Password pulumi.StringInput `pulumi:"password"`
	// The base64-encoded contents of the certificate. Changing this forces a new resource to be created.
	PfxBlob pulumi.StringInput `pulumi:"pfxBlob"`
	// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The subject name of the certificate.
	SubjectName pulumi.StringInput `pulumi:"subjectName"`
	Tags pulumi.MapInput `pulumi:"tags"`
	// The thumbprint for the certificate.
	Thumbprint pulumi.StringInput `pulumi:"thumbprint"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// The ID of the Key Vault secret. Changing this forces a new resource to be created.
	KeyVaultSecretId pulumi.StringInput `pulumi:"keyVaultSecretId"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the certificate. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The password to access the certificate's private key. Changing this forces a new resource to be created.
	Password pulumi.StringInput `pulumi:"password"`
	// The base64-encoded contents of the certificate. Changing this forces a new resource to be created.
	PfxBlob pulumi.StringInput `pulumi:"pfxBlob"`
	// The name of the resource group in which to create the certificate. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	Tags pulumi.MapInput `pulumi:"tags"`
}
