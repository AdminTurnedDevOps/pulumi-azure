// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package bot

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Slack integration for a Bot Channel
// 
// > **Note** A bot can only have a single Slack Channel associated with it.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/bot_channel_slack.html.markdown.
type ChannelSlack struct {
	pulumi.CustomResourceState

	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringOutput `pulumi:"botName"`

	// The Client ID that will be used to authenticate with Slack.
	ClientId pulumi.StringOutput `pulumi:"clientId"`

	// The Client Secret that will be used to authenticate with Slack.
	ClientSecret pulumi.StringOutput `pulumi:"clientSecret"`

	// The Slack Landing Page URL.
	LandingPageUrl pulumi.StringOutput `pulumi:"landingPageUrl"`

	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// The name of the resource group in which to create the Bot Channel. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The Verification Token that will be used to authenticate with Slack.
	VerificationToken pulumi.StringOutput `pulumi:"verificationToken"`
}

// NewChannelSlack registers a new resource with the given unique name, arguments, and options.
func NewChannelSlack(ctx *pulumi.Context,
	name string, args *ChannelSlackArgs, opts ...pulumi.ResourceOption) (*ChannelSlack, error) {
	if args == nil || args.BotName == nil {
		return nil, errors.New("missing required argument 'BotName'")
	}
	if args == nil || args.ClientId == nil {
		return nil, errors.New("missing required argument 'ClientId'")
	}
	if args == nil || args.ClientSecret == nil {
		return nil, errors.New("missing required argument 'ClientSecret'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.VerificationToken == nil {
		return nil, errors.New("missing required argument 'VerificationToken'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.BotName; i != nil { inputs["botName"] = i.ToStringOutput() }
		if i := args.ClientId; i != nil { inputs["clientId"] = i.ToStringOutput() }
		if i := args.ClientSecret; i != nil { inputs["clientSecret"] = i.ToStringOutput() }
		if i := args.LandingPageUrl; i != nil { inputs["landingPageUrl"] = i.ToStringOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.VerificationToken; i != nil { inputs["verificationToken"] = i.ToStringOutput() }
	}
	var resource ChannelSlack
	err := ctx.RegisterResource("azure:bot/channelSlack:ChannelSlack", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannelSlack gets an existing ChannelSlack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannelSlack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelSlackState, opts ...pulumi.ResourceOption) (*ChannelSlack, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.BotName; i != nil { inputs["botName"] = i.ToStringOutput() }
		if i := state.ClientId; i != nil { inputs["clientId"] = i.ToStringOutput() }
		if i := state.ClientSecret; i != nil { inputs["clientSecret"] = i.ToStringOutput() }
		if i := state.LandingPageUrl; i != nil { inputs["landingPageUrl"] = i.ToStringOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.VerificationToken; i != nil { inputs["verificationToken"] = i.ToStringOutput() }
	}
	var resource ChannelSlack
	err := ctx.ReadResource("azure:bot/channelSlack:ChannelSlack", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChannelSlack resources.
type ChannelSlackState struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringInput `pulumi:"botName"`
	// The Client ID that will be used to authenticate with Slack.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The Client Secret that will be used to authenticate with Slack.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// The Slack Landing Page URL.
	LandingPageUrl pulumi.StringInput `pulumi:"landingPageUrl"`
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the resource group in which to create the Bot Channel. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The Verification Token that will be used to authenticate with Slack.
	VerificationToken pulumi.StringInput `pulumi:"verificationToken"`
}

// The set of arguments for constructing a ChannelSlack resource.
type ChannelSlackArgs struct {
	// The name of the Bot Resource this channel will be associated with. Changing this forces a new resource to be created.
	BotName pulumi.StringInput `pulumi:"botName"`
	// The Client ID that will be used to authenticate with Slack.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The Client Secret that will be used to authenticate with Slack.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// The Slack Landing Page URL.
	LandingPageUrl pulumi.StringInput `pulumi:"landingPageUrl"`
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the resource group in which to create the Bot Channel. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The Verification Token that will be used to authenticate with Slack.
	VerificationToken pulumi.StringInput `pulumi:"verificationToken"`
}
