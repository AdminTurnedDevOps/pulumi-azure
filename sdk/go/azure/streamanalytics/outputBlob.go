// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package streamanalytics

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Stream Analytics Output to Blob Storage.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/stream_analytics_output_blob.html.markdown.
type OutputBlob struct {
	pulumi.CustomResourceState

	// The date format. Wherever `{date}` appears in `pathPattern`, the value of this property is used as the date format instead.
	DateFormat pulumi.StringOutput `pulumi:"dateFormat"`

	// The name of the Stream Output. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job.
	PathPattern pulumi.StringOutput `pulumi:"pathPattern"`

	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// A `serialization` block as defined below.
	Serialization OutputBlobSerializationOutput `pulumi:"serialization"`

	// The Access Key which should be used to connect to this Storage Account.
	StorageAccountKey pulumi.StringOutput `pulumi:"storageAccountKey"`

	// The name of the Storage Account.
	StorageAccountName pulumi.StringOutput `pulumi:"storageAccountName"`

	// The name of the Container within the Storage Account.
	StorageContainerName pulumi.StringOutput `pulumi:"storageContainerName"`

	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringOutput `pulumi:"streamAnalyticsJobName"`

	// The time format. Wherever `{time}` appears in `pathPattern`, the value of this property is used as the time format instead.
	TimeFormat pulumi.StringOutput `pulumi:"timeFormat"`
}

// NewOutputBlob registers a new resource with the given unique name, arguments, and options.
func NewOutputBlob(ctx *pulumi.Context,
	name string, args *OutputBlobArgs, opts ...pulumi.ResourceOption) (*OutputBlob, error) {
	if args == nil || args.DateFormat == nil {
		return nil, errors.New("missing required argument 'DateFormat'")
	}
	if args == nil || args.PathPattern == nil {
		return nil, errors.New("missing required argument 'PathPattern'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Serialization == nil {
		return nil, errors.New("missing required argument 'Serialization'")
	}
	if args == nil || args.StorageAccountKey == nil {
		return nil, errors.New("missing required argument 'StorageAccountKey'")
	}
	if args == nil || args.StorageAccountName == nil {
		return nil, errors.New("missing required argument 'StorageAccountName'")
	}
	if args == nil || args.StorageContainerName == nil {
		return nil, errors.New("missing required argument 'StorageContainerName'")
	}
	if args == nil || args.StreamAnalyticsJobName == nil {
		return nil, errors.New("missing required argument 'StreamAnalyticsJobName'")
	}
	if args == nil || args.TimeFormat == nil {
		return nil, errors.New("missing required argument 'TimeFormat'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.DateFormat; i != nil { inputs["dateFormat"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.PathPattern; i != nil { inputs["pathPattern"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Serialization; i != nil { inputs["serialization"] = i.ToOutputBlobSerializationOutput() }
		if i := args.StorageAccountKey; i != nil { inputs["storageAccountKey"] = i.ToStringOutput() }
		if i := args.StorageAccountName; i != nil { inputs["storageAccountName"] = i.ToStringOutput() }
		if i := args.StorageContainerName; i != nil { inputs["storageContainerName"] = i.ToStringOutput() }
		if i := args.StreamAnalyticsJobName; i != nil { inputs["streamAnalyticsJobName"] = i.ToStringOutput() }
		if i := args.TimeFormat; i != nil { inputs["timeFormat"] = i.ToStringOutput() }
	}
	var resource OutputBlob
	err := ctx.RegisterResource("azure:streamanalytics/outputBlob:OutputBlob", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOutputBlob gets an existing OutputBlob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOutputBlob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OutputBlobState, opts ...pulumi.ResourceOption) (*OutputBlob, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.DateFormat; i != nil { inputs["dateFormat"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.PathPattern; i != nil { inputs["pathPattern"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.Serialization; i != nil { inputs["serialization"] = i.ToOutputBlobSerializationOutput() }
		if i := state.StorageAccountKey; i != nil { inputs["storageAccountKey"] = i.ToStringOutput() }
		if i := state.StorageAccountName; i != nil { inputs["storageAccountName"] = i.ToStringOutput() }
		if i := state.StorageContainerName; i != nil { inputs["storageContainerName"] = i.ToStringOutput() }
		if i := state.StreamAnalyticsJobName; i != nil { inputs["streamAnalyticsJobName"] = i.ToStringOutput() }
		if i := state.TimeFormat; i != nil { inputs["timeFormat"] = i.ToStringOutput() }
	}
	var resource OutputBlob
	err := ctx.ReadResource("azure:streamanalytics/outputBlob:OutputBlob", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OutputBlob resources.
type OutputBlobState struct {
	// The date format. Wherever `{date}` appears in `pathPattern`, the value of this property is used as the date format instead.
	DateFormat pulumi.StringInput `pulumi:"dateFormat"`
	// The name of the Stream Output. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job.
	PathPattern pulumi.StringInput `pulumi:"pathPattern"`
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A `serialization` block as defined below.
	Serialization OutputBlobSerializationInput `pulumi:"serialization"`
	// The Access Key which should be used to connect to this Storage Account.
	StorageAccountKey pulumi.StringInput `pulumi:"storageAccountKey"`
	// The name of the Storage Account.
	StorageAccountName pulumi.StringInput `pulumi:"storageAccountName"`
	// The name of the Container within the Storage Account.
	StorageContainerName pulumi.StringInput `pulumi:"storageContainerName"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringInput `pulumi:"streamAnalyticsJobName"`
	// The time format. Wherever `{time}` appears in `pathPattern`, the value of this property is used as the time format instead.
	TimeFormat pulumi.StringInput `pulumi:"timeFormat"`
}

// The set of arguments for constructing a OutputBlob resource.
type OutputBlobArgs struct {
	// The date format. Wherever `{date}` appears in `pathPattern`, the value of this property is used as the date format instead.
	DateFormat pulumi.StringInput `pulumi:"dateFormat"`
	// The name of the Stream Output. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job.
	PathPattern pulumi.StringInput `pulumi:"pathPattern"`
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A `serialization` block as defined below.
	Serialization OutputBlobSerializationInput `pulumi:"serialization"`
	// The Access Key which should be used to connect to this Storage Account.
	StorageAccountKey pulumi.StringInput `pulumi:"storageAccountKey"`
	// The name of the Storage Account.
	StorageAccountName pulumi.StringInput `pulumi:"storageAccountName"`
	// The name of the Container within the Storage Account.
	StorageContainerName pulumi.StringInput `pulumi:"storageContainerName"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created.
	StreamAnalyticsJobName pulumi.StringInput `pulumi:"streamAnalyticsJobName"`
	// The time format. Wherever `{time}` appears in `pathPattern`, the value of this property is used as the time format instead.
	TimeFormat pulumi.StringInput `pulumi:"timeFormat"`
}
type OutputBlobSerialization struct {
	Encoding *string `pulumi:"encoding"`
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	Format *string `pulumi:"format"`
	Type string `pulumi:"type"`
}
var outputBlobSerializationType = reflect.TypeOf((*OutputBlobSerialization)(nil)).Elem()

type OutputBlobSerializationInput interface {
	pulumi.Input

	ToOutputBlobSerializationOutput() OutputBlobSerializationOutput
	ToOutputBlobSerializationOutputWithContext(ctx context.Context) OutputBlobSerializationOutput
}

type OutputBlobSerializationArgs struct {
	Encoding pulumi.StringInput `pulumi:"encoding"`
	FieldDelimiter pulumi.StringInput `pulumi:"fieldDelimiter"`
	Format pulumi.StringInput `pulumi:"format"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (OutputBlobSerializationArgs) ElementType() reflect.Type {
	return outputBlobSerializationType
}

func (a OutputBlobSerializationArgs) ToOutputBlobSerializationOutput() OutputBlobSerializationOutput {
	return pulumi.ToOutput(a).(OutputBlobSerializationOutput)
}

func (a OutputBlobSerializationArgs) ToOutputBlobSerializationOutputWithContext(ctx context.Context) OutputBlobSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, a).(OutputBlobSerializationOutput)
}

type OutputBlobSerializationOutput struct { *pulumi.OutputState }

func (o OutputBlobSerializationOutput) Encoding() pulumi.StringOutput {
	return o.Apply(func(v OutputBlobSerialization) string {
		if v.Encoding == nil { return *new(string) } else { return *v.Encoding }
	}).(pulumi.StringOutput)
}

func (o OutputBlobSerializationOutput) FieldDelimiter() pulumi.StringOutput {
	return o.Apply(func(v OutputBlobSerialization) string {
		if v.FieldDelimiter == nil { return *new(string) } else { return *v.FieldDelimiter }
	}).(pulumi.StringOutput)
}

func (o OutputBlobSerializationOutput) Format() pulumi.StringOutput {
	return o.Apply(func(v OutputBlobSerialization) string {
		if v.Format == nil { return *new(string) } else { return *v.Format }
	}).(pulumi.StringOutput)
}

func (o OutputBlobSerializationOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v OutputBlobSerialization) string {
		return v.Type
	}).(pulumi.StringOutput)
}

func (OutputBlobSerializationOutput) ElementType() reflect.Type {
	return outputBlobSerializationType
}

func (o OutputBlobSerializationOutput) ToOutputBlobSerializationOutput() OutputBlobSerializationOutput {
	return o
}

func (o OutputBlobSerializationOutput) ToOutputBlobSerializationOutputWithContext(ctx context.Context) OutputBlobSerializationOutput {
	return o
}

func init() { pulumi.RegisterOutputType(OutputBlobSerializationOutput{}) }

