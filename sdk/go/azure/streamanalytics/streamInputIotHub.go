// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package streamanalytics

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Stream Analytics Stream Input IoTHub.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/stream_analytics_stream_input_iothub.html.markdown.
type StreamInputIotHub struct {
	pulumi.CustomResourceState

	// The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.).
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`

	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub.
	EventhubConsumerGroupName pulumi.StringOutput `pulumi:"eventhubConsumerGroupName"`

	// The name or the URI of the IoT Hub.
	IothubNamespace pulumi.StringOutput `pulumi:"iothubNamespace"`

	// The name of the Stream Input IoTHub. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// A `serialization` block as defined below.
	Serialization StreamInputIotHubSerializationOutput `pulumi:"serialization"`

	// The shared access policy key for the specified shared access policy.
	SharedAccessPolicyKey pulumi.StringOutput `pulumi:"sharedAccessPolicyKey"`

	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	SharedAccessPolicyName pulumi.StringOutput `pulumi:"sharedAccessPolicyName"`

	// The name of the Stream Analytics Job. Changing this forces a new resource to be created. 
	StreamAnalyticsJobName pulumi.StringOutput `pulumi:"streamAnalyticsJobName"`
}

// NewStreamInputIotHub registers a new resource with the given unique name, arguments, and options.
func NewStreamInputIotHub(ctx *pulumi.Context,
	name string, args *StreamInputIotHubArgs, opts ...pulumi.ResourceOption) (*StreamInputIotHub, error) {
	if args == nil || args.Endpoint == nil {
		return nil, errors.New("missing required argument 'Endpoint'")
	}
	if args == nil || args.EventhubConsumerGroupName == nil {
		return nil, errors.New("missing required argument 'EventhubConsumerGroupName'")
	}
	if args == nil || args.IothubNamespace == nil {
		return nil, errors.New("missing required argument 'IothubNamespace'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Serialization == nil {
		return nil, errors.New("missing required argument 'Serialization'")
	}
	if args == nil || args.SharedAccessPolicyKey == nil {
		return nil, errors.New("missing required argument 'SharedAccessPolicyKey'")
	}
	if args == nil || args.SharedAccessPolicyName == nil {
		return nil, errors.New("missing required argument 'SharedAccessPolicyName'")
	}
	if args == nil || args.StreamAnalyticsJobName == nil {
		return nil, errors.New("missing required argument 'StreamAnalyticsJobName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Endpoint; i != nil { inputs["endpoint"] = i.ToStringOutput() }
		if i := args.EventhubConsumerGroupName; i != nil { inputs["eventhubConsumerGroupName"] = i.ToStringOutput() }
		if i := args.IothubNamespace; i != nil { inputs["iothubNamespace"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Serialization; i != nil { inputs["serialization"] = i.ToStreamInputIotHubSerializationOutput() }
		if i := args.SharedAccessPolicyKey; i != nil { inputs["sharedAccessPolicyKey"] = i.ToStringOutput() }
		if i := args.SharedAccessPolicyName; i != nil { inputs["sharedAccessPolicyName"] = i.ToStringOutput() }
		if i := args.StreamAnalyticsJobName; i != nil { inputs["streamAnalyticsJobName"] = i.ToStringOutput() }
	}
	var resource StreamInputIotHub
	err := ctx.RegisterResource("azure:streamanalytics/streamInputIotHub:StreamInputIotHub", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamInputIotHub gets an existing StreamInputIotHub resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamInputIotHub(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamInputIotHubState, opts ...pulumi.ResourceOption) (*StreamInputIotHub, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Endpoint; i != nil { inputs["endpoint"] = i.ToStringOutput() }
		if i := state.EventhubConsumerGroupName; i != nil { inputs["eventhubConsumerGroupName"] = i.ToStringOutput() }
		if i := state.IothubNamespace; i != nil { inputs["iothubNamespace"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.Serialization; i != nil { inputs["serialization"] = i.ToStreamInputIotHubSerializationOutput() }
		if i := state.SharedAccessPolicyKey; i != nil { inputs["sharedAccessPolicyKey"] = i.ToStringOutput() }
		if i := state.SharedAccessPolicyName; i != nil { inputs["sharedAccessPolicyName"] = i.ToStringOutput() }
		if i := state.StreamAnalyticsJobName; i != nil { inputs["streamAnalyticsJobName"] = i.ToStringOutput() }
	}
	var resource StreamInputIotHub
	err := ctx.ReadResource("azure:streamanalytics/streamInputIotHub:StreamInputIotHub", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamInputIotHub resources.
type StreamInputIotHubState struct {
	// The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.).
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub.
	EventhubConsumerGroupName pulumi.StringInput `pulumi:"eventhubConsumerGroupName"`
	// The name or the URI of the IoT Hub.
	IothubNamespace pulumi.StringInput `pulumi:"iothubNamespace"`
	// The name of the Stream Input IoTHub. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A `serialization` block as defined below.
	Serialization StreamInputIotHubSerializationInput `pulumi:"serialization"`
	// The shared access policy key for the specified shared access policy.
	SharedAccessPolicyKey pulumi.StringInput `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	SharedAccessPolicyName pulumi.StringInput `pulumi:"sharedAccessPolicyName"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created. 
	StreamAnalyticsJobName pulumi.StringInput `pulumi:"streamAnalyticsJobName"`
}

// The set of arguments for constructing a StreamInputIotHub resource.
type StreamInputIotHubArgs struct {
	// The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.).
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub.
	EventhubConsumerGroupName pulumi.StringInput `pulumi:"eventhubConsumerGroupName"`
	// The name or the URI of the IoT Hub.
	IothubNamespace pulumi.StringInput `pulumi:"iothubNamespace"`
	// The name of the Stream Input IoTHub. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the Stream Analytics Job exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A `serialization` block as defined below.
	Serialization StreamInputIotHubSerializationInput `pulumi:"serialization"`
	// The shared access policy key for the specified shared access policy.
	SharedAccessPolicyKey pulumi.StringInput `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc.
	SharedAccessPolicyName pulumi.StringInput `pulumi:"sharedAccessPolicyName"`
	// The name of the Stream Analytics Job. Changing this forces a new resource to be created. 
	StreamAnalyticsJobName pulumi.StringInput `pulumi:"streamAnalyticsJobName"`
}
type StreamInputIotHubSerialization struct {
	Encoding *string `pulumi:"encoding"`
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	Type string `pulumi:"type"`
}
var streamInputIotHubSerializationType = reflect.TypeOf((*StreamInputIotHubSerialization)(nil)).Elem()

type StreamInputIotHubSerializationInput interface {
	pulumi.Input

	ToStreamInputIotHubSerializationOutput() StreamInputIotHubSerializationOutput
	ToStreamInputIotHubSerializationOutputWithContext(ctx context.Context) StreamInputIotHubSerializationOutput
}

type StreamInputIotHubSerializationArgs struct {
	Encoding pulumi.StringInput `pulumi:"encoding"`
	FieldDelimiter pulumi.StringInput `pulumi:"fieldDelimiter"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (StreamInputIotHubSerializationArgs) ElementType() reflect.Type {
	return streamInputIotHubSerializationType
}

func (a StreamInputIotHubSerializationArgs) ToStreamInputIotHubSerializationOutput() StreamInputIotHubSerializationOutput {
	return pulumi.ToOutput(a).(StreamInputIotHubSerializationOutput)
}

func (a StreamInputIotHubSerializationArgs) ToStreamInputIotHubSerializationOutputWithContext(ctx context.Context) StreamInputIotHubSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, a).(StreamInputIotHubSerializationOutput)
}

type StreamInputIotHubSerializationOutput struct { *pulumi.OutputState }

func (o StreamInputIotHubSerializationOutput) Encoding() pulumi.StringOutput {
	return o.Apply(func(v StreamInputIotHubSerialization) string {
		if v.Encoding == nil { return *new(string) } else { return *v.Encoding }
	}).(pulumi.StringOutput)
}

func (o StreamInputIotHubSerializationOutput) FieldDelimiter() pulumi.StringOutput {
	return o.Apply(func(v StreamInputIotHubSerialization) string {
		if v.FieldDelimiter == nil { return *new(string) } else { return *v.FieldDelimiter }
	}).(pulumi.StringOutput)
}

func (o StreamInputIotHubSerializationOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v StreamInputIotHubSerialization) string {
		return v.Type
	}).(pulumi.StringOutput)
}

func (StreamInputIotHubSerializationOutput) ElementType() reflect.Type {
	return streamInputIotHubSerializationType
}

func (o StreamInputIotHubSerializationOutput) ToStreamInputIotHubSerializationOutput() StreamInputIotHubSerializationOutput {
	return o
}

func (o StreamInputIotHubSerializationOutput) ToStreamInputIotHubSerializationOutputWithContext(ctx context.Context) StreamInputIotHubSerializationOutput {
	return o
}

func init() { pulumi.RegisterOutputType(StreamInputIotHubSerializationOutput{}) }

