// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Azure Backup VM Backup Policy.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/backup_policy_vm.html.markdown.
type PolicyVM struct {
	s *pulumi.ResourceState
}

// NewPolicyVM registers a new resource with the given unique name, arguments, and options.
func NewPolicyVM(ctx *pulumi.Context,
	name string, args *PolicyVMArgs, opts ...pulumi.ResourceOpt) (*PolicyVM, error) {
	if args == nil || args.Backup == nil {
		return nil, errors.New("missing required argument 'Backup'")
	}
	if args == nil || args.RecoveryVaultName == nil {
		return nil, errors.New("missing required argument 'RecoveryVaultName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backup"] = nil
		inputs["name"] = nil
		inputs["recoveryVaultName"] = nil
		inputs["resourceGroupName"] = nil
		inputs["retentionDaily"] = nil
		inputs["retentionMonthly"] = nil
		inputs["retentionWeekly"] = nil
		inputs["retentionYearly"] = nil
		inputs["tags"] = nil
		inputs["timezone"] = nil
	} else {
		inputs["backup"] = args.Backup
		inputs["name"] = args.Name
		inputs["recoveryVaultName"] = args.RecoveryVaultName
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["retentionDaily"] = args.RetentionDaily
		inputs["retentionMonthly"] = args.RetentionMonthly
		inputs["retentionWeekly"] = args.RetentionWeekly
		inputs["retentionYearly"] = args.RetentionYearly
		inputs["tags"] = args.Tags
		inputs["timezone"] = args.Timezone
	}
	s, err := ctx.RegisterResource("azure:backup/policyVM:PolicyVM", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PolicyVM{s: s}, nil
}

// GetPolicyVM gets an existing PolicyVM resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyVM(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PolicyVMState, opts ...pulumi.ResourceOpt) (*PolicyVM, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backup"] = state.Backup
		inputs["name"] = state.Name
		inputs["recoveryVaultName"] = state.RecoveryVaultName
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["retentionDaily"] = state.RetentionDaily
		inputs["retentionMonthly"] = state.RetentionMonthly
		inputs["retentionWeekly"] = state.RetentionWeekly
		inputs["retentionYearly"] = state.RetentionYearly
		inputs["tags"] = state.Tags
		inputs["timezone"] = state.Timezone
	}
	s, err := ctx.ReadResource("azure:backup/policyVM:PolicyVM", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PolicyVM{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *PolicyVM) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *PolicyVM) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Configures the Policy backup frequency, times & days as documented in the `backup` block below. 
func (r *PolicyVM) Backup() pulumi.Output {
	return r.s.State["backup"]
}

// Specifies the name of the Backup Policy. Changing this forces a new resource to be created.
func (r *PolicyVM) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
func (r *PolicyVM) RecoveryVaultName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["recoveryVaultName"])
}

// The name of the resource group in which to create the policy. Changing this forces a new resource to be created.
func (r *PolicyVM) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Configures the policy daily retention as documented in the `retentionDaily` block below. Required when backup frequency is `Daily`.
func (r *PolicyVM) RetentionDaily() pulumi.Output {
	return r.s.State["retentionDaily"]
}

// Configures the policy monthly retention as documented in the `retentionMonthly` block below.
func (r *PolicyVM) RetentionMonthly() pulumi.Output {
	return r.s.State["retentionMonthly"]
}

// Configures the policy weekly retention as documented in the `retentionWeekly` block below. Required when backup frequency is `Weekly`.
func (r *PolicyVM) RetentionWeekly() pulumi.Output {
	return r.s.State["retentionWeekly"]
}

// Configures the policy yearly retention as documented in the `retentionYearly` block below.
func (r *PolicyVM) RetentionYearly() pulumi.Output {
	return r.s.State["retentionYearly"]
}

// A mapping of tags to assign to the resource.
func (r *PolicyVM) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Specifies the timezone. Defaults to `UTC`
func (r *PolicyVM) Timezone() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["timezone"])
}

// Input properties used for looking up and filtering PolicyVM resources.
type PolicyVMState struct {
	// Configures the Policy backup frequency, times & days as documented in the `backup` block below. 
	Backup interface{}
	// Specifies the name of the Backup Policy. Changing this forces a new resource to be created.
	Name interface{}
	// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
	RecoveryVaultName interface{}
	// The name of the resource group in which to create the policy. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Configures the policy daily retention as documented in the `retentionDaily` block below. Required when backup frequency is `Daily`.
	RetentionDaily interface{}
	// Configures the policy monthly retention as documented in the `retentionMonthly` block below.
	RetentionMonthly interface{}
	// Configures the policy weekly retention as documented in the `retentionWeekly` block below. Required when backup frequency is `Weekly`.
	RetentionWeekly interface{}
	// Configures the policy yearly retention as documented in the `retentionYearly` block below.
	RetentionYearly interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// Specifies the timezone. Defaults to `UTC`
	Timezone interface{}
}

// The set of arguments for constructing a PolicyVM resource.
type PolicyVMArgs struct {
	// Configures the Policy backup frequency, times & days as documented in the `backup` block below. 
	Backup interface{}
	// Specifies the name of the Backup Policy. Changing this forces a new resource to be created.
	Name interface{}
	// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
	RecoveryVaultName interface{}
	// The name of the resource group in which to create the policy. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Configures the policy daily retention as documented in the `retentionDaily` block below. Required when backup frequency is `Daily`.
	RetentionDaily interface{}
	// Configures the policy monthly retention as documented in the `retentionMonthly` block below.
	RetentionMonthly interface{}
	// Configures the policy weekly retention as documented in the `retentionWeekly` block below. Required when backup frequency is `Weekly`.
	RetentionWeekly interface{}
	// Configures the policy yearly retention as documented in the `retentionYearly` block below.
	RetentionYearly interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// Specifies the timezone. Defaults to `UTC`
	Timezone interface{}
}
