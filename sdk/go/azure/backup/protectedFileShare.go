// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/backup_protected_file_share.html.markdown.
type ProtectedFileShare struct {
	s *pulumi.ResourceState
}

// NewProtectedFileShare registers a new resource with the given unique name, arguments, and options.
func NewProtectedFileShare(ctx *pulumi.Context,
	name string, args *ProtectedFileShareArgs, opts ...pulumi.ResourceOpt) (*ProtectedFileShare, error) {
	if args == nil || args.BackupPolicyId == nil {
		return nil, errors.New("missing required argument 'BackupPolicyId'")
	}
	if args == nil || args.RecoveryVaultName == nil {
		return nil, errors.New("missing required argument 'RecoveryVaultName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.SourceFileShareName == nil {
		return nil, errors.New("missing required argument 'SourceFileShareName'")
	}
	if args == nil || args.SourceStorageAccountId == nil {
		return nil, errors.New("missing required argument 'SourceStorageAccountId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backupPolicyId"] = nil
		inputs["recoveryVaultName"] = nil
		inputs["resourceGroupName"] = nil
		inputs["sourceFileShareName"] = nil
		inputs["sourceStorageAccountId"] = nil
	} else {
		inputs["backupPolicyId"] = args.BackupPolicyId
		inputs["recoveryVaultName"] = args.RecoveryVaultName
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["sourceFileShareName"] = args.SourceFileShareName
		inputs["sourceStorageAccountId"] = args.SourceStorageAccountId
	}
	s, err := ctx.RegisterResource("azure:backup/protectedFileShare:ProtectedFileShare", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProtectedFileShare{s: s}, nil
}

// GetProtectedFileShare gets an existing ProtectedFileShare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProtectedFileShare(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProtectedFileShareState, opts ...pulumi.ResourceOpt) (*ProtectedFileShare, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backupPolicyId"] = state.BackupPolicyId
		inputs["recoveryVaultName"] = state.RecoveryVaultName
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["sourceFileShareName"] = state.SourceFileShareName
		inputs["sourceStorageAccountId"] = state.SourceStorageAccountId
	}
	s, err := ctx.ReadResource("azure:backup/protectedFileShare:ProtectedFileShare", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProtectedFileShare{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProtectedFileShare) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProtectedFileShare) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Specifies the ID of the backup policy to use. The policy must be an Azure File Share backup policy. Other types are not supported.
func (r *ProtectedFileShare) BackupPolicyId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backupPolicyId"])
}

// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
func (r *ProtectedFileShare) RecoveryVaultName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["recoveryVaultName"])
}

// The name of the resource group in which to create the Azure Backup Protected File Share. Changing this forces a new resource to be created.
func (r *ProtectedFileShare) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Specifies the name of the file share to backup. Changing this forces a new resource to be created.
func (r *ProtectedFileShare) SourceFileShareName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceFileShareName"])
}

// Specifies the ID of the storage account of the file share to backup. Changing this forces a new resource to be created.
func (r *ProtectedFileShare) SourceStorageAccountId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sourceStorageAccountId"])
}

// Input properties used for looking up and filtering ProtectedFileShare resources.
type ProtectedFileShareState struct {
	// Specifies the ID of the backup policy to use. The policy must be an Azure File Share backup policy. Other types are not supported.
	BackupPolicyId interface{}
	// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
	RecoveryVaultName interface{}
	// The name of the resource group in which to create the Azure Backup Protected File Share. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Specifies the name of the file share to backup. Changing this forces a new resource to be created.
	SourceFileShareName interface{}
	// Specifies the ID of the storage account of the file share to backup. Changing this forces a new resource to be created.
	SourceStorageAccountId interface{}
}

// The set of arguments for constructing a ProtectedFileShare resource.
type ProtectedFileShareArgs struct {
	// Specifies the ID of the backup policy to use. The policy must be an Azure File Share backup policy. Other types are not supported.
	BackupPolicyId interface{}
	// Specifies the name of the Recovery Services Vault to use. Changing this forces a new resource to be created.
	RecoveryVaultName interface{}
	// The name of the resource group in which to create the Azure Backup Protected File Share. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Specifies the name of the file share to backup. Changing this forces a new resource to be created.
	SourceFileShareName interface{}
	// Specifies the ID of the storage account of the file share to backup. Changing this forces a new resource to be created.
	SourceStorageAccountId interface{}
}
