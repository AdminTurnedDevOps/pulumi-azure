// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package backup

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages registration of a storage account with Azure Backup. Storage accounts must be registered with an Azure Recovery Vault in order to backup file shares within the storage account. Registering a storage account with a vault creates what is known as a protection container within Azure Recovery Services. Once the container is created, Azure file shares within the storage account can be backed up using the `backup.ProtectedFileShare` resource.
// 
// > **NOTE:** Azure Backup for Azure File Shares is currently in public preview. During the preview, the service is subject to additional limitations and unsupported backup scenarios. [Read More](https://docs.microsoft.com/en-us/azure/backup/backup-azure-files#limitations-for-azure-file-share-backup-during-preview)
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/backup_container_storage_account.html.markdown.
type ContainerStorageAccount struct {
	s *pulumi.ResourceState
}

// NewContainerStorageAccount registers a new resource with the given unique name, arguments, and options.
func NewContainerStorageAccount(ctx *pulumi.Context,
	name string, args *ContainerStorageAccountArgs, opts ...pulumi.ResourceOpt) (*ContainerStorageAccount, error) {
	if args == nil || args.RecoveryVaultName == nil {
		return nil, errors.New("missing required argument 'RecoveryVaultName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.StorageAccountId == nil {
		return nil, errors.New("missing required argument 'StorageAccountId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["recoveryVaultName"] = nil
		inputs["resourceGroupName"] = nil
		inputs["storageAccountId"] = nil
	} else {
		inputs["recoveryVaultName"] = args.RecoveryVaultName
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["storageAccountId"] = args.StorageAccountId
	}
	s, err := ctx.RegisterResource("azure:backup/containerStorageAccount:ContainerStorageAccount", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ContainerStorageAccount{s: s}, nil
}

// GetContainerStorageAccount gets an existing ContainerStorageAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerStorageAccount(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ContainerStorageAccountState, opts ...pulumi.ResourceOpt) (*ContainerStorageAccount, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["recoveryVaultName"] = state.RecoveryVaultName
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["storageAccountId"] = state.StorageAccountId
	}
	s, err := ctx.ReadResource("azure:backup/containerStorageAccount:ContainerStorageAccount", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ContainerStorageAccount{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ContainerStorageAccount) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ContainerStorageAccount) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The name of the vault where the storage account will be registered.
func (r *ContainerStorageAccount) RecoveryVaultName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["recoveryVaultName"])
}

// Name of the resource group where the vault is located.
func (r *ContainerStorageAccount) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Azure Resource ID of the storage account to be registered
func (r *ContainerStorageAccount) StorageAccountId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["storageAccountId"])
}

// Input properties used for looking up and filtering ContainerStorageAccount resources.
type ContainerStorageAccountState struct {
	// The name of the vault where the storage account will be registered.
	RecoveryVaultName interface{}
	// Name of the resource group where the vault is located.
	ResourceGroupName interface{}
	// Azure Resource ID of the storage account to be registered
	StorageAccountId interface{}
}

// The set of arguments for constructing a ContainerStorageAccount resource.
type ContainerStorageAccountArgs struct {
	// The name of the vault where the storage account will be registered.
	RecoveryVaultName interface{}
	// Name of the resource group where the vault is located.
	ResourceGroupName interface{}
	// Azure Resource ID of the storage account to be registered
	StorageAccountId interface{}
}
