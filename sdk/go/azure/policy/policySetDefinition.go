// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package policy

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a policy set definition. 
// 
// > **NOTE:**  Policy set definitions (also known as policy initiatives) do not take effect until they are assigned to a scope using a Policy Set Assignment.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/policy_set_definition.html.markdown.
type PolicySetDefinition struct {
	pulumi.CustomResourceState

	// The description of the policy set definition.
	Description pulumi.StringOutput `pulumi:"description"`

	// The display name of the policy set definition.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`

	// The ID of the Management Group where this policy should be defined. Changing this forces a new resource to be created.
	ManagementGroupId pulumi.StringOutput `pulumi:"managementGroupId"`

	// The metadata for the policy set definition. This is a json object representing additional metadata that should be stored with the policy definition.
	Metadata pulumi.StringOutput `pulumi:"metadata"`

	// The name of the policy set definition. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// Parameters for the policy set definition. This field is a json object that allows you to parameterize your policy definition.
	Parameters pulumi.StringOutput `pulumi:"parameters"`

	// The policy definitions for the policy set definition. This is a json object representing the bundled policy definitions .
	PolicyDefinitions pulumi.StringOutput `pulumi:"policyDefinitions"`

	// The policy set type. Possible values are `BuiltIn` or `Custom`. Changing this forces a new resource to be created.
	PolicyType pulumi.StringOutput `pulumi:"policyType"`
}

// NewPolicySetDefinition registers a new resource with the given unique name, arguments, and options.
func NewPolicySetDefinition(ctx *pulumi.Context,
	name string, args *PolicySetDefinitionArgs, opts ...pulumi.ResourceOption) (*PolicySetDefinition, error) {
	if args == nil || args.DisplayName == nil {
		return nil, errors.New("missing required argument 'DisplayName'")
	}
	if args == nil || args.PolicyType == nil {
		return nil, errors.New("missing required argument 'PolicyType'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.DisplayName; i != nil { inputs["displayName"] = i.ToStringOutput() }
		if i := args.ManagementGroupId; i != nil { inputs["managementGroupId"] = i.ToStringOutput() }
		if i := args.Metadata; i != nil { inputs["metadata"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Parameters; i != nil { inputs["parameters"] = i.ToStringOutput() }
		if i := args.PolicyDefinitions; i != nil { inputs["policyDefinitions"] = i.ToStringOutput() }
		if i := args.PolicyType; i != nil { inputs["policyType"] = i.ToStringOutput() }
	}
	var resource PolicySetDefinition
	err := ctx.RegisterResource("azure:policy/policySetDefinition:PolicySetDefinition", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicySetDefinition gets an existing PolicySetDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicySetDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicySetDefinitionState, opts ...pulumi.ResourceOption) (*PolicySetDefinition, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.DisplayName; i != nil { inputs["displayName"] = i.ToStringOutput() }
		if i := state.ManagementGroupId; i != nil { inputs["managementGroupId"] = i.ToStringOutput() }
		if i := state.Metadata; i != nil { inputs["metadata"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Parameters; i != nil { inputs["parameters"] = i.ToStringOutput() }
		if i := state.PolicyDefinitions; i != nil { inputs["policyDefinitions"] = i.ToStringOutput() }
		if i := state.PolicyType; i != nil { inputs["policyType"] = i.ToStringOutput() }
	}
	var resource PolicySetDefinition
	err := ctx.ReadResource("azure:policy/policySetDefinition:PolicySetDefinition", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicySetDefinition resources.
type PolicySetDefinitionState struct {
	// The description of the policy set definition.
	Description pulumi.StringInput `pulumi:"description"`
	// The display name of the policy set definition.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The ID of the Management Group where this policy should be defined. Changing this forces a new resource to be created.
	ManagementGroupId pulumi.StringInput `pulumi:"managementGroupId"`
	// The metadata for the policy set definition. This is a json object representing additional metadata that should be stored with the policy definition.
	Metadata pulumi.StringInput `pulumi:"metadata"`
	// The name of the policy set definition. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters for the policy set definition. This field is a json object that allows you to parameterize your policy definition.
	Parameters pulumi.StringInput `pulumi:"parameters"`
	// The policy definitions for the policy set definition. This is a json object representing the bundled policy definitions .
	PolicyDefinitions pulumi.StringInput `pulumi:"policyDefinitions"`
	// The policy set type. Possible values are `BuiltIn` or `Custom`. Changing this forces a new resource to be created.
	PolicyType pulumi.StringInput `pulumi:"policyType"`
}

// The set of arguments for constructing a PolicySetDefinition resource.
type PolicySetDefinitionArgs struct {
	// The description of the policy set definition.
	Description pulumi.StringInput `pulumi:"description"`
	// The display name of the policy set definition.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The ID of the Management Group where this policy should be defined. Changing this forces a new resource to be created.
	ManagementGroupId pulumi.StringInput `pulumi:"managementGroupId"`
	// The metadata for the policy set definition. This is a json object representing additional metadata that should be stored with the policy definition.
	Metadata pulumi.StringInput `pulumi:"metadata"`
	// The name of the policy set definition. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// Parameters for the policy set definition. This field is a json object that allows you to parameterize your policy definition.
	Parameters pulumi.StringInput `pulumi:"parameters"`
	// The policy definitions for the policy set definition. This is a json object representing the bundled policy definitions .
	PolicyDefinitions pulumi.StringInput `pulumi:"policyDefinitions"`
	// The policy set type. Possible values are `BuiltIn` or `Custom`. Changing this forces a new resource to be created.
	PolicyType pulumi.StringInput `pulumi:"policyType"`
}
