// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an IotHub Fallback Route
// 
// > **NOTE:** Fallback route can be defined either directly on the `iot.IoTHub` resource, or using the `iot.FallbackRoute` resource - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/iothub_fallback_route.html.markdown.
type FallbackRoute struct {
	s *pulumi.ResourceState
}

// NewFallbackRoute registers a new resource with the given unique name, arguments, and options.
func NewFallbackRoute(ctx *pulumi.Context,
	name string, args *FallbackRouteArgs, opts ...pulumi.ResourceOpt) (*FallbackRoute, error) {
	if args == nil || args.Enabled == nil {
		return nil, errors.New("missing required argument 'Enabled'")
	}
	if args == nil || args.EndpointNames == nil {
		return nil, errors.New("missing required argument 'EndpointNames'")
	}
	if args == nil || args.IothubName == nil {
		return nil, errors.New("missing required argument 'IothubName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["condition"] = nil
		inputs["enabled"] = nil
		inputs["endpointNames"] = nil
		inputs["iothubName"] = nil
		inputs["resourceGroupName"] = nil
	} else {
		inputs["condition"] = args.Condition
		inputs["enabled"] = args.Enabled
		inputs["endpointNames"] = args.EndpointNames
		inputs["iothubName"] = args.IothubName
		inputs["resourceGroupName"] = args.ResourceGroupName
	}
	s, err := ctx.RegisterResource("azure:iot/fallbackRoute:FallbackRoute", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FallbackRoute{s: s}, nil
}

// GetFallbackRoute gets an existing FallbackRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFallbackRoute(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FallbackRouteState, opts ...pulumi.ResourceOpt) (*FallbackRoute, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["condition"] = state.Condition
		inputs["enabled"] = state.Enabled
		inputs["endpointNames"] = state.EndpointNames
		inputs["iothubName"] = state.IothubName
		inputs["resourceGroupName"] = state.ResourceGroupName
	}
	s, err := ctx.ReadResource("azure:iot/fallbackRoute:FallbackRoute", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FallbackRoute{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *FallbackRoute) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *FallbackRoute) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The condition that is evaluated to apply the routing rule. If no condition is provided, it evaluates to `true` by default. For grammar, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
func (r *FallbackRoute) Condition() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["condition"])
}

// Used to specify whether the fallback route is enabled.
func (r *FallbackRoute) Enabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enabled"])
}

// The endpoints to which messages that satisfy the condition are routed. Currently only 1 endpoint is allowed.
func (r *FallbackRoute) EndpointNames() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["endpointNames"])
}

// The name of the IoTHub to which this Fallback Route belongs. Changing this forces a new resource to be created.
func (r *FallbackRoute) IothubName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["iothubName"])
}

// The name of the resource group under which the IotHub Storage Container Endpoint resource has to be created. Changing this forces a new resource to be created.
func (r *FallbackRoute) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Input properties used for looking up and filtering FallbackRoute resources.
type FallbackRouteState struct {
	// The condition that is evaluated to apply the routing rule. If no condition is provided, it evaluates to `true` by default. For grammar, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
	Condition interface{}
	// Used to specify whether the fallback route is enabled.
	Enabled interface{}
	// The endpoints to which messages that satisfy the condition are routed. Currently only 1 endpoint is allowed.
	EndpointNames interface{}
	// The name of the IoTHub to which this Fallback Route belongs. Changing this forces a new resource to be created.
	IothubName interface{}
	// The name of the resource group under which the IotHub Storage Container Endpoint resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
}

// The set of arguments for constructing a FallbackRoute resource.
type FallbackRouteArgs struct {
	// The condition that is evaluated to apply the routing rule. If no condition is provided, it evaluates to `true` by default. For grammar, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language.
	Condition interface{}
	// Used to specify whether the fallback route is enabled.
	Enabled interface{}
	// The endpoints to which messages that satisfy the condition are routed. Currently only 1 endpoint is allowed.
	EndpointNames interface{}
	// The name of the IoTHub to which this Fallback Route belongs. Changing this forces a new resource to be created.
	IothubName interface{}
	// The name of the resource group under which the IotHub Storage Container Endpoint resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
}
