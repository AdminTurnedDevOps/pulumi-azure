// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an IotHub Device Provisioning Service Shared Access Policy
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/iothub_dps_shared_access_policy.html.markdown.
type DpsSharedAccessPolicy struct {
	s *pulumi.ResourceState
}

// NewDpsSharedAccessPolicy registers a new resource with the given unique name, arguments, and options.
func NewDpsSharedAccessPolicy(ctx *pulumi.Context,
	name string, args *DpsSharedAccessPolicyArgs, opts ...pulumi.ResourceOpt) (*DpsSharedAccessPolicy, error) {
	if args == nil || args.IothubDpsName == nil {
		return nil, errors.New("missing required argument 'IothubDpsName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["enrollmentRead"] = nil
		inputs["enrollmentWrite"] = nil
		inputs["iothubDpsName"] = nil
		inputs["name"] = nil
		inputs["registrationRead"] = nil
		inputs["registrationWrite"] = nil
		inputs["resourceGroupName"] = nil
		inputs["serviceConfig"] = nil
	} else {
		inputs["enrollmentRead"] = args.EnrollmentRead
		inputs["enrollmentWrite"] = args.EnrollmentWrite
		inputs["iothubDpsName"] = args.IothubDpsName
		inputs["name"] = args.Name
		inputs["registrationRead"] = args.RegistrationRead
		inputs["registrationWrite"] = args.RegistrationWrite
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["serviceConfig"] = args.ServiceConfig
	}
	inputs["primaryConnectionString"] = nil
	inputs["primaryKey"] = nil
	inputs["secondaryConnectionString"] = nil
	inputs["secondaryKey"] = nil
	s, err := ctx.RegisterResource("azure:iot/dpsSharedAccessPolicy:DpsSharedAccessPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DpsSharedAccessPolicy{s: s}, nil
}

// GetDpsSharedAccessPolicy gets an existing DpsSharedAccessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDpsSharedAccessPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DpsSharedAccessPolicyState, opts ...pulumi.ResourceOpt) (*DpsSharedAccessPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["enrollmentRead"] = state.EnrollmentRead
		inputs["enrollmentWrite"] = state.EnrollmentWrite
		inputs["iothubDpsName"] = state.IothubDpsName
		inputs["name"] = state.Name
		inputs["primaryConnectionString"] = state.PrimaryConnectionString
		inputs["primaryKey"] = state.PrimaryKey
		inputs["registrationRead"] = state.RegistrationRead
		inputs["registrationWrite"] = state.RegistrationWrite
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["secondaryConnectionString"] = state.SecondaryConnectionString
		inputs["secondaryKey"] = state.SecondaryKey
		inputs["serviceConfig"] = state.ServiceConfig
	}
	s, err := ctx.ReadResource("azure:iot/dpsSharedAccessPolicy:DpsSharedAccessPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DpsSharedAccessPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DpsSharedAccessPolicy) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DpsSharedAccessPolicy) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Adds `EnrollmentRead` permission to this Shared Access Account. It allows read access to enrollment data.
func (r *DpsSharedAccessPolicy) EnrollmentRead() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enrollmentRead"])
}

// Adds `EnrollmentWrite` permission to this Shared Access Account. It allows write access to enrollment data.
func (r *DpsSharedAccessPolicy) EnrollmentWrite() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enrollmentWrite"])
}

// The name of the IoT Hub Device Provisioning service to which this Shared Access Policy belongs. Changing this forces a new resource to be created.
func (r *DpsSharedAccessPolicy) IothubDpsName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["iothubDpsName"])
}

// Specifies the name of the IotHub Shared Access Policy resource. Changing this forces a new resource to be created.
func (r *DpsSharedAccessPolicy) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The primary connection string of the Shared Access Policy.
func (r *DpsSharedAccessPolicy) PrimaryConnectionString() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["primaryConnectionString"])
}

// The primary key used to create the authentication token.
func (r *DpsSharedAccessPolicy) PrimaryKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["primaryKey"])
}

// Adds `RegistrationStatusRead` permission to this Shared Access Account. It allows read access to device registrations.
func (r *DpsSharedAccessPolicy) RegistrationRead() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["registrationRead"])
}

// Adds `RegistrationStatusWrite` permission to this Shared Access Account. It allows write access to device registrations.
func (r *DpsSharedAccessPolicy) RegistrationWrite() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["registrationWrite"])
}

// The name of the resource group under which the IotHub Shared Access Policy resource has to be created. Changing this forces a new resource to be created.
func (r *DpsSharedAccessPolicy) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The secondary connection string of the Shared Access Policy.
func (r *DpsSharedAccessPolicy) SecondaryConnectionString() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["secondaryConnectionString"])
}

// The secondary key used to create the authentication token.
func (r *DpsSharedAccessPolicy) SecondaryKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["secondaryKey"])
}

// Adds `ServiceConfig` permission to this Shared Access Account. It allows configuration of the Device Provisioning Service.
func (r *DpsSharedAccessPolicy) ServiceConfig() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["serviceConfig"])
}

// Input properties used for looking up and filtering DpsSharedAccessPolicy resources.
type DpsSharedAccessPolicyState struct {
	// Adds `EnrollmentRead` permission to this Shared Access Account. It allows read access to enrollment data.
	EnrollmentRead interface{}
	// Adds `EnrollmentWrite` permission to this Shared Access Account. It allows write access to enrollment data.
	EnrollmentWrite interface{}
	// The name of the IoT Hub Device Provisioning service to which this Shared Access Policy belongs. Changing this forces a new resource to be created.
	IothubDpsName interface{}
	// Specifies the name of the IotHub Shared Access Policy resource. Changing this forces a new resource to be created.
	Name interface{}
	// The primary connection string of the Shared Access Policy.
	PrimaryConnectionString interface{}
	// The primary key used to create the authentication token.
	PrimaryKey interface{}
	// Adds `RegistrationStatusRead` permission to this Shared Access Account. It allows read access to device registrations.
	RegistrationRead interface{}
	// Adds `RegistrationStatusWrite` permission to this Shared Access Account. It allows write access to device registrations.
	RegistrationWrite interface{}
	// The name of the resource group under which the IotHub Shared Access Policy resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The secondary connection string of the Shared Access Policy.
	SecondaryConnectionString interface{}
	// The secondary key used to create the authentication token.
	SecondaryKey interface{}
	// Adds `ServiceConfig` permission to this Shared Access Account. It allows configuration of the Device Provisioning Service.
	ServiceConfig interface{}
}

// The set of arguments for constructing a DpsSharedAccessPolicy resource.
type DpsSharedAccessPolicyArgs struct {
	// Adds `EnrollmentRead` permission to this Shared Access Account. It allows read access to enrollment data.
	EnrollmentRead interface{}
	// Adds `EnrollmentWrite` permission to this Shared Access Account. It allows write access to enrollment data.
	EnrollmentWrite interface{}
	// The name of the IoT Hub Device Provisioning service to which this Shared Access Policy belongs. Changing this forces a new resource to be created.
	IothubDpsName interface{}
	// Specifies the name of the IotHub Shared Access Policy resource. Changing this forces a new resource to be created.
	Name interface{}
	// Adds `RegistrationStatusRead` permission to this Shared Access Account. It allows read access to device registrations.
	RegistrationRead interface{}
	// Adds `RegistrationStatusWrite` permission to this Shared Access Account. It allows write access to device registrations.
	RegistrationWrite interface{}
	// The name of the resource group under which the IotHub Shared Access Policy resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Adds `ServiceConfig` permission to this Shared Access Account. It allows configuration of the Device Provisioning Service.
	ServiceConfig interface{}
}
