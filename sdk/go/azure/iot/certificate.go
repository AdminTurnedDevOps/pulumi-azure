// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an IotHub Device Provisioning Service Certificate.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/iot_dps_certificate.html.markdown.
type Certificate struct {
	pulumi.CustomResourceState

	// The Base-64 representation of the X509 leaf certificate .cer file or just a .pem file content.
	CertificateContent pulumi.StringOutput `pulumi:"certificateContent"`

	// The name of the IoT Device Provisioning Service that this certificate will be attached to. Changing this forces a new resource to be created.
	IotDpsName pulumi.StringOutput `pulumi:"iotDpsName"`

	// Specifies the name of the Iot Device Provisioning Service Certificate resource. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the resource group under which the Iot Device Provisioning Service Certificate resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil || args.CertificateContent == nil {
		return nil, errors.New("missing required argument 'CertificateContent'")
	}
	if args == nil || args.IotDpsName == nil {
		return nil, errors.New("missing required argument 'IotDpsName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.CertificateContent; i != nil { inputs["certificateContent"] = i.ToStringOutput() }
		if i := args.IotDpsName; i != nil { inputs["iotDpsName"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
	}
	var resource Certificate
	err := ctx.RegisterResource("azure:iot/certificate:Certificate", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.CertificateContent; i != nil { inputs["certificateContent"] = i.ToStringOutput() }
		if i := state.IotDpsName; i != nil { inputs["iotDpsName"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
	}
	var resource Certificate
	err := ctx.ReadResource("azure:iot/certificate:Certificate", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type CertificateState struct {
	// The Base-64 representation of the X509 leaf certificate .cer file or just a .pem file content.
	CertificateContent pulumi.StringInput `pulumi:"certificateContent"`
	// The name of the IoT Device Provisioning Service that this certificate will be attached to. Changing this forces a new resource to be created.
	IotDpsName pulumi.StringInput `pulumi:"iotDpsName"`
	// Specifies the name of the Iot Device Provisioning Service Certificate resource. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group under which the Iot Device Provisioning Service Certificate resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// The Base-64 representation of the X509 leaf certificate .cer file or just a .pem file content.
	CertificateContent pulumi.StringInput `pulumi:"certificateContent"`
	// The name of the IoT Device Provisioning Service that this certificate will be attached to. Changing this forces a new resource to be created.
	IotDpsName pulumi.StringInput `pulumi:"iotDpsName"`
	// Specifies the name of the Iot Device Provisioning Service Certificate resource. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group under which the Iot Device Provisioning Service Certificate resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}
