// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an IotHub ServiceBus Topic Endpoint
// 
// > **NOTE:** Endpoints can be defined either directly on the `iot.IoTHub` resource, or using the `azurerm_iothub_endpoint_*` resources - but the two ways of defining the endpoints cannot be used together. If both are used against the same IoTHub, spurious changes will occur. Also, defining a `azurerm_iothub_endpoint_*` resource and another endpoint of a different type directly on the `iot.IoTHub` resource is not supported.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/iothub_endpoint_servicebus_topic.html.markdown.
type EndpointServicebusTopic struct {
	pulumi.CustomResourceState

	// The connection string for the endpoint.
	ConnectionString pulumi.StringOutput `pulumi:"connectionString"`

	IothubName pulumi.StringOutput `pulumi:"iothubName"`

	// The name of the endpoint. The name must be unique across endpoint types. The following names are reserved:  `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`.
	Name pulumi.StringOutput `pulumi:"name"`

	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewEndpointServicebusTopic registers a new resource with the given unique name, arguments, and options.
func NewEndpointServicebusTopic(ctx *pulumi.Context,
	name string, args *EndpointServicebusTopicArgs, opts ...pulumi.ResourceOption) (*EndpointServicebusTopic, error) {
	if args == nil || args.ConnectionString == nil {
		return nil, errors.New("missing required argument 'ConnectionString'")
	}
	if args == nil || args.IothubName == nil {
		return nil, errors.New("missing required argument 'IothubName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ConnectionString; i != nil { inputs["connectionString"] = i.ToStringOutput() }
		if i := args.IothubName; i != nil { inputs["iothubName"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
	}
	var resource EndpointServicebusTopic
	err := ctx.RegisterResource("azure:iot/endpointServicebusTopic:EndpointServicebusTopic", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpointServicebusTopic gets an existing EndpointServicebusTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpointServicebusTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointServicebusTopicState, opts ...pulumi.ResourceOption) (*EndpointServicebusTopic, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ConnectionString; i != nil { inputs["connectionString"] = i.ToStringOutput() }
		if i := state.IothubName; i != nil { inputs["iothubName"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
	}
	var resource EndpointServicebusTopic
	err := ctx.ReadResource("azure:iot/endpointServicebusTopic:EndpointServicebusTopic", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EndpointServicebusTopic resources.
type EndpointServicebusTopicState struct {
	// The connection string for the endpoint.
	ConnectionString pulumi.StringInput `pulumi:"connectionString"`
	IothubName pulumi.StringInput `pulumi:"iothubName"`
	// The name of the endpoint. The name must be unique across endpoint types. The following names are reserved:  `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`.
	Name pulumi.StringInput `pulumi:"name"`
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a EndpointServicebusTopic resource.
type EndpointServicebusTopicArgs struct {
	// The connection string for the endpoint.
	ConnectionString pulumi.StringInput `pulumi:"connectionString"`
	IothubName pulumi.StringInput `pulumi:"iothubName"`
	// The name of the endpoint. The name must be unique across endpoint types. The following names are reserved:  `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`.
	Name pulumi.StringInput `pulumi:"name"`
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}
