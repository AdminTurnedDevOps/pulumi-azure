// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iot

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an IotHub Storage Container Endpoint
// 
// > **NOTE:** Endpoints can be defined either directly on the `iot.IoTHub` resource, or using the `azurerm_iothub_endpoint_*` resources - but the two ways of defining the endpoints cannot be used together. If both are used against the same IoTHub, spurious changes will occur. Also, defining a `azurerm_iothub_endpoint_*` resource and another endpoint of a different type directly on the `iot.IoTHub` resource is not supported.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/iothub_endpoint_storage_container.html.markdown.
type EndpointStorageContainer struct {
	s *pulumi.ResourceState
}

// NewEndpointStorageContainer registers a new resource with the given unique name, arguments, and options.
func NewEndpointStorageContainer(ctx *pulumi.Context,
	name string, args *EndpointStorageContainerArgs, opts ...pulumi.ResourceOpt) (*EndpointStorageContainer, error) {
	if args == nil || args.ConnectionString == nil {
		return nil, errors.New("missing required argument 'ConnectionString'")
	}
	if args == nil || args.ContainerName == nil {
		return nil, errors.New("missing required argument 'ContainerName'")
	}
	if args == nil || args.IothubName == nil {
		return nil, errors.New("missing required argument 'IothubName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["batchFrequencyInSeconds"] = nil
		inputs["connectionString"] = nil
		inputs["containerName"] = nil
		inputs["encoding"] = nil
		inputs["fileNameFormat"] = nil
		inputs["iothubName"] = nil
		inputs["maxChunkSizeInBytes"] = nil
		inputs["name"] = nil
		inputs["resourceGroupName"] = nil
	} else {
		inputs["batchFrequencyInSeconds"] = args.BatchFrequencyInSeconds
		inputs["connectionString"] = args.ConnectionString
		inputs["containerName"] = args.ContainerName
		inputs["encoding"] = args.Encoding
		inputs["fileNameFormat"] = args.FileNameFormat
		inputs["iothubName"] = args.IothubName
		inputs["maxChunkSizeInBytes"] = args.MaxChunkSizeInBytes
		inputs["name"] = args.Name
		inputs["resourceGroupName"] = args.ResourceGroupName
	}
	s, err := ctx.RegisterResource("azure:iot/endpointStorageContainer:EndpointStorageContainer", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EndpointStorageContainer{s: s}, nil
}

// GetEndpointStorageContainer gets an existing EndpointStorageContainer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpointStorageContainer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *EndpointStorageContainerState, opts ...pulumi.ResourceOpt) (*EndpointStorageContainer, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["batchFrequencyInSeconds"] = state.BatchFrequencyInSeconds
		inputs["connectionString"] = state.ConnectionString
		inputs["containerName"] = state.ContainerName
		inputs["encoding"] = state.Encoding
		inputs["fileNameFormat"] = state.FileNameFormat
		inputs["iothubName"] = state.IothubName
		inputs["maxChunkSizeInBytes"] = state.MaxChunkSizeInBytes
		inputs["name"] = state.Name
		inputs["resourceGroupName"] = state.ResourceGroupName
	}
	s, err := ctx.ReadResource("azure:iot/endpointStorageContainer:EndpointStorageContainer", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &EndpointStorageContainer{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *EndpointStorageContainer) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *EndpointStorageContainer) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Time interval at which blobs are written to storage. Value should be between 60 and 720 seconds. Default value is 300 seconds. 
func (r *EndpointStorageContainer) BatchFrequencyInSeconds() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["batchFrequencyInSeconds"])
}

// The connection string for the endpoint.
func (r *EndpointStorageContainer) ConnectionString() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["connectionString"])
}

// The name of storage container in the storage account.
// *
func (r *EndpointStorageContainer) ContainerName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["containerName"])
}

// Encoding that is used to serialize messages to blobs. Supported values are 'avro' and 'avrodeflate'. Default value is 'avro'.
func (r *EndpointStorageContainer) Encoding() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["encoding"])
}

// File name format for the blob. Default format is ``{iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}``. All parameters are mandatory but can be reordered.
func (r *EndpointStorageContainer) FileNameFormat() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["fileNameFormat"])
}

// The name of the IoTHub to which this Storage Container Endpoint belongs. Changing this forces a new resource to be created.
func (r *EndpointStorageContainer) IothubName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["iothubName"])
}

// Maximum number of bytes for each blob written to storage. Value should be between 10485760(10MB) and 524288000(500MB). Default value is 314572800(300MB).
func (r *EndpointStorageContainer) MaxChunkSizeInBytes() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["maxChunkSizeInBytes"])
}

// The name of the endpoint. The name must be unique across endpoint types. The following names are reserved:  `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`.
func (r *EndpointStorageContainer) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The name of the resource group under which the IotHub Storage Container Endpoint resource has to be created. Changing this forces a new resource to be created.
func (r *EndpointStorageContainer) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Input properties used for looking up and filtering EndpointStorageContainer resources.
type EndpointStorageContainerState struct {
	// Time interval at which blobs are written to storage. Value should be between 60 and 720 seconds. Default value is 300 seconds. 
	BatchFrequencyInSeconds interface{}
	// The connection string for the endpoint.
	ConnectionString interface{}
	// The name of storage container in the storage account.
	// *
	ContainerName interface{}
	// Encoding that is used to serialize messages to blobs. Supported values are 'avro' and 'avrodeflate'. Default value is 'avro'.
	Encoding interface{}
	// File name format for the blob. Default format is ``{iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}``. All parameters are mandatory but can be reordered.
	FileNameFormat interface{}
	// The name of the IoTHub to which this Storage Container Endpoint belongs. Changing this forces a new resource to be created.
	IothubName interface{}
	// Maximum number of bytes for each blob written to storage. Value should be between 10485760(10MB) and 524288000(500MB). Default value is 314572800(300MB).
	MaxChunkSizeInBytes interface{}
	// The name of the endpoint. The name must be unique across endpoint types. The following names are reserved:  `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`.
	Name interface{}
	// The name of the resource group under which the IotHub Storage Container Endpoint resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
}

// The set of arguments for constructing a EndpointStorageContainer resource.
type EndpointStorageContainerArgs struct {
	// Time interval at which blobs are written to storage. Value should be between 60 and 720 seconds. Default value is 300 seconds. 
	BatchFrequencyInSeconds interface{}
	// The connection string for the endpoint.
	ConnectionString interface{}
	// The name of storage container in the storage account.
	// *
	ContainerName interface{}
	// Encoding that is used to serialize messages to blobs. Supported values are 'avro' and 'avrodeflate'. Default value is 'avro'.
	Encoding interface{}
	// File name format for the blob. Default format is ``{iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}``. All parameters are mandatory but can be reordered.
	FileNameFormat interface{}
	// The name of the IoTHub to which this Storage Container Endpoint belongs. Changing this forces a new resource to be created.
	IothubName interface{}
	// Maximum number of bytes for each blob written to storage. Value should be between 10485760(10MB) and 524288000(500MB). Default value is 314572800(300MB).
	MaxChunkSizeInBytes interface{}
	// The name of the endpoint. The name must be unique across endpoint types. The following names are reserved:  `events`, `operationsMonitoringEvents`, `fileNotifications` and `$default`.
	Name interface{}
	// The name of the resource group under which the IotHub Storage Container Endpoint resource has to be created. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
}
