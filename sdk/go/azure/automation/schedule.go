// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package automation

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Automation Schedule.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/automation_schedule.html.markdown.
type Schedule struct {
	pulumi.CustomResourceState

	AccountName pulumi.StringOutput `pulumi:"accountName"`

	// The name of the automation account in which the Schedule is created. Changing this forces a new resource to be created.
	AutomationAccountName pulumi.StringOutput `pulumi:"automationAccountName"`

	// A description for this Schedule.
	Description pulumi.StringOutput `pulumi:"description"`

	// The end time of the schedule.
	ExpiryTime pulumi.StringOutput `pulumi:"expiryTime"`

	// The frequency of the schedule. - can be either `OneTime`, `Day`, `Hour`, `Week`, or `Month`.
	Frequency pulumi.StringOutput `pulumi:"frequency"`

	// The number of `frequency`s between runs. Only valid when frequency is `Day`, `Hour`, `Week`, or `Month` and defaults to `1`.
	Interval pulumi.IntOutput `pulumi:"interval"`

	// List of days of the month that the job should execute on. Must be between `1` and `31`. `-1` for last day of the month. Only valid when frequency is `Month`.
	MonthDays pulumi.IntArrayOutput `pulumi:"monthDays"`

	// List of occurrences of days within a month. Only valid when frequency is `Month`. The `monthlyOccurrence` block supports fields documented below.
	MonthlyOccurrences ScheduleMonthlyOccurrencesArrayOutput `pulumi:"monthlyOccurrences"`

	// Specifies the name of the Schedule. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the resource group in which the Schedule is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// Start time of the schedule. Must be at least five minutes in the future. Defaults to seven minutes in the future from the time the resource is created.
	StartTime pulumi.StringOutput `pulumi:"startTime"`

	// The timezone of the start time. Defaults to `UTC`. For possible values see: https://msdn.microsoft.com/en-us/library/ms912391(v=winembedded.11).aspx
	Timezone pulumi.StringOutput `pulumi:"timezone"`

	// List of days of the week that the job should execute on. Only valid when frequency is `Week`.
	WeekDays pulumi.StringArrayOutput `pulumi:"weekDays"`
}

// NewSchedule registers a new resource with the given unique name, arguments, and options.
func NewSchedule(ctx *pulumi.Context,
	name string, args *ScheduleArgs, opts ...pulumi.ResourceOption) (*Schedule, error) {
	if args == nil || args.Frequency == nil {
		return nil, errors.New("missing required argument 'Frequency'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AccountName; i != nil { inputs["accountName"] = i.ToStringOutput() }
		if i := args.AutomationAccountName; i != nil { inputs["automationAccountName"] = i.ToStringOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.ExpiryTime; i != nil { inputs["expiryTime"] = i.ToStringOutput() }
		if i := args.Frequency; i != nil { inputs["frequency"] = i.ToStringOutput() }
		if i := args.Interval; i != nil { inputs["interval"] = i.ToIntOutput() }
		if i := args.MonthDays; i != nil { inputs["monthDays"] = i.ToIntArrayOutput() }
		if i := args.MonthlyOccurrences; i != nil { inputs["monthlyOccurrences"] = i.ToScheduleMonthlyOccurrencesArrayOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.StartTime; i != nil { inputs["startTime"] = i.ToStringOutput() }
		if i := args.Timezone; i != nil { inputs["timezone"] = i.ToStringOutput() }
		if i := args.WeekDays; i != nil { inputs["weekDays"] = i.ToStringArrayOutput() }
	}
	var resource Schedule
	err := ctx.RegisterResource("azure:automation/schedule:Schedule", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchedule gets an existing Schedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleState, opts ...pulumi.ResourceOption) (*Schedule, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AccountName; i != nil { inputs["accountName"] = i.ToStringOutput() }
		if i := state.AutomationAccountName; i != nil { inputs["automationAccountName"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.ExpiryTime; i != nil { inputs["expiryTime"] = i.ToStringOutput() }
		if i := state.Frequency; i != nil { inputs["frequency"] = i.ToStringOutput() }
		if i := state.Interval; i != nil { inputs["interval"] = i.ToIntOutput() }
		if i := state.MonthDays; i != nil { inputs["monthDays"] = i.ToIntArrayOutput() }
		if i := state.MonthlyOccurrences; i != nil { inputs["monthlyOccurrences"] = i.ToScheduleMonthlyOccurrencesArrayOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.StartTime; i != nil { inputs["startTime"] = i.ToStringOutput() }
		if i := state.Timezone; i != nil { inputs["timezone"] = i.ToStringOutput() }
		if i := state.WeekDays; i != nil { inputs["weekDays"] = i.ToStringArrayOutput() }
	}
	var resource Schedule
	err := ctx.ReadResource("azure:automation/schedule:Schedule", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schedule resources.
type ScheduleState struct {
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the automation account in which the Schedule is created. Changing this forces a new resource to be created.
	AutomationAccountName pulumi.StringInput `pulumi:"automationAccountName"`
	// A description for this Schedule.
	Description pulumi.StringInput `pulumi:"description"`
	// The end time of the schedule.
	ExpiryTime pulumi.StringInput `pulumi:"expiryTime"`
	// The frequency of the schedule. - can be either `OneTime`, `Day`, `Hour`, `Week`, or `Month`.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// The number of `frequency`s between runs. Only valid when frequency is `Day`, `Hour`, `Week`, or `Month` and defaults to `1`.
	Interval pulumi.IntInput `pulumi:"interval"`
	// List of days of the month that the job should execute on. Must be between `1` and `31`. `-1` for last day of the month. Only valid when frequency is `Month`.
	MonthDays pulumi.IntArrayInput `pulumi:"monthDays"`
	// List of occurrences of days within a month. Only valid when frequency is `Month`. The `monthlyOccurrence` block supports fields documented below.
	MonthlyOccurrences ScheduleMonthlyOccurrencesArrayInput `pulumi:"monthlyOccurrences"`
	// Specifies the name of the Schedule. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which the Schedule is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Start time of the schedule. Must be at least five minutes in the future. Defaults to seven minutes in the future from the time the resource is created.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// The timezone of the start time. Defaults to `UTC`. For possible values see: https://msdn.microsoft.com/en-us/library/ms912391(v=winembedded.11).aspx
	Timezone pulumi.StringInput `pulumi:"timezone"`
	// List of days of the week that the job should execute on. Only valid when frequency is `Week`.
	WeekDays pulumi.StringArrayInput `pulumi:"weekDays"`
}

// The set of arguments for constructing a Schedule resource.
type ScheduleArgs struct {
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the automation account in which the Schedule is created. Changing this forces a new resource to be created.
	AutomationAccountName pulumi.StringInput `pulumi:"automationAccountName"`
	// A description for this Schedule.
	Description pulumi.StringInput `pulumi:"description"`
	// The end time of the schedule.
	ExpiryTime pulumi.StringInput `pulumi:"expiryTime"`
	// The frequency of the schedule. - can be either `OneTime`, `Day`, `Hour`, `Week`, or `Month`.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// The number of `frequency`s between runs. Only valid when frequency is `Day`, `Hour`, `Week`, or `Month` and defaults to `1`.
	Interval pulumi.IntInput `pulumi:"interval"`
	// List of days of the month that the job should execute on. Must be between `1` and `31`. `-1` for last day of the month. Only valid when frequency is `Month`.
	MonthDays pulumi.IntArrayInput `pulumi:"monthDays"`
	// List of occurrences of days within a month. Only valid when frequency is `Month`. The `monthlyOccurrence` block supports fields documented below.
	MonthlyOccurrences ScheduleMonthlyOccurrencesArrayInput `pulumi:"monthlyOccurrences"`
	// Specifies the name of the Schedule. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which the Schedule is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Start time of the schedule. Must be at least five minutes in the future. Defaults to seven minutes in the future from the time the resource is created.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// The timezone of the start time. Defaults to `UTC`. For possible values see: https://msdn.microsoft.com/en-us/library/ms912391(v=winembedded.11).aspx
	Timezone pulumi.StringInput `pulumi:"timezone"`
	// List of days of the week that the job should execute on. Only valid when frequency is `Week`.
	WeekDays pulumi.StringArrayInput `pulumi:"weekDays"`
}
type ScheduleMonthlyOccurrences struct {
	Day string `pulumi:"day"`
	Occurrence int `pulumi:"occurrence"`
}
var scheduleMonthlyOccurrencesType = reflect.TypeOf((*ScheduleMonthlyOccurrences)(nil)).Elem()

type ScheduleMonthlyOccurrencesInput interface {
	pulumi.Input

	ToScheduleMonthlyOccurrencesOutput() ScheduleMonthlyOccurrencesOutput
	ToScheduleMonthlyOccurrencesOutputWithContext(ctx context.Context) ScheduleMonthlyOccurrencesOutput
}

type ScheduleMonthlyOccurrencesArgs struct {
	Day pulumi.StringInput `pulumi:"day"`
	Occurrence pulumi.IntInput `pulumi:"occurrence"`
}

func (ScheduleMonthlyOccurrencesArgs) ElementType() reflect.Type {
	return scheduleMonthlyOccurrencesType
}

func (a ScheduleMonthlyOccurrencesArgs) ToScheduleMonthlyOccurrencesOutput() ScheduleMonthlyOccurrencesOutput {
	return pulumi.ToOutput(a).(ScheduleMonthlyOccurrencesOutput)
}

func (a ScheduleMonthlyOccurrencesArgs) ToScheduleMonthlyOccurrencesOutputWithContext(ctx context.Context) ScheduleMonthlyOccurrencesOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ScheduleMonthlyOccurrencesOutput)
}

type ScheduleMonthlyOccurrencesOutput struct { *pulumi.OutputState }

func (o ScheduleMonthlyOccurrencesOutput) Day() pulumi.StringOutput {
	return o.Apply(func(v ScheduleMonthlyOccurrences) string {
		return v.Day
	}).(pulumi.StringOutput)
}

func (o ScheduleMonthlyOccurrencesOutput) Occurrence() pulumi.IntOutput {
	return o.Apply(func(v ScheduleMonthlyOccurrences) int {
		return v.Occurrence
	}).(pulumi.IntOutput)
}

func (ScheduleMonthlyOccurrencesOutput) ElementType() reflect.Type {
	return scheduleMonthlyOccurrencesType
}

func (o ScheduleMonthlyOccurrencesOutput) ToScheduleMonthlyOccurrencesOutput() ScheduleMonthlyOccurrencesOutput {
	return o
}

func (o ScheduleMonthlyOccurrencesOutput) ToScheduleMonthlyOccurrencesOutputWithContext(ctx context.Context) ScheduleMonthlyOccurrencesOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ScheduleMonthlyOccurrencesOutput{}) }

var scheduleMonthlyOccurrencesArrayType = reflect.TypeOf((*[]ScheduleMonthlyOccurrences)(nil)).Elem()

type ScheduleMonthlyOccurrencesArrayInput interface {
	pulumi.Input

	ToScheduleMonthlyOccurrencesArrayOutput() ScheduleMonthlyOccurrencesArrayOutput
	ToScheduleMonthlyOccurrencesArrayOutputWithContext(ctx context.Context) ScheduleMonthlyOccurrencesArrayOutput
}

type ScheduleMonthlyOccurrencesArrayArgs []ScheduleMonthlyOccurrencesInput

func (ScheduleMonthlyOccurrencesArrayArgs) ElementType() reflect.Type {
	return scheduleMonthlyOccurrencesArrayType
}

func (a ScheduleMonthlyOccurrencesArrayArgs) ToScheduleMonthlyOccurrencesArrayOutput() ScheduleMonthlyOccurrencesArrayOutput {
	return pulumi.ToOutput(a).(ScheduleMonthlyOccurrencesArrayOutput)
}

func (a ScheduleMonthlyOccurrencesArrayArgs) ToScheduleMonthlyOccurrencesArrayOutputWithContext(ctx context.Context) ScheduleMonthlyOccurrencesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(ScheduleMonthlyOccurrencesArrayOutput)
}

type ScheduleMonthlyOccurrencesArrayOutput struct { *pulumi.OutputState }

func (o ScheduleMonthlyOccurrencesArrayOutput) Index(i pulumi.IntInput) ScheduleMonthlyOccurrencesOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) ScheduleMonthlyOccurrences {
		return vs[0].([]ScheduleMonthlyOccurrences)[vs[1].(int)]
	}).(ScheduleMonthlyOccurrencesOutput)
}

func (ScheduleMonthlyOccurrencesArrayOutput) ElementType() reflect.Type {
	return scheduleMonthlyOccurrencesArrayType
}

func (o ScheduleMonthlyOccurrencesArrayOutput) ToScheduleMonthlyOccurrencesArrayOutput() ScheduleMonthlyOccurrencesArrayOutput {
	return o
}

func (o ScheduleMonthlyOccurrencesArrayOutput) ToScheduleMonthlyOccurrencesArrayOutputWithContext(ctx context.Context) ScheduleMonthlyOccurrencesArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(ScheduleMonthlyOccurrencesArrayOutput{}) }

