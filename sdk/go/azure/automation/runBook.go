// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package automation

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Automation Runbook.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/automation_runbook.html.markdown.
type RunBook struct {
	pulumi.CustomResourceState

	// The name of the automation account in which the Runbook is created. Changing this forces a new resource to be created.
	AccountName pulumi.StringOutput `pulumi:"accountName"`

	// The desired content of the runbook.
	Content pulumi.StringOutput `pulumi:"content"`

	// A description for this credential.
	Description pulumi.StringOutput `pulumi:"description"`

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// Progress log option.
	LogProgress pulumi.BoolOutput `pulumi:"logProgress"`

	// Verbose log option.
	LogVerbose pulumi.BoolOutput `pulumi:"logVerbose"`

	// Specifies the name of the Runbook. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The published runbook content link.
	PublishContentLink RunBookPublishContentLinkOutput `pulumi:"publishContentLink"`

	// The name of the resource group in which the Runbook is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The type of the runbook - can be either `Graph`, `GraphPowerShell`, `GraphPowerShellWorkflow`, `PowerShellWorkflow`, `PowerShell` or `Script`.
	RunbookType pulumi.StringOutput `pulumi:"runbookType"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewRunBook registers a new resource with the given unique name, arguments, and options.
func NewRunBook(ctx *pulumi.Context,
	name string, args *RunBookArgs, opts ...pulumi.ResourceOption) (*RunBook, error) {
	if args == nil || args.AccountName == nil {
		return nil, errors.New("missing required argument 'AccountName'")
	}
	if args == nil || args.LogProgress == nil {
		return nil, errors.New("missing required argument 'LogProgress'")
	}
	if args == nil || args.LogVerbose == nil {
		return nil, errors.New("missing required argument 'LogVerbose'")
	}
	if args == nil || args.PublishContentLink == nil {
		return nil, errors.New("missing required argument 'PublishContentLink'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.RunbookType == nil {
		return nil, errors.New("missing required argument 'RunbookType'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AccountName; i != nil { inputs["accountName"] = i.ToStringOutput() }
		if i := args.Content; i != nil { inputs["content"] = i.ToStringOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.LogProgress; i != nil { inputs["logProgress"] = i.ToBoolOutput() }
		if i := args.LogVerbose; i != nil { inputs["logVerbose"] = i.ToBoolOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.PublishContentLink; i != nil { inputs["publishContentLink"] = i.ToRunBookPublishContentLinkOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.RunbookType; i != nil { inputs["runbookType"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource RunBook
	err := ctx.RegisterResource("azure:automation/runBook:RunBook", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRunBook gets an existing RunBook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRunBook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RunBookState, opts ...pulumi.ResourceOption) (*RunBook, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AccountName; i != nil { inputs["accountName"] = i.ToStringOutput() }
		if i := state.Content; i != nil { inputs["content"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.LogProgress; i != nil { inputs["logProgress"] = i.ToBoolOutput() }
		if i := state.LogVerbose; i != nil { inputs["logVerbose"] = i.ToBoolOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.PublishContentLink; i != nil { inputs["publishContentLink"] = i.ToRunBookPublishContentLinkOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.RunbookType; i != nil { inputs["runbookType"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource RunBook
	err := ctx.ReadResource("azure:automation/runBook:RunBook", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RunBook resources.
type RunBookState struct {
	// The name of the automation account in which the Runbook is created. Changing this forces a new resource to be created.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The desired content of the runbook.
	Content pulumi.StringInput `pulumi:"content"`
	// A description for this credential.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Progress log option.
	LogProgress pulumi.BoolInput `pulumi:"logProgress"`
	// Verbose log option.
	LogVerbose pulumi.BoolInput `pulumi:"logVerbose"`
	// Specifies the name of the Runbook. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The published runbook content link.
	PublishContentLink RunBookPublishContentLinkInput `pulumi:"publishContentLink"`
	// The name of the resource group in which the Runbook is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The type of the runbook - can be either `Graph`, `GraphPowerShell`, `GraphPowerShellWorkflow`, `PowerShellWorkflow`, `PowerShell` or `Script`.
	RunbookType pulumi.StringInput `pulumi:"runbookType"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a RunBook resource.
type RunBookArgs struct {
	// The name of the automation account in which the Runbook is created. Changing this forces a new resource to be created.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The desired content of the runbook.
	Content pulumi.StringInput `pulumi:"content"`
	// A description for this credential.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Progress log option.
	LogProgress pulumi.BoolInput `pulumi:"logProgress"`
	// Verbose log option.
	LogVerbose pulumi.BoolInput `pulumi:"logVerbose"`
	// Specifies the name of the Runbook. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The published runbook content link.
	PublishContentLink RunBookPublishContentLinkInput `pulumi:"publishContentLink"`
	// The name of the resource group in which the Runbook is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The type of the runbook - can be either `Graph`, `GraphPowerShell`, `GraphPowerShellWorkflow`, `PowerShellWorkflow`, `PowerShell` or `Script`.
	RunbookType pulumi.StringInput `pulumi:"runbookType"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
type RunBookPublishContentLink struct {
	Hash *RunBookPublishContentLinkHash `pulumi:"hash"`
	// The uri of the runbook content.
	Uri string `pulumi:"uri"`
	Version *string `pulumi:"version"`
}
var runBookPublishContentLinkType = reflect.TypeOf((*RunBookPublishContentLink)(nil)).Elem()

type RunBookPublishContentLinkInput interface {
	pulumi.Input

	ToRunBookPublishContentLinkOutput() RunBookPublishContentLinkOutput
	ToRunBookPublishContentLinkOutputWithContext(ctx context.Context) RunBookPublishContentLinkOutput
}

type RunBookPublishContentLinkArgs struct {
	Hash RunBookPublishContentLinkHashInput `pulumi:"hash"`
	// The uri of the runbook content.
	Uri pulumi.StringInput `pulumi:"uri"`
	Version pulumi.StringInput `pulumi:"version"`
}

func (RunBookPublishContentLinkArgs) ElementType() reflect.Type {
	return runBookPublishContentLinkType
}

func (a RunBookPublishContentLinkArgs) ToRunBookPublishContentLinkOutput() RunBookPublishContentLinkOutput {
	return pulumi.ToOutput(a).(RunBookPublishContentLinkOutput)
}

func (a RunBookPublishContentLinkArgs) ToRunBookPublishContentLinkOutputWithContext(ctx context.Context) RunBookPublishContentLinkOutput {
	return pulumi.ToOutputWithContext(ctx, a).(RunBookPublishContentLinkOutput)
}

type RunBookPublishContentLinkOutput struct { *pulumi.OutputState }

func (o RunBookPublishContentLinkOutput) Hash() RunBookPublishContentLinkHashOutput {
	return o.Apply(func(v RunBookPublishContentLink) RunBookPublishContentLinkHash {
		if v.Hash == nil { return *new(RunBookPublishContentLinkHash) } else { return *v.Hash }
	}).(RunBookPublishContentLinkHashOutput)
}

// The uri of the runbook content.
func (o RunBookPublishContentLinkOutput) Uri() pulumi.StringOutput {
	return o.Apply(func(v RunBookPublishContentLink) string {
		return v.Uri
	}).(pulumi.StringOutput)
}

func (o RunBookPublishContentLinkOutput) Version() pulumi.StringOutput {
	return o.Apply(func(v RunBookPublishContentLink) string {
		if v.Version == nil { return *new(string) } else { return *v.Version }
	}).(pulumi.StringOutput)
}

func (RunBookPublishContentLinkOutput) ElementType() reflect.Type {
	return runBookPublishContentLinkType
}

func (o RunBookPublishContentLinkOutput) ToRunBookPublishContentLinkOutput() RunBookPublishContentLinkOutput {
	return o
}

func (o RunBookPublishContentLinkOutput) ToRunBookPublishContentLinkOutputWithContext(ctx context.Context) RunBookPublishContentLinkOutput {
	return o
}

func init() { pulumi.RegisterOutputType(RunBookPublishContentLinkOutput{}) }

type RunBookPublishContentLinkHash struct {
	Algorithm string `pulumi:"algorithm"`
	Value string `pulumi:"value"`
}
var runBookPublishContentLinkHashType = reflect.TypeOf((*RunBookPublishContentLinkHash)(nil)).Elem()

type RunBookPublishContentLinkHashInput interface {
	pulumi.Input

	ToRunBookPublishContentLinkHashOutput() RunBookPublishContentLinkHashOutput
	ToRunBookPublishContentLinkHashOutputWithContext(ctx context.Context) RunBookPublishContentLinkHashOutput
}

type RunBookPublishContentLinkHashArgs struct {
	Algorithm pulumi.StringInput `pulumi:"algorithm"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (RunBookPublishContentLinkHashArgs) ElementType() reflect.Type {
	return runBookPublishContentLinkHashType
}

func (a RunBookPublishContentLinkHashArgs) ToRunBookPublishContentLinkHashOutput() RunBookPublishContentLinkHashOutput {
	return pulumi.ToOutput(a).(RunBookPublishContentLinkHashOutput)
}

func (a RunBookPublishContentLinkHashArgs) ToRunBookPublishContentLinkHashOutputWithContext(ctx context.Context) RunBookPublishContentLinkHashOutput {
	return pulumi.ToOutputWithContext(ctx, a).(RunBookPublishContentLinkHashOutput)
}

type RunBookPublishContentLinkHashOutput struct { *pulumi.OutputState }

func (o RunBookPublishContentLinkHashOutput) Algorithm() pulumi.StringOutput {
	return o.Apply(func(v RunBookPublishContentLinkHash) string {
		return v.Algorithm
	}).(pulumi.StringOutput)
}

func (o RunBookPublishContentLinkHashOutput) Value() pulumi.StringOutput {
	return o.Apply(func(v RunBookPublishContentLinkHash) string {
		return v.Value
	}).(pulumi.StringOutput)
}

func (RunBookPublishContentLinkHashOutput) ElementType() reflect.Type {
	return runBookPublishContentLinkHashType
}

func (o RunBookPublishContentLinkHashOutput) ToRunBookPublishContentLinkHashOutput() RunBookPublishContentLinkHashOutput {
	return o
}

func (o RunBookPublishContentLinkHashOutput) ToRunBookPublishContentLinkHashOutputWithContext(ctx context.Context) RunBookPublishContentLinkHashOutput {
	return o
}

func init() { pulumi.RegisterOutputType(RunBookPublishContentLinkHashOutput{}) }

