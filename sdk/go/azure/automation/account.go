// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package automation

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Automation Account.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/automation_account.html.markdown.
type Account struct {
	pulumi.CustomResourceState

	// The Primary Access Key for the DSC Endpoint associated with this Automation Account.
	DscPrimaryAccessKey pulumi.StringOutput `pulumi:"dscPrimaryAccessKey"`

	// The Secondary Access Key for the DSC Endpoint associated with this Automation Account.
	DscSecondaryAccessKey pulumi.StringOutput `pulumi:"dscSecondaryAccessKey"`

	// The DSC Server Endpoint associated with this Automation Account.
	DscServerEndpoint pulumi.StringOutput `pulumi:"dscServerEndpoint"`

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// Specifies the name of the Automation Account. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the resource group in which the Automation Account is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// ) A `sku` block as described below.
	Sku AccountSkuOutput `pulumi:"sku"`

	// The SKU name of the account - only `Basic` is supported at this time.
	SkuName pulumi.StringOutput `pulumi:"skuName"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewAccount registers a new resource with the given unique name, arguments, and options.
func NewAccount(ctx *pulumi.Context,
	name string, args *AccountArgs, opts ...pulumi.ResourceOption) (*Account, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Sku; i != nil { inputs["sku"] = i.ToAccountSkuOutput() }
		if i := args.SkuName; i != nil { inputs["skuName"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Account
	err := ctx.RegisterResource("azure:automation/account:Account", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccount gets an existing Account resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountState, opts ...pulumi.ResourceOption) (*Account, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.DscPrimaryAccessKey; i != nil { inputs["dscPrimaryAccessKey"] = i.ToStringOutput() }
		if i := state.DscSecondaryAccessKey; i != nil { inputs["dscSecondaryAccessKey"] = i.ToStringOutput() }
		if i := state.DscServerEndpoint; i != nil { inputs["dscServerEndpoint"] = i.ToStringOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.Sku; i != nil { inputs["sku"] = i.ToAccountSkuOutput() }
		if i := state.SkuName; i != nil { inputs["skuName"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Account
	err := ctx.ReadResource("azure:automation/account:Account", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Account resources.
type AccountState struct {
	// The Primary Access Key for the DSC Endpoint associated with this Automation Account.
	DscPrimaryAccessKey pulumi.StringInput `pulumi:"dscPrimaryAccessKey"`
	// The Secondary Access Key for the DSC Endpoint associated with this Automation Account.
	DscSecondaryAccessKey pulumi.StringInput `pulumi:"dscSecondaryAccessKey"`
	// The DSC Server Endpoint associated with this Automation Account.
	DscServerEndpoint pulumi.StringInput `pulumi:"dscServerEndpoint"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the Automation Account. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which the Automation Account is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// ) A `sku` block as described below.
	Sku AccountSkuInput `pulumi:"sku"`
	// The SKU name of the account - only `Basic` is supported at this time.
	SkuName pulumi.StringInput `pulumi:"skuName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Account resource.
type AccountArgs struct {
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the Automation Account. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which the Automation Account is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// ) A `sku` block as described below.
	Sku AccountSkuInput `pulumi:"sku"`
	// The SKU name of the account - only `Basic` is supported at this time.
	SkuName pulumi.StringInput `pulumi:"skuName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
type AccountSku struct {
	// Specifies the name of the Automation Account. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
}
var accountSkuType = reflect.TypeOf((*AccountSku)(nil)).Elem()

type AccountSkuInput interface {
	pulumi.Input

	ToAccountSkuOutput() AccountSkuOutput
	ToAccountSkuOutputWithContext(ctx context.Context) AccountSkuOutput
}

type AccountSkuArgs struct {
	// Specifies the name of the Automation Account. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
}

func (AccountSkuArgs) ElementType() reflect.Type {
	return accountSkuType
}

func (a AccountSkuArgs) ToAccountSkuOutput() AccountSkuOutput {
	return pulumi.ToOutput(a).(AccountSkuOutput)
}

func (a AccountSkuArgs) ToAccountSkuOutputWithContext(ctx context.Context) AccountSkuOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AccountSkuOutput)
}

type AccountSkuOutput struct { *pulumi.OutputState }

// Specifies the name of the Automation Account. Changing this forces a new resource to be created.
func (o AccountSkuOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v AccountSku) string {
		if v.Name == nil { return *new(string) } else { return *v.Name }
	}).(pulumi.StringOutput)
}

func (AccountSkuOutput) ElementType() reflect.Type {
	return accountSkuType
}

func (o AccountSkuOutput) ToAccountSkuOutput() AccountSkuOutput {
	return o
}

func (o AccountSkuOutput) ToAccountSkuOutputWithContext(ctx context.Context) AccountSkuOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AccountSkuOutput{}) }

