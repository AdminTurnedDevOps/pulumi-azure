// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package automation

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Automation Credential.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/automation_credential.html.markdown.
type Credential struct {
	pulumi.CustomResourceState

	AccountName pulumi.StringOutput `pulumi:"accountName"`

	// The name of the automation account in which the Credential is created. Changing this forces a new resource to be created.
	AutomationAccountName pulumi.StringOutput `pulumi:"automationAccountName"`

	// The description associated with this Automation Credential.
	Description pulumi.StringOutput `pulumi:"description"`

	// Specifies the name of the Credential. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The password associated with this Automation Credential.
	Password pulumi.StringOutput `pulumi:"password"`

	// The name of the resource group in which the Credential is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The username associated with this Automation Credential.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewCredential registers a new resource with the given unique name, arguments, and options.
func NewCredential(ctx *pulumi.Context,
	name string, args *CredentialArgs, opts ...pulumi.ResourceOption) (*Credential, error) {
	if args == nil || args.Password == nil {
		return nil, errors.New("missing required argument 'Password'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AccountName; i != nil { inputs["accountName"] = i.ToStringOutput() }
		if i := args.AutomationAccountName; i != nil { inputs["automationAccountName"] = i.ToStringOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Password; i != nil { inputs["password"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Username; i != nil { inputs["username"] = i.ToStringOutput() }
	}
	var resource Credential
	err := ctx.RegisterResource("azure:automation/credential:Credential", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCredential gets an existing Credential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CredentialState, opts ...pulumi.ResourceOption) (*Credential, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AccountName; i != nil { inputs["accountName"] = i.ToStringOutput() }
		if i := state.AutomationAccountName; i != nil { inputs["automationAccountName"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Password; i != nil { inputs["password"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.Username; i != nil { inputs["username"] = i.ToStringOutput() }
	}
	var resource Credential
	err := ctx.ReadResource("azure:automation/credential:Credential", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Credential resources.
type CredentialState struct {
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the automation account in which the Credential is created. Changing this forces a new resource to be created.
	AutomationAccountName pulumi.StringInput `pulumi:"automationAccountName"`
	// The description associated with this Automation Credential.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies the name of the Credential. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The password associated with this Automation Credential.
	Password pulumi.StringInput `pulumi:"password"`
	// The name of the resource group in which the Credential is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The username associated with this Automation Credential.
	Username pulumi.StringInput `pulumi:"username"`
}

// The set of arguments for constructing a Credential resource.
type CredentialArgs struct {
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the automation account in which the Credential is created. Changing this forces a new resource to be created.
	AutomationAccountName pulumi.StringInput `pulumi:"automationAccountName"`
	// The description associated with this Automation Credential.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies the name of the Credential. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The password associated with this Automation Credential.
	Password pulumi.StringInput `pulumi:"password"`
	// The name of the resource group in which the Credential is created. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The username associated with this Automation Credential.
	Username pulumi.StringInput `pulumi:"username"`
}
