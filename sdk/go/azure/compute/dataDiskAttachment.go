// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages attaching a Disk to a Virtual Machine.
// 
// > **NOTE:** Data Disks can be attached either directly on the `compute.VirtualMachine` resource, or using the `compute.DataDiskAttachment` resource - but the two cannot be used together. If both are used against the same Virtual Machine, spurious changes will occur.
// 
// > **Please Note:** only Managed Disks are supported via this separate resource, Unmanaged Disks can be attached using the `storageDataDisk` block in the `compute.VirtualMachine` resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/virtual_machine_data_disk_attachment.html.markdown.
type DataDiskAttachment struct {
	pulumi.CustomResourceState

	// Specifies the caching requirements for this Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
	Caching pulumi.StringOutput `pulumi:"caching"`

	// The Create Option of the Data Disk, such as `Empty` or `Attach`. Defaults to `Attach`. Changing this forces a new resource to be created.
	CreateOption pulumi.StringOutput `pulumi:"createOption"`

	// The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.
	Lun pulumi.IntOutput `pulumi:"lun"`

	// The ID of an existing Managed Disk which should be attached. Changing this forces a new resource to be created.
	ManagedDiskId pulumi.StringOutput `pulumi:"managedDiskId"`

	// The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.
	VirtualMachineId pulumi.StringOutput `pulumi:"virtualMachineId"`

	// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
	WriteAcceleratorEnabled pulumi.BoolOutput `pulumi:"writeAcceleratorEnabled"`
}

// NewDataDiskAttachment registers a new resource with the given unique name, arguments, and options.
func NewDataDiskAttachment(ctx *pulumi.Context,
	name string, args *DataDiskAttachmentArgs, opts ...pulumi.ResourceOption) (*DataDiskAttachment, error) {
	if args == nil || args.Caching == nil {
		return nil, errors.New("missing required argument 'Caching'")
	}
	if args == nil || args.Lun == nil {
		return nil, errors.New("missing required argument 'Lun'")
	}
	if args == nil || args.ManagedDiskId == nil {
		return nil, errors.New("missing required argument 'ManagedDiskId'")
	}
	if args == nil || args.VirtualMachineId == nil {
		return nil, errors.New("missing required argument 'VirtualMachineId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Caching; i != nil { inputs["caching"] = i.ToStringOutput() }
		if i := args.CreateOption; i != nil { inputs["createOption"] = i.ToStringOutput() }
		if i := args.Lun; i != nil { inputs["lun"] = i.ToIntOutput() }
		if i := args.ManagedDiskId; i != nil { inputs["managedDiskId"] = i.ToStringOutput() }
		if i := args.VirtualMachineId; i != nil { inputs["virtualMachineId"] = i.ToStringOutput() }
		if i := args.WriteAcceleratorEnabled; i != nil { inputs["writeAcceleratorEnabled"] = i.ToBoolOutput() }
	}
	var resource DataDiskAttachment
	err := ctx.RegisterResource("azure:compute/dataDiskAttachment:DataDiskAttachment", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataDiskAttachment gets an existing DataDiskAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataDiskAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataDiskAttachmentState, opts ...pulumi.ResourceOption) (*DataDiskAttachment, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Caching; i != nil { inputs["caching"] = i.ToStringOutput() }
		if i := state.CreateOption; i != nil { inputs["createOption"] = i.ToStringOutput() }
		if i := state.Lun; i != nil { inputs["lun"] = i.ToIntOutput() }
		if i := state.ManagedDiskId; i != nil { inputs["managedDiskId"] = i.ToStringOutput() }
		if i := state.VirtualMachineId; i != nil { inputs["virtualMachineId"] = i.ToStringOutput() }
		if i := state.WriteAcceleratorEnabled; i != nil { inputs["writeAcceleratorEnabled"] = i.ToBoolOutput() }
	}
	var resource DataDiskAttachment
	err := ctx.ReadResource("azure:compute/dataDiskAttachment:DataDiskAttachment", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataDiskAttachment resources.
type DataDiskAttachmentState struct {
	// Specifies the caching requirements for this Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
	Caching pulumi.StringInput `pulumi:"caching"`
	// The Create Option of the Data Disk, such as `Empty` or `Attach`. Defaults to `Attach`. Changing this forces a new resource to be created.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.
	Lun pulumi.IntInput `pulumi:"lun"`
	// The ID of an existing Managed Disk which should be attached. Changing this forces a new resource to be created.
	ManagedDiskId pulumi.StringInput `pulumi:"managedDiskId"`
	// The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.
	VirtualMachineId pulumi.StringInput `pulumi:"virtualMachineId"`
	// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
	WriteAcceleratorEnabled pulumi.BoolInput `pulumi:"writeAcceleratorEnabled"`
}

// The set of arguments for constructing a DataDiskAttachment resource.
type DataDiskAttachmentArgs struct {
	// Specifies the caching requirements for this Data Disk. Possible values include `None`, `ReadOnly` and `ReadWrite`.
	Caching pulumi.StringInput `pulumi:"caching"`
	// The Create Option of the Data Disk, such as `Empty` or `Attach`. Defaults to `Attach`. Changing this forces a new resource to be created.
	CreateOption pulumi.StringInput `pulumi:"createOption"`
	// The Logical Unit Number of the Data Disk, which needs to be unique within the Virtual Machine. Changing this forces a new resource to be created.
	Lun pulumi.IntInput `pulumi:"lun"`
	// The ID of an existing Managed Disk which should be attached. Changing this forces a new resource to be created.
	ManagedDiskId pulumi.StringInput `pulumi:"managedDiskId"`
	// The ID of the Virtual Machine to which the Data Disk should be attached. Changing this forces a new resource to be created.
	VirtualMachineId pulumi.StringInput `pulumi:"virtualMachineId"`
	// Specifies if Write Accelerator is enabled on the disk. This can only be enabled on `Premium_LRS` managed disks with no caching and [M-Series VMs](https://docs.microsoft.com/en-us/azure/virtual-machines/workloads/sap/how-to-enable-write-accelerator). Defaults to `false`.
	WriteAcceleratorEnabled pulumi.BoolInput `pulumi:"writeAcceleratorEnabled"`
}
