// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/disk_encryption_set.html.markdown.
type DiskEncryptionSet struct {
	s *pulumi.ResourceState
}

// NewDiskEncryptionSet registers a new resource with the given unique name, arguments, and options.
func NewDiskEncryptionSet(ctx *pulumi.Context,
	name string, args *DiskEncryptionSetArgs, opts ...pulumi.ResourceOpt) (*DiskEncryptionSet, error) {
	if args == nil || args.Identity == nil {
		return nil, errors.New("missing required argument 'Identity'")
	}
	if args == nil || args.KeyVaultKeyId == nil {
		return nil, errors.New("missing required argument 'KeyVaultKeyId'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["identity"] = nil
		inputs["keyVaultKeyId"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["resourceGroupName"] = nil
		inputs["tags"] = nil
	} else {
		inputs["identity"] = args.Identity
		inputs["keyVaultKeyId"] = args.KeyVaultKeyId
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("azure:compute/diskEncryptionSet:DiskEncryptionSet", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DiskEncryptionSet{s: s}, nil
}

// GetDiskEncryptionSet gets an existing DiskEncryptionSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiskEncryptionSet(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DiskEncryptionSetState, opts ...pulumi.ResourceOpt) (*DiskEncryptionSet, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["identity"] = state.Identity
		inputs["keyVaultKeyId"] = state.KeyVaultKeyId
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("azure:compute/diskEncryptionSet:DiskEncryptionSet", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DiskEncryptionSet{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DiskEncryptionSet) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DiskEncryptionSet) ID() pulumi.IDOutput {
	return r.s.ID()
}

// A `identity` block defined below.
func (r *DiskEncryptionSet) Identity() pulumi.Output {
	return r.s.State["identity"]
}

// Specifies the URL to a Key Vault Key (either from a Key Vault Key, or the Key URL for the Key Vault Secret).
func (r *DiskEncryptionSet) KeyVaultKeyId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["keyVaultKeyId"])
}

// Specifies the Azure Region where the Disk Encryption Set exists. Changing this forces a new resource to be created.
func (r *DiskEncryptionSet) Location() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["location"])
}

// The name of the Disk Encryption Set. Changing this forces a new resource to be created.
func (r *DiskEncryptionSet) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Specifies the name of the Resource Group where the Disk Encryption Set should exist. Changing this forces a new resource to be created.
func (r *DiskEncryptionSet) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// A mapping of tags to assign to the Disk Encryption Set.
func (r *DiskEncryptionSet) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering DiskEncryptionSet resources.
type DiskEncryptionSetState struct {
	// A `identity` block defined below.
	Identity interface{}
	// Specifies the URL to a Key Vault Key (either from a Key Vault Key, or the Key URL for the Key Vault Secret).
	KeyVaultKeyId interface{}
	// Specifies the Azure Region where the Disk Encryption Set exists. Changing this forces a new resource to be created.
	Location interface{}
	// The name of the Disk Encryption Set. Changing this forces a new resource to be created.
	Name interface{}
	// Specifies the name of the Resource Group where the Disk Encryption Set should exist. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A mapping of tags to assign to the Disk Encryption Set.
	Tags interface{}
}

// The set of arguments for constructing a DiskEncryptionSet resource.
type DiskEncryptionSetArgs struct {
	// A `identity` block defined below.
	Identity interface{}
	// Specifies the URL to a Key Vault Key (either from a Key Vault Key, or the Key URL for the Key Vault Secret).
	KeyVaultKeyId interface{}
	// Specifies the Azure Region where the Disk Encryption Set exists. Changing this forces a new resource to be created.
	Location interface{}
	// The name of the Disk Encryption Set. Changing this forces a new resource to be created.
	Name interface{}
	// Specifies the name of the Resource Group where the Disk Encryption Set should exist. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A mapping of tags to assign to the Disk Encryption Set.
	Tags interface{}
}
