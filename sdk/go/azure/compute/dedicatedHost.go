// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manage a Dedicated Host within a Dedicated Host Group.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/dedicated_host.html.markdown.
type DedicatedHost struct {
	s *pulumi.ResourceState
}

// NewDedicatedHost registers a new resource with the given unique name, arguments, and options.
func NewDedicatedHost(ctx *pulumi.Context,
	name string, args *DedicatedHostArgs, opts ...pulumi.ResourceOpt) (*DedicatedHost, error) {
	if args == nil || args.DedicatedHostGroupId == nil {
		return nil, errors.New("missing required argument 'DedicatedHostGroupId'")
	}
	if args == nil || args.PlatformFaultDomain == nil {
		return nil, errors.New("missing required argument 'PlatformFaultDomain'")
	}
	if args == nil || args.SkuName == nil {
		return nil, errors.New("missing required argument 'SkuName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["autoReplaceOnFailure"] = nil
		inputs["dedicatedHostGroupId"] = nil
		inputs["licenseType"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["platformFaultDomain"] = nil
		inputs["skuName"] = nil
		inputs["tags"] = nil
	} else {
		inputs["autoReplaceOnFailure"] = args.AutoReplaceOnFailure
		inputs["dedicatedHostGroupId"] = args.DedicatedHostGroupId
		inputs["licenseType"] = args.LicenseType
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["platformFaultDomain"] = args.PlatformFaultDomain
		inputs["skuName"] = args.SkuName
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("azure:compute/dedicatedHost:DedicatedHost", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DedicatedHost{s: s}, nil
}

// GetDedicatedHost gets an existing DedicatedHost resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDedicatedHost(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DedicatedHostState, opts ...pulumi.ResourceOpt) (*DedicatedHost, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["autoReplaceOnFailure"] = state.AutoReplaceOnFailure
		inputs["dedicatedHostGroupId"] = state.DedicatedHostGroupId
		inputs["licenseType"] = state.LicenseType
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["platformFaultDomain"] = state.PlatformFaultDomain
		inputs["skuName"] = state.SkuName
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("azure:compute/dedicatedHost:DedicatedHost", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DedicatedHost{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DedicatedHost) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DedicatedHost) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Should the Dedicated Host automatically be replaced in case of a Hardware Failure? Defaults to `true`.
func (r *DedicatedHost) AutoReplaceOnFailure() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["autoReplaceOnFailure"])
}

// Specifies the ID of the Dedicated Host Group where the Dedicated Host should exist. Changing this forces a new resource to be created.
func (r *DedicatedHost) DedicatedHostGroupId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["dedicatedHostGroupId"])
}

// Specifies the software license type that will be applied to the VMs deployed on the Dedicated Host. Possible values are `None`, `Windows_Server_Hybrid` and `Windows_Server_Perpetual`. Defaults to `None`.
func (r *DedicatedHost) LicenseType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["licenseType"])
}

// Specify the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (r *DedicatedHost) Location() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["location"])
}

// Specifies the name of this Dedicated Host. Changing this forces a new resource to be created.
func (r *DedicatedHost) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Specify the fault domain of the Dedicated Host Group in which to create the Dedicated Host. Changing this forces a new resource to be created.
func (r *DedicatedHost) PlatformFaultDomain() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["platformFaultDomain"])
}

// Specify the sku name of the Dedicated Host. Possible values are `DSv3-Type1`, `ESv3-Type1`, `FSv2-Type2`. Changing this forces a new resource to be created.
func (r *DedicatedHost) SkuName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["skuName"])
}

// A mapping of tags to assign to the resource.
func (r *DedicatedHost) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering DedicatedHost resources.
type DedicatedHostState struct {
	// Should the Dedicated Host automatically be replaced in case of a Hardware Failure? Defaults to `true`.
	AutoReplaceOnFailure interface{}
	// Specifies the ID of the Dedicated Host Group where the Dedicated Host should exist. Changing this forces a new resource to be created.
	DedicatedHostGroupId interface{}
	// Specifies the software license type that will be applied to the VMs deployed on the Dedicated Host. Possible values are `None`, `Windows_Server_Hybrid` and `Windows_Server_Perpetual`. Defaults to `None`.
	LicenseType interface{}
	// Specify the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// Specifies the name of this Dedicated Host. Changing this forces a new resource to be created.
	Name interface{}
	// Specify the fault domain of the Dedicated Host Group in which to create the Dedicated Host. Changing this forces a new resource to be created.
	PlatformFaultDomain interface{}
	// Specify the sku name of the Dedicated Host. Possible values are `DSv3-Type1`, `ESv3-Type1`, `FSv2-Type2`. Changing this forces a new resource to be created.
	SkuName interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}

// The set of arguments for constructing a DedicatedHost resource.
type DedicatedHostArgs struct {
	// Should the Dedicated Host automatically be replaced in case of a Hardware Failure? Defaults to `true`.
	AutoReplaceOnFailure interface{}
	// Specifies the ID of the Dedicated Host Group where the Dedicated Host should exist. Changing this forces a new resource to be created.
	DedicatedHostGroupId interface{}
	// Specifies the software license type that will be applied to the VMs deployed on the Dedicated Host. Possible values are `None`, `Windows_Server_Hybrid` and `Windows_Server_Perpetual`. Defaults to `None`.
	LicenseType interface{}
	// Specify the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// Specifies the name of this Dedicated Host. Changing this forces a new resource to be created.
	Name interface{}
	// Specify the fault domain of the Dedicated Host Group in which to create the Dedicated Host. Changing this forces a new resource to be created.
	PlatformFaultDomain interface{}
	// Specify the sku name of the Dedicated Host. Possible values are `DSv3-Type1`, `ESv3-Type1`, `FSv2-Type2`. Changing this forces a new resource to be created.
	SkuName interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}
