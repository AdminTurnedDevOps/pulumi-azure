// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Bastion Host Instance.
// 
// > **Note:** Bastion Host Instances are a preview feature in Azure, and therefore are only supported in a select number of regions. [Read more](https://docs.microsoft.com/en-us/azure/bastion/bastion-faq).
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/bastion_host.html.markdown.
type BastionHost struct {
	pulumi.CustomResourceState

	// The FQDN for the Azure Bastion Host.
	DnsName pulumi.StringOutput `pulumi:"dnsName"`

	// A `ipConfiguration` block as defined below.
	IpConfiguration BastionHostIpConfigurationOutput `pulumi:"ipConfiguration"`

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// Specifies the name of the Bastion Host. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the resource group in which to create the Bastion Host.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewBastionHost registers a new resource with the given unique name, arguments, and options.
func NewBastionHost(ctx *pulumi.Context,
	name string, args *BastionHostArgs, opts ...pulumi.ResourceOption) (*BastionHost, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.IpConfiguration; i != nil { inputs["ipConfiguration"] = i.ToBastionHostIpConfigurationOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource BastionHost
	err := ctx.RegisterResource("azure:compute/bastionHost:BastionHost", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBastionHost gets an existing BastionHost resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBastionHost(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BastionHostState, opts ...pulumi.ResourceOption) (*BastionHost, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.DnsName; i != nil { inputs["dnsName"] = i.ToStringOutput() }
		if i := state.IpConfiguration; i != nil { inputs["ipConfiguration"] = i.ToBastionHostIpConfigurationOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource BastionHost
	err := ctx.ReadResource("azure:compute/bastionHost:BastionHost", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BastionHost resources.
type BastionHostState struct {
	// The FQDN for the Azure Bastion Host.
	DnsName pulumi.StringInput `pulumi:"dnsName"`
	// A `ipConfiguration` block as defined below.
	IpConfiguration BastionHostIpConfigurationInput `pulumi:"ipConfiguration"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the Bastion Host. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which to create the Bastion Host.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a BastionHost resource.
type BastionHostArgs struct {
	// A `ipConfiguration` block as defined below.
	IpConfiguration BastionHostIpConfigurationInput `pulumi:"ipConfiguration"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the Bastion Host. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which to create the Bastion Host.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
type BastionHostIpConfiguration struct {
	// Specifies the name of the Bastion Host. Changing this forces a new resource to be created.
	Name string `pulumi:"name"`
	PublicIpAddressId string `pulumi:"publicIpAddressId"`
	SubnetId string `pulumi:"subnetId"`
}
var bastionHostIpConfigurationType = reflect.TypeOf((*BastionHostIpConfiguration)(nil)).Elem()

type BastionHostIpConfigurationInput interface {
	pulumi.Input

	ToBastionHostIpConfigurationOutput() BastionHostIpConfigurationOutput
	ToBastionHostIpConfigurationOutputWithContext(ctx context.Context) BastionHostIpConfigurationOutput
}

type BastionHostIpConfigurationArgs struct {
	// Specifies the name of the Bastion Host. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	PublicIpAddressId pulumi.StringInput `pulumi:"publicIpAddressId"`
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (BastionHostIpConfigurationArgs) ElementType() reflect.Type {
	return bastionHostIpConfigurationType
}

func (a BastionHostIpConfigurationArgs) ToBastionHostIpConfigurationOutput() BastionHostIpConfigurationOutput {
	return pulumi.ToOutput(a).(BastionHostIpConfigurationOutput)
}

func (a BastionHostIpConfigurationArgs) ToBastionHostIpConfigurationOutputWithContext(ctx context.Context) BastionHostIpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, a).(BastionHostIpConfigurationOutput)
}

type BastionHostIpConfigurationOutput struct { *pulumi.OutputState }

// Specifies the name of the Bastion Host. Changing this forces a new resource to be created.
func (o BastionHostIpConfigurationOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v BastionHostIpConfiguration) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o BastionHostIpConfigurationOutput) PublicIpAddressId() pulumi.StringOutput {
	return o.Apply(func(v BastionHostIpConfiguration) string {
		return v.PublicIpAddressId
	}).(pulumi.StringOutput)
}

func (o BastionHostIpConfigurationOutput) SubnetId() pulumi.StringOutput {
	return o.Apply(func(v BastionHostIpConfiguration) string {
		return v.SubnetId
	}).(pulumi.StringOutput)
}

func (BastionHostIpConfigurationOutput) ElementType() reflect.Type {
	return bastionHostIpConfigurationType
}

func (o BastionHostIpConfigurationOutput) ToBastionHostIpConfigurationOutput() BastionHostIpConfigurationOutput {
	return o
}

func (o BastionHostIpConfigurationOutput) ToBastionHostIpConfigurationOutputWithContext(ctx context.Context) BastionHostIpConfigurationOutput {
	return o
}

func init() { pulumi.RegisterOutputType(BastionHostIpConfigurationOutput{}) }

