// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Virtual Machine Extension to provide post deployment configuration
// and run automated tasks.
// 
// > **NOTE:** Custom Script Extensions for Linux & Windows require that the `commandToExecute` returns a `0` exit code to be classified as successfully deployed. You can achieve this by appending `exit 0` to the end of your `commandToExecute`.
// 
// > **NOTE:** Custom Script Extensions require that the Azure Virtual Machine Guest Agent is running on the Virtual Machine.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/virtual_machine_extension.html.markdown.
type Extension struct {
	pulumi.CustomResourceState

	// Specifies if the platform deploys
	// the latest minor version update to the `typeHandlerVersion` specified.
	AutoUpgradeMinorVersion pulumi.BoolOutput `pulumi:"autoUpgradeMinorVersion"`

	// The location where the extension is created. Changing
	// this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// The name of the virtual machine extension peering. Changing
	// this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The protectedSettings passed to the
	// extension, like settings, these are specified as a JSON object in a string.
	ProtectedSettings pulumi.StringOutput `pulumi:"protectedSettings"`

	// The publisher of the extension, available publishers
	// can be found by using the Azure CLI.
	Publisher pulumi.StringOutput `pulumi:"publisher"`

	// The name of the resource group in which to
	// create the virtual network. Changing this forces a new resource to be
	// created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The settings passed to the extension, these are
	// specified as a JSON object in a string.
	Settings pulumi.StringOutput `pulumi:"settings"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The type of extension, available types for a publisher can
	// be found using the Azure CLI.
	Type pulumi.StringOutput `pulumi:"type"`

	// Specifies the version of the extension to
	// use, available versions can be found using the Azure CLI.
	TypeHandlerVersion pulumi.StringOutput `pulumi:"typeHandlerVersion"`

	// The name of the virtual machine. Changing
	// this forces a new resource to be created.
	VirtualMachineName pulumi.StringOutput `pulumi:"virtualMachineName"`
}

// NewExtension registers a new resource with the given unique name, arguments, and options.
func NewExtension(ctx *pulumi.Context,
	name string, args *ExtensionArgs, opts ...pulumi.ResourceOption) (*Extension, error) {
	if args == nil || args.Publisher == nil {
		return nil, errors.New("missing required argument 'Publisher'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil || args.TypeHandlerVersion == nil {
		return nil, errors.New("missing required argument 'TypeHandlerVersion'")
	}
	if args == nil || args.VirtualMachineName == nil {
		return nil, errors.New("missing required argument 'VirtualMachineName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AutoUpgradeMinorVersion; i != nil { inputs["autoUpgradeMinorVersion"] = i.ToBoolOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ProtectedSettings; i != nil { inputs["protectedSettings"] = i.ToStringOutput() }
		if i := args.Publisher; i != nil { inputs["publisher"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Settings; i != nil { inputs["settings"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.Type; i != nil { inputs["type"] = i.ToStringOutput() }
		if i := args.TypeHandlerVersion; i != nil { inputs["typeHandlerVersion"] = i.ToStringOutput() }
		if i := args.VirtualMachineName; i != nil { inputs["virtualMachineName"] = i.ToStringOutput() }
	}
	var resource Extension
	err := ctx.RegisterResource("azure:compute/extension:Extension", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtension gets an existing Extension resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtension(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtensionState, opts ...pulumi.ResourceOption) (*Extension, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AutoUpgradeMinorVersion; i != nil { inputs["autoUpgradeMinorVersion"] = i.ToBoolOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ProtectedSettings; i != nil { inputs["protectedSettings"] = i.ToStringOutput() }
		if i := state.Publisher; i != nil { inputs["publisher"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.Settings; i != nil { inputs["settings"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.Type; i != nil { inputs["type"] = i.ToStringOutput() }
		if i := state.TypeHandlerVersion; i != nil { inputs["typeHandlerVersion"] = i.ToStringOutput() }
		if i := state.VirtualMachineName; i != nil { inputs["virtualMachineName"] = i.ToStringOutput() }
	}
	var resource Extension
	err := ctx.ReadResource("azure:compute/extension:Extension", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Extension resources.
type ExtensionState struct {
	// Specifies if the platform deploys
	// the latest minor version update to the `typeHandlerVersion` specified.
	AutoUpgradeMinorVersion pulumi.BoolInput `pulumi:"autoUpgradeMinorVersion"`
	// The location where the extension is created. Changing
	// this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the virtual machine extension peering. Changing
	// this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The protectedSettings passed to the
	// extension, like settings, these are specified as a JSON object in a string.
	ProtectedSettings pulumi.StringInput `pulumi:"protectedSettings"`
	// The publisher of the extension, available publishers
	// can be found by using the Azure CLI.
	Publisher pulumi.StringInput `pulumi:"publisher"`
	// The name of the resource group in which to
	// create the virtual network. Changing this forces a new resource to be
	// created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The settings passed to the extension, these are
	// specified as a JSON object in a string.
	Settings pulumi.StringInput `pulumi:"settings"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The type of extension, available types for a publisher can
	// be found using the Azure CLI.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies the version of the extension to
	// use, available versions can be found using the Azure CLI.
	TypeHandlerVersion pulumi.StringInput `pulumi:"typeHandlerVersion"`
	// The name of the virtual machine. Changing
	// this forces a new resource to be created.
	VirtualMachineName pulumi.StringInput `pulumi:"virtualMachineName"`
}

// The set of arguments for constructing a Extension resource.
type ExtensionArgs struct {
	// Specifies if the platform deploys
	// the latest minor version update to the `typeHandlerVersion` specified.
	AutoUpgradeMinorVersion pulumi.BoolInput `pulumi:"autoUpgradeMinorVersion"`
	// The location where the extension is created. Changing
	// this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The name of the virtual machine extension peering. Changing
	// this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The protectedSettings passed to the
	// extension, like settings, these are specified as a JSON object in a string.
	ProtectedSettings pulumi.StringInput `pulumi:"protectedSettings"`
	// The publisher of the extension, available publishers
	// can be found by using the Azure CLI.
	Publisher pulumi.StringInput `pulumi:"publisher"`
	// The name of the resource group in which to
	// create the virtual network. Changing this forces a new resource to be
	// created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The settings passed to the extension, these are
	// specified as a JSON object in a string.
	Settings pulumi.StringInput `pulumi:"settings"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The type of extension, available types for a publisher can
	// be found using the Azure CLI.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies the version of the extension to
	// use, available versions can be found using the Azure CLI.
	TypeHandlerVersion pulumi.StringInput `pulumi:"typeHandlerVersion"`
	// The name of the virtual machine. Changing
	// this forces a new resource to be created.
	VirtualMachineName pulumi.StringInput `pulumi:"virtualMachineName"`
}
