// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages Azure Batch Application instance.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/batch_application.html.markdown.
type Application struct {
	pulumi.CustomResourceState

	// The name of the Batch account. Changing this forces a new resource to be created.
	AccountName pulumi.StringOutput `pulumi:"accountName"`

	// A value indicating whether packages within the application may be overwritten using the same version string. Defaults to `true`.
	AllowUpdates pulumi.BoolOutput `pulumi:"allowUpdates"`

	// The package to use if a client requests the application but does not specify a version. This property can only be set to the name of an existing package.
	DefaultVersion pulumi.StringOutput `pulumi:"defaultVersion"`

	// The display name for the application.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`

	// The name of the application. This must be unique within the account. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the resource group that contains the Batch account. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil || args.AccountName == nil {
		return nil, errors.New("missing required argument 'AccountName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AccountName; i != nil { inputs["accountName"] = i.ToStringOutput() }
		if i := args.AllowUpdates; i != nil { inputs["allowUpdates"] = i.ToBoolOutput() }
		if i := args.DefaultVersion; i != nil { inputs["defaultVersion"] = i.ToStringOutput() }
		if i := args.DisplayName; i != nil { inputs["displayName"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
	}
	var resource Application
	err := ctx.RegisterResource("azure:batch/application:Application", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AccountName; i != nil { inputs["accountName"] = i.ToStringOutput() }
		if i := state.AllowUpdates; i != nil { inputs["allowUpdates"] = i.ToBoolOutput() }
		if i := state.DefaultVersion; i != nil { inputs["defaultVersion"] = i.ToStringOutput() }
		if i := state.DisplayName; i != nil { inputs["displayName"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
	}
	var resource Application
	err := ctx.ReadResource("azure:batch/application:Application", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type ApplicationState struct {
	// The name of the Batch account. Changing this forces a new resource to be created.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// A value indicating whether packages within the application may be overwritten using the same version string. Defaults to `true`.
	AllowUpdates pulumi.BoolInput `pulumi:"allowUpdates"`
	// The package to use if a client requests the application but does not specify a version. This property can only be set to the name of an existing package.
	DefaultVersion pulumi.StringInput `pulumi:"defaultVersion"`
	// The display name for the application.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The name of the application. This must be unique within the account. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group that contains the Batch account. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// The name of the Batch account. Changing this forces a new resource to be created.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// A value indicating whether packages within the application may be overwritten using the same version string. Defaults to `true`.
	AllowUpdates pulumi.BoolInput `pulumi:"allowUpdates"`
	// The package to use if a client requests the application but does not specify a version. This property can only be set to the name of an existing package.
	DefaultVersion pulumi.StringInput `pulumi:"defaultVersion"`
	// The display name for the application.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The name of the application. This must be unique within the account. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group that contains the Batch account. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}
