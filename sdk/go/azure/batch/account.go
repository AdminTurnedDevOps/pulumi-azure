// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package batch

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Azure Batch account.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/batch_account.html.markdown.
type Account struct {
	pulumi.CustomResourceState

	// The account endpoint used to interact with the Batch service.
	AccountEndpoint pulumi.StringOutput `pulumi:"accountEndpoint"`

	// A `keyVaultReference` block that describes the Azure KeyVault reference to use when deploying the Azure Batch account using the `UserSubscription` pool allocation mode. 
	KeyVaultReference AccountKeyVaultReferenceOutput `pulumi:"keyVaultReference"`

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// Specifies the name of the Batch account. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// Specifies the mode to use for pool allocation. Possible values are `BatchService` or `UserSubscription`. Defaults to `BatchService`.
	PoolAllocationMode pulumi.StringOutput `pulumi:"poolAllocationMode"`

	// The Batch account primary access key.
	PrimaryAccessKey pulumi.StringOutput `pulumi:"primaryAccessKey"`

	// The name of the resource group in which to create the Batch account. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The Batch account secondary access key.
	SecondaryAccessKey pulumi.StringOutput `pulumi:"secondaryAccessKey"`

	// Specifies the storage account to use for the Batch account. If not specified, Azure Batch will manage the storage.
	StorageAccountId pulumi.StringOutput `pulumi:"storageAccountId"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewAccount registers a new resource with the given unique name, arguments, and options.
func NewAccount(ctx *pulumi.Context,
	name string, args *AccountArgs, opts ...pulumi.ResourceOption) (*Account, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.KeyVaultReference; i != nil { inputs["keyVaultReference"] = i.ToAccountKeyVaultReferenceOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.PoolAllocationMode; i != nil { inputs["poolAllocationMode"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.StorageAccountId; i != nil { inputs["storageAccountId"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Account
	err := ctx.RegisterResource("azure:batch/account:Account", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccount gets an existing Account resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountState, opts ...pulumi.ResourceOption) (*Account, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AccountEndpoint; i != nil { inputs["accountEndpoint"] = i.ToStringOutput() }
		if i := state.KeyVaultReference; i != nil { inputs["keyVaultReference"] = i.ToAccountKeyVaultReferenceOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.PoolAllocationMode; i != nil { inputs["poolAllocationMode"] = i.ToStringOutput() }
		if i := state.PrimaryAccessKey; i != nil { inputs["primaryAccessKey"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.SecondaryAccessKey; i != nil { inputs["secondaryAccessKey"] = i.ToStringOutput() }
		if i := state.StorageAccountId; i != nil { inputs["storageAccountId"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource Account
	err := ctx.ReadResource("azure:batch/account:Account", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Account resources.
type AccountState struct {
	// The account endpoint used to interact with the Batch service.
	AccountEndpoint pulumi.StringInput `pulumi:"accountEndpoint"`
	// A `keyVaultReference` block that describes the Azure KeyVault reference to use when deploying the Azure Batch account using the `UserSubscription` pool allocation mode. 
	KeyVaultReference AccountKeyVaultReferenceInput `pulumi:"keyVaultReference"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the Batch account. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the mode to use for pool allocation. Possible values are `BatchService` or `UserSubscription`. Defaults to `BatchService`.
	PoolAllocationMode pulumi.StringInput `pulumi:"poolAllocationMode"`
	// The Batch account primary access key.
	PrimaryAccessKey pulumi.StringInput `pulumi:"primaryAccessKey"`
	// The name of the resource group in which to create the Batch account. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The Batch account secondary access key.
	SecondaryAccessKey pulumi.StringInput `pulumi:"secondaryAccessKey"`
	// Specifies the storage account to use for the Batch account. If not specified, Azure Batch will manage the storage.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}

// The set of arguments for constructing a Account resource.
type AccountArgs struct {
	// A `keyVaultReference` block that describes the Azure KeyVault reference to use when deploying the Azure Batch account using the `UserSubscription` pool allocation mode. 
	KeyVaultReference AccountKeyVaultReferenceInput `pulumi:"keyVaultReference"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the Batch account. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the mode to use for pool allocation. Possible values are `BatchService` or `UserSubscription`. Defaults to `BatchService`.
	PoolAllocationMode pulumi.StringInput `pulumi:"poolAllocationMode"`
	// The name of the resource group in which to create the Batch account. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Specifies the storage account to use for the Batch account. If not specified, Azure Batch will manage the storage.
	StorageAccountId pulumi.StringInput `pulumi:"storageAccountId"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
type AccountKeyVaultReference struct {
	// The Batch account ID.
	Id string `pulumi:"id"`
	Url string `pulumi:"url"`
}
var accountKeyVaultReferenceType = reflect.TypeOf((*AccountKeyVaultReference)(nil)).Elem()

type AccountKeyVaultReferenceInput interface {
	pulumi.Input

	ToAccountKeyVaultReferenceOutput() AccountKeyVaultReferenceOutput
	ToAccountKeyVaultReferenceOutputWithContext(ctx context.Context) AccountKeyVaultReferenceOutput
}

type AccountKeyVaultReferenceArgs struct {
	// The Batch account ID.
	Id pulumi.StringInput `pulumi:"id"`
	Url pulumi.StringInput `pulumi:"url"`
}

func (AccountKeyVaultReferenceArgs) ElementType() reflect.Type {
	return accountKeyVaultReferenceType
}

func (a AccountKeyVaultReferenceArgs) ToAccountKeyVaultReferenceOutput() AccountKeyVaultReferenceOutput {
	return pulumi.ToOutput(a).(AccountKeyVaultReferenceOutput)
}

func (a AccountKeyVaultReferenceArgs) ToAccountKeyVaultReferenceOutputWithContext(ctx context.Context) AccountKeyVaultReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(AccountKeyVaultReferenceOutput)
}

type AccountKeyVaultReferenceOutput struct { *pulumi.OutputState }

// The Batch account ID.
func (o AccountKeyVaultReferenceOutput) Id() pulumi.StringOutput {
	return o.Apply(func(v AccountKeyVaultReference) string {
		return v.Id
	}).(pulumi.StringOutput)
}

func (o AccountKeyVaultReferenceOutput) Url() pulumi.StringOutput {
	return o.Apply(func(v AccountKeyVaultReference) string {
		return v.Url
	}).(pulumi.StringOutput)
}

func (AccountKeyVaultReferenceOutput) ElementType() reflect.Type {
	return accountKeyVaultReferenceType
}

func (o AccountKeyVaultReferenceOutput) ToAccountKeyVaultReferenceOutput() AccountKeyVaultReferenceOutput {
	return o
}

func (o AccountKeyVaultReferenceOutput) ToAccountKeyVaultReferenceOutputWithContext(ctx context.Context) AccountKeyVaultReferenceOutput {
	return o
}

func init() { pulumi.RegisterOutputType(AccountKeyVaultReferenceOutput{}) }

