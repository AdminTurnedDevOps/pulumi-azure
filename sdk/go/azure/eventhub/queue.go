// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package eventhub

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a ServiceBus Queue.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/servicebus_queue_legacy.html.markdown.
type Queue struct {
	pulumi.CustomResourceState

	// The ISO 8601 timespan duration of the idle interval after which the
	// Queue is automatically deleted, minimum of 5 minutes.
	AutoDeleteOnIdle pulumi.StringOutput `pulumi:"autoDeleteOnIdle"`

	// Boolean flag which controls whether the Queue has dead letter support when a message expires. Defaults to `false`.
	DeadLetteringOnMessageExpiration pulumi.BoolOutput `pulumi:"deadLetteringOnMessageExpiration"`

	// The ISO 8601 timespan duration of the TTL of messages sent to this
	// queue. This is the default value used when TTL is not set on message itself.
	DefaultMessageTtl pulumi.StringOutput `pulumi:"defaultMessageTtl"`

	// The ISO 8601 timespan duration during which
	// duplicates can be detected. Default value is 10 minutes. (`PT10M`)
	DuplicateDetectionHistoryTimeWindow pulumi.StringOutput `pulumi:"duplicateDetectionHistoryTimeWindow"`

	EnableBatchedOperations pulumi.BoolOutput `pulumi:"enableBatchedOperations"`

	// Boolean flag which controls whether Express Entities
	// are enabled. An express queue holds a message in memory temporarily before writing
	// it to persistent storage. Defaults to `false` for Basic and Standard. For Premium, it MUST
	// be set to `false`.
	EnableExpress pulumi.BoolOutput `pulumi:"enableExpress"`

	// Boolean flag which controls whether to enable
	// the queue to be partitioned across multiple message brokers. Changing this forces
	// a new resource to be created. Defaults to `false` for Basic and Standard. For Premium, it MUST
	// be set to `true`.
	EnablePartitioning pulumi.BoolOutput `pulumi:"enablePartitioning"`

	// Specifies the supported Azure location where the resource exists.
	// Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// The ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. Maximum value is 5 minutes. Defaults to 1 minute. (`PT1M`)
	LockDuration pulumi.StringOutput `pulumi:"lockDuration"`

	// Integer value which controls when a message is automatically deadlettered. Defaults to `10`.
	MaxDeliveryCount pulumi.IntOutput `pulumi:"maxDeliveryCount"`

	// Integer value which controls the size of
	// memory allocated for the queue. For supported values see the "Queue/topic size"
	// section of [this document](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-quotas).
	MaxSizeInMegabytes pulumi.IntOutput `pulumi:"maxSizeInMegabytes"`

	// Specifies the name of the ServiceBus Queue resource. Changing this forces a
	// new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the ServiceBus Namespace to create
	// this queue in. Changing this forces a new resource to be created.
	NamespaceName pulumi.StringOutput `pulumi:"namespaceName"`

	// Boolean flag which controls whether
	// the Queue requires duplicate detection. Changing this forces
	// a new resource to be created. Defaults to `false`.
	RequiresDuplicateDetection pulumi.BoolOutput `pulumi:"requiresDuplicateDetection"`

	// Boolean flag which controls whether the Queue requires sessions.
	// This will allow ordered handling of unbounded sequences of related messages. With sessions enabled
	// a queue can guarantee first-in-first-out delivery of messages.
	// Changing this forces a new resource to be created. Defaults to `false`.
	RequiresSession pulumi.BoolOutput `pulumi:"requiresSession"`

	// The name of the resource group in which to
	// create the namespace. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	SupportOrdering pulumi.BoolOutput `pulumi:"supportOrdering"`
}

// NewQueue registers a new resource with the given unique name, arguments, and options.
func NewQueue(ctx *pulumi.Context,
	name string, args *QueueArgs, opts ...pulumi.ResourceOption) (*Queue, error) {
	if args == nil || args.NamespaceName == nil {
		return nil, errors.New("missing required argument 'NamespaceName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AutoDeleteOnIdle; i != nil { inputs["autoDeleteOnIdle"] = i.ToStringOutput() }
		if i := args.DeadLetteringOnMessageExpiration; i != nil { inputs["deadLetteringOnMessageExpiration"] = i.ToBoolOutput() }
		if i := args.DefaultMessageTtl; i != nil { inputs["defaultMessageTtl"] = i.ToStringOutput() }
		if i := args.DuplicateDetectionHistoryTimeWindow; i != nil { inputs["duplicateDetectionHistoryTimeWindow"] = i.ToStringOutput() }
		if i := args.EnableBatchedOperations; i != nil { inputs["enableBatchedOperations"] = i.ToBoolOutput() }
		if i := args.EnableExpress; i != nil { inputs["enableExpress"] = i.ToBoolOutput() }
		if i := args.EnablePartitioning; i != nil { inputs["enablePartitioning"] = i.ToBoolOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.LockDuration; i != nil { inputs["lockDuration"] = i.ToStringOutput() }
		if i := args.MaxDeliveryCount; i != nil { inputs["maxDeliveryCount"] = i.ToIntOutput() }
		if i := args.MaxSizeInMegabytes; i != nil { inputs["maxSizeInMegabytes"] = i.ToIntOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.NamespaceName; i != nil { inputs["namespaceName"] = i.ToStringOutput() }
		if i := args.RequiresDuplicateDetection; i != nil { inputs["requiresDuplicateDetection"] = i.ToBoolOutput() }
		if i := args.RequiresSession; i != nil { inputs["requiresSession"] = i.ToBoolOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.SupportOrdering; i != nil { inputs["supportOrdering"] = i.ToBoolOutput() }
	}
	var resource Queue
	err := ctx.RegisterResource("azure:eventhub/queue:Queue", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueue gets an existing Queue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueState, opts ...pulumi.ResourceOption) (*Queue, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AutoDeleteOnIdle; i != nil { inputs["autoDeleteOnIdle"] = i.ToStringOutput() }
		if i := state.DeadLetteringOnMessageExpiration; i != nil { inputs["deadLetteringOnMessageExpiration"] = i.ToBoolOutput() }
		if i := state.DefaultMessageTtl; i != nil { inputs["defaultMessageTtl"] = i.ToStringOutput() }
		if i := state.DuplicateDetectionHistoryTimeWindow; i != nil { inputs["duplicateDetectionHistoryTimeWindow"] = i.ToStringOutput() }
		if i := state.EnableBatchedOperations; i != nil { inputs["enableBatchedOperations"] = i.ToBoolOutput() }
		if i := state.EnableExpress; i != nil { inputs["enableExpress"] = i.ToBoolOutput() }
		if i := state.EnablePartitioning; i != nil { inputs["enablePartitioning"] = i.ToBoolOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.LockDuration; i != nil { inputs["lockDuration"] = i.ToStringOutput() }
		if i := state.MaxDeliveryCount; i != nil { inputs["maxDeliveryCount"] = i.ToIntOutput() }
		if i := state.MaxSizeInMegabytes; i != nil { inputs["maxSizeInMegabytes"] = i.ToIntOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.NamespaceName; i != nil { inputs["namespaceName"] = i.ToStringOutput() }
		if i := state.RequiresDuplicateDetection; i != nil { inputs["requiresDuplicateDetection"] = i.ToBoolOutput() }
		if i := state.RequiresSession; i != nil { inputs["requiresSession"] = i.ToBoolOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.SupportOrdering; i != nil { inputs["supportOrdering"] = i.ToBoolOutput() }
	}
	var resource Queue
	err := ctx.ReadResource("azure:eventhub/queue:Queue", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Queue resources.
type QueueState struct {
	// The ISO 8601 timespan duration of the idle interval after which the
	// Queue is automatically deleted, minimum of 5 minutes.
	AutoDeleteOnIdle pulumi.StringInput `pulumi:"autoDeleteOnIdle"`
	// Boolean flag which controls whether the Queue has dead letter support when a message expires. Defaults to `false`.
	DeadLetteringOnMessageExpiration pulumi.BoolInput `pulumi:"deadLetteringOnMessageExpiration"`
	// The ISO 8601 timespan duration of the TTL of messages sent to this
	// queue. This is the default value used when TTL is not set on message itself.
	DefaultMessageTtl pulumi.StringInput `pulumi:"defaultMessageTtl"`
	// The ISO 8601 timespan duration during which
	// duplicates can be detected. Default value is 10 minutes. (`PT10M`)
	DuplicateDetectionHistoryTimeWindow pulumi.StringInput `pulumi:"duplicateDetectionHistoryTimeWindow"`
	EnableBatchedOperations pulumi.BoolInput `pulumi:"enableBatchedOperations"`
	// Boolean flag which controls whether Express Entities
	// are enabled. An express queue holds a message in memory temporarily before writing
	// it to persistent storage. Defaults to `false` for Basic and Standard. For Premium, it MUST
	// be set to `false`.
	EnableExpress pulumi.BoolInput `pulumi:"enableExpress"`
	// Boolean flag which controls whether to enable
	// the queue to be partitioned across multiple message brokers. Changing this forces
	// a new resource to be created. Defaults to `false` for Basic and Standard. For Premium, it MUST
	// be set to `true`.
	EnablePartitioning pulumi.BoolInput `pulumi:"enablePartitioning"`
	// Specifies the supported Azure location where the resource exists.
	// Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. Maximum value is 5 minutes. Defaults to 1 minute. (`PT1M`)
	LockDuration pulumi.StringInput `pulumi:"lockDuration"`
	// Integer value which controls when a message is automatically deadlettered. Defaults to `10`.
	MaxDeliveryCount pulumi.IntInput `pulumi:"maxDeliveryCount"`
	// Integer value which controls the size of
	// memory allocated for the queue. For supported values see the "Queue/topic size"
	// section of [this document](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-quotas).
	MaxSizeInMegabytes pulumi.IntInput `pulumi:"maxSizeInMegabytes"`
	// Specifies the name of the ServiceBus Queue resource. Changing this forces a
	// new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the ServiceBus Namespace to create
	// this queue in. Changing this forces a new resource to be created.
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
	// Boolean flag which controls whether
	// the Queue requires duplicate detection. Changing this forces
	// a new resource to be created. Defaults to `false`.
	RequiresDuplicateDetection pulumi.BoolInput `pulumi:"requiresDuplicateDetection"`
	// Boolean flag which controls whether the Queue requires sessions.
	// This will allow ordered handling of unbounded sequences of related messages. With sessions enabled
	// a queue can guarantee first-in-first-out delivery of messages.
	// Changing this forces a new resource to be created. Defaults to `false`.
	RequiresSession pulumi.BoolInput `pulumi:"requiresSession"`
	// The name of the resource group in which to
	// create the namespace. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	SupportOrdering pulumi.BoolInput `pulumi:"supportOrdering"`
}

// The set of arguments for constructing a Queue resource.
type QueueArgs struct {
	// The ISO 8601 timespan duration of the idle interval after which the
	// Queue is automatically deleted, minimum of 5 minutes.
	AutoDeleteOnIdle pulumi.StringInput `pulumi:"autoDeleteOnIdle"`
	// Boolean flag which controls whether the Queue has dead letter support when a message expires. Defaults to `false`.
	DeadLetteringOnMessageExpiration pulumi.BoolInput `pulumi:"deadLetteringOnMessageExpiration"`
	// The ISO 8601 timespan duration of the TTL of messages sent to this
	// queue. This is the default value used when TTL is not set on message itself.
	DefaultMessageTtl pulumi.StringInput `pulumi:"defaultMessageTtl"`
	// The ISO 8601 timespan duration during which
	// duplicates can be detected. Default value is 10 minutes. (`PT10M`)
	DuplicateDetectionHistoryTimeWindow pulumi.StringInput `pulumi:"duplicateDetectionHistoryTimeWindow"`
	EnableBatchedOperations pulumi.BoolInput `pulumi:"enableBatchedOperations"`
	// Boolean flag which controls whether Express Entities
	// are enabled. An express queue holds a message in memory temporarily before writing
	// it to persistent storage. Defaults to `false` for Basic and Standard. For Premium, it MUST
	// be set to `false`.
	EnableExpress pulumi.BoolInput `pulumi:"enableExpress"`
	// Boolean flag which controls whether to enable
	// the queue to be partitioned across multiple message brokers. Changing this forces
	// a new resource to be created. Defaults to `false` for Basic and Standard. For Premium, it MUST
	// be set to `true`.
	EnablePartitioning pulumi.BoolInput `pulumi:"enablePartitioning"`
	// Specifies the supported Azure location where the resource exists.
	// Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// The ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. Maximum value is 5 minutes. Defaults to 1 minute. (`PT1M`)
	LockDuration pulumi.StringInput `pulumi:"lockDuration"`
	// Integer value which controls when a message is automatically deadlettered. Defaults to `10`.
	MaxDeliveryCount pulumi.IntInput `pulumi:"maxDeliveryCount"`
	// Integer value which controls the size of
	// memory allocated for the queue. For supported values see the "Queue/topic size"
	// section of [this document](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-quotas).
	MaxSizeInMegabytes pulumi.IntInput `pulumi:"maxSizeInMegabytes"`
	// Specifies the name of the ServiceBus Queue resource. Changing this forces a
	// new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the ServiceBus Namespace to create
	// this queue in. Changing this forces a new resource to be created.
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
	// Boolean flag which controls whether
	// the Queue requires duplicate detection. Changing this forces
	// a new resource to be created. Defaults to `false`.
	RequiresDuplicateDetection pulumi.BoolInput `pulumi:"requiresDuplicateDetection"`
	// Boolean flag which controls whether the Queue requires sessions.
	// This will allow ordered handling of unbounded sequences of related messages. With sessions enabled
	// a queue can guarantee first-in-first-out delivery of messages.
	// Changing this forces a new resource to be created. Defaults to `false`.
	RequiresSession pulumi.BoolInput `pulumi:"requiresSession"`
	// The name of the resource group in which to
	// create the namespace. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	SupportOrdering pulumi.BoolInput `pulumi:"supportOrdering"`
}
