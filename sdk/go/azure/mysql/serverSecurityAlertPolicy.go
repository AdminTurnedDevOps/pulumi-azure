// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Security Alert Policy for a MSSQL Server.
// 
// > **NOTE** Security Alert Policy is currently only available for MS SQL databases.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/mssql_server_security_alert_policy.html.markdown.
type ServerSecurityAlertPolicy struct {
	s *pulumi.ResourceState
}

// NewServerSecurityAlertPolicy registers a new resource with the given unique name, arguments, and options.
func NewServerSecurityAlertPolicy(ctx *pulumi.Context,
	name string, args *ServerSecurityAlertPolicyArgs, opts ...pulumi.ResourceOpt) (*ServerSecurityAlertPolicy, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ServerName == nil {
		return nil, errors.New("missing required argument 'ServerName'")
	}
	if args == nil || args.State == nil {
		return nil, errors.New("missing required argument 'State'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["disabledAlerts"] = nil
		inputs["emailAccountAdmins"] = nil
		inputs["emailAddresses"] = nil
		inputs["resourceGroupName"] = nil
		inputs["retentionDays"] = nil
		inputs["serverName"] = nil
		inputs["state"] = nil
		inputs["storageAccountAccessKey"] = nil
		inputs["storageEndpoint"] = nil
	} else {
		inputs["disabledAlerts"] = args.DisabledAlerts
		inputs["emailAccountAdmins"] = args.EmailAccountAdmins
		inputs["emailAddresses"] = args.EmailAddresses
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["retentionDays"] = args.RetentionDays
		inputs["serverName"] = args.ServerName
		inputs["state"] = args.State
		inputs["storageAccountAccessKey"] = args.StorageAccountAccessKey
		inputs["storageEndpoint"] = args.StorageEndpoint
	}
	s, err := ctx.RegisterResource("azure:mysql/serverSecurityAlertPolicy:ServerSecurityAlertPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServerSecurityAlertPolicy{s: s}, nil
}

// GetServerSecurityAlertPolicy gets an existing ServerSecurityAlertPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerSecurityAlertPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServerSecurityAlertPolicyState, opts ...pulumi.ResourceOpt) (*ServerSecurityAlertPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["disabledAlerts"] = state.DisabledAlerts
		inputs["emailAccountAdmins"] = state.EmailAccountAdmins
		inputs["emailAddresses"] = state.EmailAddresses
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["retentionDays"] = state.RetentionDays
		inputs["serverName"] = state.ServerName
		inputs["state"] = state.State
		inputs["storageAccountAccessKey"] = state.StorageAccountAccessKey
		inputs["storageEndpoint"] = state.StorageEndpoint
	}
	s, err := ctx.ReadResource("azure:mysql/serverSecurityAlertPolicy:ServerSecurityAlertPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServerSecurityAlertPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ServerSecurityAlertPolicy) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ServerSecurityAlertPolicy) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Specifies an array of alerts that are disabled. Allowed values are: `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action`.
func (r *ServerSecurityAlertPolicy) DisabledAlerts() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["disabledAlerts"])
}

// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
func (r *ServerSecurityAlertPolicy) EmailAccountAdmins() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["emailAccountAdmins"])
}

// Specifies an array of e-mail addresses to which the alert is sent.
func (r *ServerSecurityAlertPolicy) EmailAddresses() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["emailAddresses"])
}

// The name of the resource group that contains the MS SQL Server. Changing this forces a new resource to be created.
func (r *ServerSecurityAlertPolicy) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
func (r *ServerSecurityAlertPolicy) RetentionDays() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["retentionDays"])
}

// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
func (r *ServerSecurityAlertPolicy) ServerName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serverName"])
}

// Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database server. Allowed values are: `Disabled`, `Enabled`, `New`.
func (r *ServerSecurityAlertPolicy) State() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["state"])
}

// Specifies the identifier key of the Threat Detection audit storage account.
func (r *ServerSecurityAlertPolicy) StorageAccountAccessKey() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["storageAccountAccessKey"])
}

// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
func (r *ServerSecurityAlertPolicy) StorageEndpoint() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["storageEndpoint"])
}

// Input properties used for looking up and filtering ServerSecurityAlertPolicy resources.
type ServerSecurityAlertPolicyState struct {
	// Specifies an array of alerts that are disabled. Allowed values are: `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action`.
	DisabledAlerts interface{}
	// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
	EmailAccountAdmins interface{}
	// Specifies an array of e-mail addresses to which the alert is sent.
	EmailAddresses interface{}
	// The name of the resource group that contains the MS SQL Server. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
	RetentionDays interface{}
	// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
	ServerName interface{}
	// Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database server. Allowed values are: `Disabled`, `Enabled`, `New`.
	State interface{}
	// Specifies the identifier key of the Threat Detection audit storage account.
	StorageAccountAccessKey interface{}
	// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
	StorageEndpoint interface{}
}

// The set of arguments for constructing a ServerSecurityAlertPolicy resource.
type ServerSecurityAlertPolicyArgs struct {
	// Specifies an array of alerts that are disabled. Allowed values are: `Sql_Injection`, `Sql_Injection_Vulnerability`, `Access_Anomaly`, `Data_Exfiltration`, `Unsafe_Action`.
	DisabledAlerts interface{}
	// Boolean flag which specifies if the alert is sent to the account administrators or not. Defaults to `false`.
	EmailAccountAdmins interface{}
	// Specifies an array of e-mail addresses to which the alert is sent.
	EmailAddresses interface{}
	// The name of the resource group that contains the MS SQL Server. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// Specifies the number of days to keep in the Threat Detection audit logs. Defaults to `0`.
	RetentionDays interface{}
	// Specifies the name of the MS SQL Server. Changing this forces a new resource to be created.
	ServerName interface{}
	// Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database server. Allowed values are: `Disabled`, `Enabled`, `New`.
	State interface{}
	// Specifies the identifier key of the Threat Detection audit storage account.
	StorageAccountAccessKey interface{}
	// Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
	StorageEndpoint interface{}
}
