// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package privatedns

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Enables you to manage DNS SRV Records within Azure Private DNS.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/private_dns_srv_record.html.markdown.
type SRVRecord struct {
	pulumi.CustomResourceState

	// The name of the DNS SRV Record. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// One or more `record` blocks as defined below.
	Records SRVRecordRecordsArrayOutput `pulumi:"records"`

	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	Ttl pulumi.IntOutput `pulumi:"ttl"`

	// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewSRVRecord registers a new resource with the given unique name, arguments, and options.
func NewSRVRecord(ctx *pulumi.Context,
	name string, args *SRVRecordArgs, opts ...pulumi.ResourceOption) (*SRVRecord, error) {
	if args == nil || args.Records == nil {
		return nil, errors.New("missing required argument 'Records'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Ttl == nil {
		return nil, errors.New("missing required argument 'Ttl'")
	}
	if args == nil || args.ZoneName == nil {
		return nil, errors.New("missing required argument 'ZoneName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Records; i != nil { inputs["records"] = i.ToSRVRecordRecordsArrayOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.Ttl; i != nil { inputs["ttl"] = i.ToIntOutput() }
		if i := args.ZoneName; i != nil { inputs["zoneName"] = i.ToStringOutput() }
	}
	var resource SRVRecord
	err := ctx.RegisterResource("azure:privatedns/sRVRecord:SRVRecord", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSRVRecord gets an existing SRVRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSRVRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SRVRecordState, opts ...pulumi.ResourceOption) (*SRVRecord, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Records; i != nil { inputs["records"] = i.ToSRVRecordRecordsArrayOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.Ttl; i != nil { inputs["ttl"] = i.ToIntOutput() }
		if i := state.ZoneName; i != nil { inputs["zoneName"] = i.ToStringOutput() }
	}
	var resource SRVRecord
	err := ctx.ReadResource("azure:privatedns/sRVRecord:SRVRecord", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SRVRecord resources.
type SRVRecordState struct {
	// The name of the DNS SRV Record. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more `record` blocks as defined below.
	Records SRVRecordRecordsArrayInput `pulumi:"records"`
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	Ttl pulumi.IntInput `pulumi:"ttl"`
	// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}

// The set of arguments for constructing a SRVRecord resource.
type SRVRecordArgs struct {
	// The name of the DNS SRV Record. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// One or more `record` blocks as defined below.
	Records SRVRecordRecordsArrayInput `pulumi:"records"`
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	Ttl pulumi.IntInput `pulumi:"ttl"`
	// Specifies the Private DNS Zone where the resource exists. Changing this forces a new resource to be created.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}
type SRVRecordRecords struct {
	Port int `pulumi:"port"`
	Priority int `pulumi:"priority"`
	Target string `pulumi:"target"`
	Weight int `pulumi:"weight"`
}
var sRVRecordRecordsType = reflect.TypeOf((*SRVRecordRecords)(nil)).Elem()

type SRVRecordRecordsInput interface {
	pulumi.Input

	ToSRVRecordRecordsOutput() SRVRecordRecordsOutput
	ToSRVRecordRecordsOutputWithContext(ctx context.Context) SRVRecordRecordsOutput
}

type SRVRecordRecordsArgs struct {
	Port pulumi.IntInput `pulumi:"port"`
	Priority pulumi.IntInput `pulumi:"priority"`
	Target pulumi.StringInput `pulumi:"target"`
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (SRVRecordRecordsArgs) ElementType() reflect.Type {
	return sRVRecordRecordsType
}

func (a SRVRecordRecordsArgs) ToSRVRecordRecordsOutput() SRVRecordRecordsOutput {
	return pulumi.ToOutput(a).(SRVRecordRecordsOutput)
}

func (a SRVRecordRecordsArgs) ToSRVRecordRecordsOutputWithContext(ctx context.Context) SRVRecordRecordsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(SRVRecordRecordsOutput)
}

type SRVRecordRecordsOutput struct { *pulumi.OutputState }

func (o SRVRecordRecordsOutput) Port() pulumi.IntOutput {
	return o.Apply(func(v SRVRecordRecords) int {
		return v.Port
	}).(pulumi.IntOutput)
}

func (o SRVRecordRecordsOutput) Priority() pulumi.IntOutput {
	return o.Apply(func(v SRVRecordRecords) int {
		return v.Priority
	}).(pulumi.IntOutput)
}

func (o SRVRecordRecordsOutput) Target() pulumi.StringOutput {
	return o.Apply(func(v SRVRecordRecords) string {
		return v.Target
	}).(pulumi.StringOutput)
}

func (o SRVRecordRecordsOutput) Weight() pulumi.IntOutput {
	return o.Apply(func(v SRVRecordRecords) int {
		return v.Weight
	}).(pulumi.IntOutput)
}

func (SRVRecordRecordsOutput) ElementType() reflect.Type {
	return sRVRecordRecordsType
}

func (o SRVRecordRecordsOutput) ToSRVRecordRecordsOutput() SRVRecordRecordsOutput {
	return o
}

func (o SRVRecordRecordsOutput) ToSRVRecordRecordsOutputWithContext(ctx context.Context) SRVRecordRecordsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(SRVRecordRecordsOutput{}) }

var sRVRecordRecordsArrayType = reflect.TypeOf((*[]SRVRecordRecords)(nil)).Elem()

type SRVRecordRecordsArrayInput interface {
	pulumi.Input

	ToSRVRecordRecordsArrayOutput() SRVRecordRecordsArrayOutput
	ToSRVRecordRecordsArrayOutputWithContext(ctx context.Context) SRVRecordRecordsArrayOutput
}

type SRVRecordRecordsArrayArgs []SRVRecordRecordsInput

func (SRVRecordRecordsArrayArgs) ElementType() reflect.Type {
	return sRVRecordRecordsArrayType
}

func (a SRVRecordRecordsArrayArgs) ToSRVRecordRecordsArrayOutput() SRVRecordRecordsArrayOutput {
	return pulumi.ToOutput(a).(SRVRecordRecordsArrayOutput)
}

func (a SRVRecordRecordsArrayArgs) ToSRVRecordRecordsArrayOutputWithContext(ctx context.Context) SRVRecordRecordsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(SRVRecordRecordsArrayOutput)
}

type SRVRecordRecordsArrayOutput struct { *pulumi.OutputState }

func (o SRVRecordRecordsArrayOutput) Index(i pulumi.IntInput) SRVRecordRecordsOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) SRVRecordRecords {
		return vs[0].([]SRVRecordRecords)[vs[1].(int)]
	}).(SRVRecordRecordsOutput)
}

func (SRVRecordRecordsArrayOutput) ElementType() reflect.Type {
	return sRVRecordRecordsArrayType
}

func (o SRVRecordRecordsArrayOutput) ToSRVRecordRecordsArrayOutput() SRVRecordRecordsArrayOutput {
	return o
}

func (o SRVRecordRecordsArrayOutput) ToSRVRecordRecordsArrayOutputWithContext(ctx context.Context) SRVRecordRecordsArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(SRVRecordRecordsArrayOutput{}) }

