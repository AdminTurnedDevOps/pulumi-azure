// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package privatedns

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/private_link_endpoint.html.markdown.
type LinkEndpoint struct {
	s *pulumi.ResourceState
}

// NewLinkEndpoint registers a new resource with the given unique name, arguments, and options.
func NewLinkEndpoint(ctx *pulumi.Context,
	name string, args *LinkEndpointArgs, opts ...pulumi.ResourceOpt) (*LinkEndpoint, error) {
	if args == nil || args.PrivateServiceConnection == nil {
		return nil, errors.New("missing required argument 'PrivateServiceConnection'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.SubnetId == nil {
		return nil, errors.New("missing required argument 'SubnetId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["privateServiceConnection"] = nil
		inputs["resourceGroupName"] = nil
		inputs["subnetId"] = nil
	} else {
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["privateServiceConnection"] = args.PrivateServiceConnection
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["subnetId"] = args.SubnetId
	}
	s, err := ctx.RegisterResource("azure:privatedns/linkEndpoint:LinkEndpoint", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LinkEndpoint{s: s}, nil
}

// GetLinkEndpoint gets an existing LinkEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinkEndpoint(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LinkEndpointState, opts ...pulumi.ResourceOpt) (*LinkEndpoint, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["privateServiceConnection"] = state.PrivateServiceConnection
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["subnetId"] = state.SubnetId
	}
	s, err := ctx.ReadResource("azure:privatedns/linkEndpoint:LinkEndpoint", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LinkEndpoint{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LinkEndpoint) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LinkEndpoint) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (r *LinkEndpoint) Location() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["location"])
}

// Specifies the Name of the Private Service Connection. Changing this forces a new resource to be created.
func (r *LinkEndpoint) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// A `privateServiceConnection` block as defined below.
func (r *LinkEndpoint) PrivateServiceConnection() pulumi.Output {
	return r.s.State["privateServiceConnection"]
}

// Specifies the Name of the Resource Group within which the Private Link Endpoint should exist. Changing this forces a new resource to be created.
func (r *LinkEndpoint) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The ID of the Subnet from which Private IP Addresses will be allocated for this Private Link Endpoint. Changing this forces a new resource to be created.
func (r *LinkEndpoint) SubnetId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["subnetId"])
}

// Input properties used for looking up and filtering LinkEndpoint resources.
type LinkEndpointState struct {
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// Specifies the Name of the Private Service Connection. Changing this forces a new resource to be created.
	Name interface{}
	// A `privateServiceConnection` block as defined below.
	PrivateServiceConnection interface{}
	// Specifies the Name of the Resource Group within which the Private Link Endpoint should exist. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The ID of the Subnet from which Private IP Addresses will be allocated for this Private Link Endpoint. Changing this forces a new resource to be created.
	SubnetId interface{}
}

// The set of arguments for constructing a LinkEndpoint resource.
type LinkEndpointArgs struct {
	// The supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// Specifies the Name of the Private Service Connection. Changing this forces a new resource to be created.
	Name interface{}
	// A `privateServiceConnection` block as defined below.
	PrivateServiceConnection interface{}
	// Specifies the Name of the Resource Group within which the Private Link Endpoint should exist. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The ID of the Subnet from which Private IP Addresses will be allocated for this Private Link Endpoint. Changing this forces a new resource to be created.
	SubnetId interface{}
}
