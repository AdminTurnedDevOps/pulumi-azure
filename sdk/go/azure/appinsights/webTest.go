// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package appinsights

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Application Insights WebTest.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/application_insights_web_test.html.markdown.
type WebTest struct {
	pulumi.CustomResourceState

	// The ID of the Application Insights component on which the WebTest operates. Changing this forces a new resource to be created.
	ApplicationInsightsId pulumi.StringOutput `pulumi:"applicationInsightsId"`

	// An XML configuration specification for a WebTest.
	Configuration pulumi.StringOutput `pulumi:"configuration"`

	// Purpose/user defined descriptive test for this WebTest.
	Description pulumi.StringOutput `pulumi:"description"`

	// Is the test actively being monitored.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`

	// Interval in seconds between test runs for this WebTest. Default is `300`.
	Frequency pulumi.IntOutput `pulumi:"frequency"`

	// A list of where to physically run the tests from to give global coverage for accessibility of your application.
	GeoLocations pulumi.StringArrayOutput `pulumi:"geoLocations"`

	Kind pulumi.StringOutput `pulumi:"kind"`

	// The location of the resource group.
	Location pulumi.StringOutput `pulumi:"location"`

	// Specifies the name of the Application Insights WebTest. Changing this forces a
	// new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// Allow for retries should this WebTest fail.
	RetryEnabled pulumi.BoolOutput `pulumi:"retryEnabled"`

	SyntheticMonitorId pulumi.StringOutput `pulumi:"syntheticMonitorId"`

	// Resource tags.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// Seconds until this WebTest will timeout and fail. Default is `30`.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
}

// NewWebTest registers a new resource with the given unique name, arguments, and options.
func NewWebTest(ctx *pulumi.Context,
	name string, args *WebTestArgs, opts ...pulumi.ResourceOption) (*WebTest, error) {
	if args == nil || args.ApplicationInsightsId == nil {
		return nil, errors.New("missing required argument 'ApplicationInsightsId'")
	}
	if args == nil || args.Configuration == nil {
		return nil, errors.New("missing required argument 'Configuration'")
	}
	if args == nil || args.GeoLocations == nil {
		return nil, errors.New("missing required argument 'GeoLocations'")
	}
	if args == nil || args.Kind == nil {
		return nil, errors.New("missing required argument 'Kind'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.ApplicationInsightsId; i != nil { inputs["applicationInsightsId"] = i.ToStringOutput() }
		if i := args.Configuration; i != nil { inputs["configuration"] = i.ToStringOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.Enabled; i != nil { inputs["enabled"] = i.ToBoolOutput() }
		if i := args.Frequency; i != nil { inputs["frequency"] = i.ToIntOutput() }
		if i := args.GeoLocations; i != nil { inputs["geoLocations"] = i.ToStringArrayOutput() }
		if i := args.Kind; i != nil { inputs["kind"] = i.ToStringOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.RetryEnabled; i != nil { inputs["retryEnabled"] = i.ToBoolOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.Timeout; i != nil { inputs["timeout"] = i.ToIntOutput() }
	}
	var resource WebTest
	err := ctx.RegisterResource("azure:appinsights/webTest:WebTest", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebTest gets an existing WebTest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebTest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebTestState, opts ...pulumi.ResourceOption) (*WebTest, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.ApplicationInsightsId; i != nil { inputs["applicationInsightsId"] = i.ToStringOutput() }
		if i := state.Configuration; i != nil { inputs["configuration"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.Enabled; i != nil { inputs["enabled"] = i.ToBoolOutput() }
		if i := state.Frequency; i != nil { inputs["frequency"] = i.ToIntOutput() }
		if i := state.GeoLocations; i != nil { inputs["geoLocations"] = i.ToStringArrayOutput() }
		if i := state.Kind; i != nil { inputs["kind"] = i.ToStringOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.RetryEnabled; i != nil { inputs["retryEnabled"] = i.ToBoolOutput() }
		if i := state.SyntheticMonitorId; i != nil { inputs["syntheticMonitorId"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.Timeout; i != nil { inputs["timeout"] = i.ToIntOutput() }
	}
	var resource WebTest
	err := ctx.ReadResource("azure:appinsights/webTest:WebTest", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WebTest resources.
type WebTestState struct {
	// The ID of the Application Insights component on which the WebTest operates. Changing this forces a new resource to be created.
	ApplicationInsightsId pulumi.StringInput `pulumi:"applicationInsightsId"`
	// An XML configuration specification for a WebTest.
	Configuration pulumi.StringInput `pulumi:"configuration"`
	// Purpose/user defined descriptive test for this WebTest.
	Description pulumi.StringInput `pulumi:"description"`
	// Is the test actively being monitored.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Interval in seconds between test runs for this WebTest. Default is `300`.
	Frequency pulumi.IntInput `pulumi:"frequency"`
	// A list of where to physically run the tests from to give global coverage for accessibility of your application.
	GeoLocations pulumi.StringArrayInput `pulumi:"geoLocations"`
	Kind pulumi.StringInput `pulumi:"kind"`
	// The location of the resource group.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the Application Insights WebTest. Changing this forces a
	// new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Allow for retries should this WebTest fail.
	RetryEnabled pulumi.BoolInput `pulumi:"retryEnabled"`
	SyntheticMonitorId pulumi.StringInput `pulumi:"syntheticMonitorId"`
	// Resource tags.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Seconds until this WebTest will timeout and fail. Default is `30`.
	Timeout pulumi.IntInput `pulumi:"timeout"`
}

// The set of arguments for constructing a WebTest resource.
type WebTestArgs struct {
	// The ID of the Application Insights component on which the WebTest operates. Changing this forces a new resource to be created.
	ApplicationInsightsId pulumi.StringInput `pulumi:"applicationInsightsId"`
	// An XML configuration specification for a WebTest.
	Configuration pulumi.StringInput `pulumi:"configuration"`
	// Purpose/user defined descriptive test for this WebTest.
	Description pulumi.StringInput `pulumi:"description"`
	// Is the test actively being monitored.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Interval in seconds between test runs for this WebTest. Default is `300`.
	Frequency pulumi.IntInput `pulumi:"frequency"`
	// A list of where to physically run the tests from to give global coverage for accessibility of your application.
	GeoLocations pulumi.StringArrayInput `pulumi:"geoLocations"`
	Kind pulumi.StringInput `pulumi:"kind"`
	// The location of the resource group.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the Application Insights WebTest. Changing this forces a
	// new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Allow for retries should this WebTest fail.
	RetryEnabled pulumi.BoolInput `pulumi:"retryEnabled"`
	// Resource tags.
	Tags pulumi.MapInput `pulumi:"tags"`
	// Seconds until this WebTest will timeout and fail. Default is `30`.
	Timeout pulumi.IntInput `pulumi:"timeout"`
}
