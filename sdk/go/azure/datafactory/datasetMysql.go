// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a MySQL Dataset inside a Azure Data Factory.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/data_factory_dataset_mysql.html.markdown.
type DatasetMysql struct {
	pulumi.CustomResourceState

	// A map of additional properties to associate with the Data Factory Dataset MySQL.
	AdditionalProperties pulumi.StringMapOutput `pulumi:"additionalProperties"`

	// List of tags that can be used for describing the Data Factory Dataset MySQL.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`

	// The Data Factory name in which to associate the Dataset with. Changing this forces a new resource.
	DataFactoryName pulumi.StringOutput `pulumi:"dataFactoryName"`

	// The description for the Data Factory Dataset MySQL.
	Description pulumi.StringOutput `pulumi:"description"`

	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder pulumi.StringOutput `pulumi:"folder"`

	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName pulumi.StringOutput `pulumi:"linkedServiceName"`

	// Specifies the name of the Data Factory Dataset MySQL. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`

	// A map of parameters to associate with the Data Factory Dataset MySQL.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`

	// The name of the resource group in which to create the Data Factory Dataset MySQL. Changing this forces a new resource
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// A `schemaColumn` block as defined below.
	SchemaColumns DatasetMysqlSchemaColumnsArrayOutput `pulumi:"schemaColumns"`

	// The table name of the Data Factory Dataset MySQL.
	TableName pulumi.StringOutput `pulumi:"tableName"`
}

// NewDatasetMysql registers a new resource with the given unique name, arguments, and options.
func NewDatasetMysql(ctx *pulumi.Context,
	name string, args *DatasetMysqlArgs, opts ...pulumi.ResourceOption) (*DatasetMysql, error) {
	if args == nil || args.DataFactoryName == nil {
		return nil, errors.New("missing required argument 'DataFactoryName'")
	}
	if args == nil || args.LinkedServiceName == nil {
		return nil, errors.New("missing required argument 'LinkedServiceName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AdditionalProperties; i != nil { inputs["additionalProperties"] = i.ToStringMapOutput() }
		if i := args.Annotations; i != nil { inputs["annotations"] = i.ToStringArrayOutput() }
		if i := args.DataFactoryName; i != nil { inputs["dataFactoryName"] = i.ToStringOutput() }
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.Folder; i != nil { inputs["folder"] = i.ToStringOutput() }
		if i := args.LinkedServiceName; i != nil { inputs["linkedServiceName"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Parameters; i != nil { inputs["parameters"] = i.ToStringMapOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.SchemaColumns; i != nil { inputs["schemaColumns"] = i.ToDatasetMysqlSchemaColumnsArrayOutput() }
		if i := args.TableName; i != nil { inputs["tableName"] = i.ToStringOutput() }
	}
	var resource DatasetMysql
	err := ctx.RegisterResource("azure:datafactory/datasetMysql:DatasetMysql", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetMysql gets an existing DatasetMysql resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetMysql(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetMysqlState, opts ...pulumi.ResourceOption) (*DatasetMysql, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AdditionalProperties; i != nil { inputs["additionalProperties"] = i.ToStringMapOutput() }
		if i := state.Annotations; i != nil { inputs["annotations"] = i.ToStringArrayOutput() }
		if i := state.DataFactoryName; i != nil { inputs["dataFactoryName"] = i.ToStringOutput() }
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.Folder; i != nil { inputs["folder"] = i.ToStringOutput() }
		if i := state.LinkedServiceName; i != nil { inputs["linkedServiceName"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Parameters; i != nil { inputs["parameters"] = i.ToStringMapOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.SchemaColumns; i != nil { inputs["schemaColumns"] = i.ToDatasetMysqlSchemaColumnsArrayOutput() }
		if i := state.TableName; i != nil { inputs["tableName"] = i.ToStringOutput() }
	}
	var resource DatasetMysql
	err := ctx.ReadResource("azure:datafactory/datasetMysql:DatasetMysql", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetMysql resources.
type DatasetMysqlState struct {
	// A map of additional properties to associate with the Data Factory Dataset MySQL.
	AdditionalProperties pulumi.StringMapInput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Dataset MySQL.
	Annotations pulumi.StringArrayInput `pulumi:"annotations"`
	// The Data Factory name in which to associate the Dataset with. Changing this forces a new resource.
	DataFactoryName pulumi.StringInput `pulumi:"dataFactoryName"`
	// The description for the Data Factory Dataset MySQL.
	Description pulumi.StringInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder pulumi.StringInput `pulumi:"folder"`
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName pulumi.StringInput `pulumi:"linkedServiceName"`
	// Specifies the name of the Data Factory Dataset MySQL. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringInput `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Dataset MySQL.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// The name of the resource group in which to create the Data Factory Dataset MySQL. Changing this forces a new resource
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A `schemaColumn` block as defined below.
	SchemaColumns DatasetMysqlSchemaColumnsArrayInput `pulumi:"schemaColumns"`
	// The table name of the Data Factory Dataset MySQL.
	TableName pulumi.StringInput `pulumi:"tableName"`
}

// The set of arguments for constructing a DatasetMysql resource.
type DatasetMysqlArgs struct {
	// A map of additional properties to associate with the Data Factory Dataset MySQL.
	AdditionalProperties pulumi.StringMapInput `pulumi:"additionalProperties"`
	// List of tags that can be used for describing the Data Factory Dataset MySQL.
	Annotations pulumi.StringArrayInput `pulumi:"annotations"`
	// The Data Factory name in which to associate the Dataset with. Changing this forces a new resource.
	DataFactoryName pulumi.StringInput `pulumi:"dataFactoryName"`
	// The description for the Data Factory Dataset MySQL.
	Description pulumi.StringInput `pulumi:"description"`
	// The folder that this Dataset is in. If not specified, the Dataset will appear at the root level.
	Folder pulumi.StringInput `pulumi:"folder"`
	// The Data Factory Linked Service name in which to associate the Dataset with.
	LinkedServiceName pulumi.StringInput `pulumi:"linkedServiceName"`
	// Specifies the name of the Data Factory Dataset MySQL. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringInput `pulumi:"name"`
	// A map of parameters to associate with the Data Factory Dataset MySQL.
	Parameters pulumi.StringMapInput `pulumi:"parameters"`
	// The name of the resource group in which to create the Data Factory Dataset MySQL. Changing this forces a new resource
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A `schemaColumn` block as defined below.
	SchemaColumns DatasetMysqlSchemaColumnsArrayInput `pulumi:"schemaColumns"`
	// The table name of the Data Factory Dataset MySQL.
	TableName pulumi.StringInput `pulumi:"tableName"`
}
type DatasetMysqlSchemaColumns struct {
	// The description for the Data Factory Dataset MySQL.
	Description *string `pulumi:"description"`
	// Specifies the name of the Data Factory Dataset MySQL. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name string `pulumi:"name"`
	Type *string `pulumi:"type"`
}
var datasetMysqlSchemaColumnsType = reflect.TypeOf((*DatasetMysqlSchemaColumns)(nil)).Elem()

type DatasetMysqlSchemaColumnsInput interface {
	pulumi.Input

	ToDatasetMysqlSchemaColumnsOutput() DatasetMysqlSchemaColumnsOutput
	ToDatasetMysqlSchemaColumnsOutputWithContext(ctx context.Context) DatasetMysqlSchemaColumnsOutput
}

type DatasetMysqlSchemaColumnsArgs struct {
	// The description for the Data Factory Dataset MySQL.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies the name of the Data Factory Dataset MySQL. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringInput `pulumi:"name"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (DatasetMysqlSchemaColumnsArgs) ElementType() reflect.Type {
	return datasetMysqlSchemaColumnsType
}

func (a DatasetMysqlSchemaColumnsArgs) ToDatasetMysqlSchemaColumnsOutput() DatasetMysqlSchemaColumnsOutput {
	return pulumi.ToOutput(a).(DatasetMysqlSchemaColumnsOutput)
}

func (a DatasetMysqlSchemaColumnsArgs) ToDatasetMysqlSchemaColumnsOutputWithContext(ctx context.Context) DatasetMysqlSchemaColumnsOutput {
	return pulumi.ToOutputWithContext(ctx, a).(DatasetMysqlSchemaColumnsOutput)
}

type DatasetMysqlSchemaColumnsOutput struct { *pulumi.OutputState }

// The description for the Data Factory Dataset MySQL.
func (o DatasetMysqlSchemaColumnsOutput) Description() pulumi.StringOutput {
	return o.Apply(func(v DatasetMysqlSchemaColumns) string {
		if v.Description == nil { return *new(string) } else { return *v.Description }
	}).(pulumi.StringOutput)
}

// Specifies the name of the Data Factory Dataset MySQL. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
func (o DatasetMysqlSchemaColumnsOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v DatasetMysqlSchemaColumns) string {
		return v.Name
	}).(pulumi.StringOutput)
}

func (o DatasetMysqlSchemaColumnsOutput) Type() pulumi.StringOutput {
	return o.Apply(func(v DatasetMysqlSchemaColumns) string {
		if v.Type == nil { return *new(string) } else { return *v.Type }
	}).(pulumi.StringOutput)
}

func (DatasetMysqlSchemaColumnsOutput) ElementType() reflect.Type {
	return datasetMysqlSchemaColumnsType
}

func (o DatasetMysqlSchemaColumnsOutput) ToDatasetMysqlSchemaColumnsOutput() DatasetMysqlSchemaColumnsOutput {
	return o
}

func (o DatasetMysqlSchemaColumnsOutput) ToDatasetMysqlSchemaColumnsOutputWithContext(ctx context.Context) DatasetMysqlSchemaColumnsOutput {
	return o
}

func init() { pulumi.RegisterOutputType(DatasetMysqlSchemaColumnsOutput{}) }

var datasetMysqlSchemaColumnsArrayType = reflect.TypeOf((*[]DatasetMysqlSchemaColumns)(nil)).Elem()

type DatasetMysqlSchemaColumnsArrayInput interface {
	pulumi.Input

	ToDatasetMysqlSchemaColumnsArrayOutput() DatasetMysqlSchemaColumnsArrayOutput
	ToDatasetMysqlSchemaColumnsArrayOutputWithContext(ctx context.Context) DatasetMysqlSchemaColumnsArrayOutput
}

type DatasetMysqlSchemaColumnsArrayArgs []DatasetMysqlSchemaColumnsInput

func (DatasetMysqlSchemaColumnsArrayArgs) ElementType() reflect.Type {
	return datasetMysqlSchemaColumnsArrayType
}

func (a DatasetMysqlSchemaColumnsArrayArgs) ToDatasetMysqlSchemaColumnsArrayOutput() DatasetMysqlSchemaColumnsArrayOutput {
	return pulumi.ToOutput(a).(DatasetMysqlSchemaColumnsArrayOutput)
}

func (a DatasetMysqlSchemaColumnsArrayArgs) ToDatasetMysqlSchemaColumnsArrayOutputWithContext(ctx context.Context) DatasetMysqlSchemaColumnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(DatasetMysqlSchemaColumnsArrayOutput)
}

type DatasetMysqlSchemaColumnsArrayOutput struct { *pulumi.OutputState }

func (o DatasetMysqlSchemaColumnsArrayOutput) Index(i pulumi.IntInput) DatasetMysqlSchemaColumnsOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) DatasetMysqlSchemaColumns {
		return vs[0].([]DatasetMysqlSchemaColumns)[vs[1].(int)]
	}).(DatasetMysqlSchemaColumnsOutput)
}

func (DatasetMysqlSchemaColumnsArrayOutput) ElementType() reflect.Type {
	return datasetMysqlSchemaColumnsArrayType
}

func (o DatasetMysqlSchemaColumnsArrayOutput) ToDatasetMysqlSchemaColumnsArrayOutput() DatasetMysqlSchemaColumnsArrayOutput {
	return o
}

func (o DatasetMysqlSchemaColumnsArrayOutput) ToDatasetMysqlSchemaColumnsArrayOutputWithContext(ctx context.Context) DatasetMysqlSchemaColumnsArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(DatasetMysqlSchemaColumnsArrayOutput{}) }

