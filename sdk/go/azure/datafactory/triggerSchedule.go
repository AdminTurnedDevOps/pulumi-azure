// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datafactory

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Trigger Schedule inside a Azure Data Factory.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/data_factory_trigger_schedule.html.markdown.
type TriggerSchedule struct {
	pulumi.CustomResourceState

	// List of tags that can be used for describing the Data Factory Schedule Trigger.
	Annotations pulumi.StringArrayOutput `pulumi:"annotations"`

	// The Data Factory name in which to associate the Schedule Trigger with. Changing this forces a new resource.
	DataFactoryName pulumi.StringOutput `pulumi:"dataFactoryName"`

	// The time the Schedule Trigger should end. The time will be represented in UTC. 
	EndTime pulumi.StringOutput `pulumi:"endTime"`

	// The trigger freqency. Valid values include `Minute`, `Hour`, `Day`, `Week`, `Month`. Defaults to `Minute`.
	Frequency pulumi.StringOutput `pulumi:"frequency"`

	// The interval for how often the trigger occurs. This defaults to 1.
	Interval pulumi.IntOutput `pulumi:"interval"`

	// Specifies the name of the Data Factory Schedule Trigger. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringOutput `pulumi:"name"`

	// The Data Factory Pipeline name that the trigger will act on.
	PipelineName pulumi.StringOutput `pulumi:"pipelineName"`

	// The pipeline parameters that the the trigger will act upon.
	PipelineParameters pulumi.StringMapOutput `pulumi:"pipelineParameters"`

	// The name of the resource group in which to create the Data Factory Schedule Trigger. Changing this forces a new resource
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The time the Schedule Trigger will start. This defaults to the current time. The time will be represented in UTC. 
	StartTime pulumi.StringOutput `pulumi:"startTime"`
}

// NewTriggerSchedule registers a new resource with the given unique name, arguments, and options.
func NewTriggerSchedule(ctx *pulumi.Context,
	name string, args *TriggerScheduleArgs, opts ...pulumi.ResourceOption) (*TriggerSchedule, error) {
	if args == nil || args.DataFactoryName == nil {
		return nil, errors.New("missing required argument 'DataFactoryName'")
	}
	if args == nil || args.PipelineName == nil {
		return nil, errors.New("missing required argument 'PipelineName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Annotations; i != nil { inputs["annotations"] = i.ToStringArrayOutput() }
		if i := args.DataFactoryName; i != nil { inputs["dataFactoryName"] = i.ToStringOutput() }
		if i := args.EndTime; i != nil { inputs["endTime"] = i.ToStringOutput() }
		if i := args.Frequency; i != nil { inputs["frequency"] = i.ToStringOutput() }
		if i := args.Interval; i != nil { inputs["interval"] = i.ToIntOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.PipelineName; i != nil { inputs["pipelineName"] = i.ToStringOutput() }
		if i := args.PipelineParameters; i != nil { inputs["pipelineParameters"] = i.ToStringMapOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.StartTime; i != nil { inputs["startTime"] = i.ToStringOutput() }
	}
	var resource TriggerSchedule
	err := ctx.RegisterResource("azure:datafactory/triggerSchedule:TriggerSchedule", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTriggerSchedule gets an existing TriggerSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTriggerSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TriggerScheduleState, opts ...pulumi.ResourceOption) (*TriggerSchedule, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Annotations; i != nil { inputs["annotations"] = i.ToStringArrayOutput() }
		if i := state.DataFactoryName; i != nil { inputs["dataFactoryName"] = i.ToStringOutput() }
		if i := state.EndTime; i != nil { inputs["endTime"] = i.ToStringOutput() }
		if i := state.Frequency; i != nil { inputs["frequency"] = i.ToStringOutput() }
		if i := state.Interval; i != nil { inputs["interval"] = i.ToIntOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.PipelineName; i != nil { inputs["pipelineName"] = i.ToStringOutput() }
		if i := state.PipelineParameters; i != nil { inputs["pipelineParameters"] = i.ToStringMapOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.StartTime; i != nil { inputs["startTime"] = i.ToStringOutput() }
	}
	var resource TriggerSchedule
	err := ctx.ReadResource("azure:datafactory/triggerSchedule:TriggerSchedule", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TriggerSchedule resources.
type TriggerScheduleState struct {
	// List of tags that can be used for describing the Data Factory Schedule Trigger.
	Annotations pulumi.StringArrayInput `pulumi:"annotations"`
	// The Data Factory name in which to associate the Schedule Trigger with. Changing this forces a new resource.
	DataFactoryName pulumi.StringInput `pulumi:"dataFactoryName"`
	// The time the Schedule Trigger should end. The time will be represented in UTC. 
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// The trigger freqency. Valid values include `Minute`, `Hour`, `Day`, `Week`, `Month`. Defaults to `Minute`.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// The interval for how often the trigger occurs. This defaults to 1.
	Interval pulumi.IntInput `pulumi:"interval"`
	// Specifies the name of the Data Factory Schedule Trigger. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringInput `pulumi:"name"`
	// The Data Factory Pipeline name that the trigger will act on.
	PipelineName pulumi.StringInput `pulumi:"pipelineName"`
	// The pipeline parameters that the the trigger will act upon.
	PipelineParameters pulumi.StringMapInput `pulumi:"pipelineParameters"`
	// The name of the resource group in which to create the Data Factory Schedule Trigger. Changing this forces a new resource
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The time the Schedule Trigger will start. This defaults to the current time. The time will be represented in UTC. 
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

// The set of arguments for constructing a TriggerSchedule resource.
type TriggerScheduleArgs struct {
	// List of tags that can be used for describing the Data Factory Schedule Trigger.
	Annotations pulumi.StringArrayInput `pulumi:"annotations"`
	// The Data Factory name in which to associate the Schedule Trigger with. Changing this forces a new resource.
	DataFactoryName pulumi.StringInput `pulumi:"dataFactoryName"`
	// The time the Schedule Trigger should end. The time will be represented in UTC. 
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// The trigger freqency. Valid values include `Minute`, `Hour`, `Day`, `Week`, `Month`. Defaults to `Minute`.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// The interval for how often the trigger occurs. This defaults to 1.
	Interval pulumi.IntInput `pulumi:"interval"`
	// Specifies the name of the Data Factory Schedule Trigger. Changing this forces a new resource to be created. Must be globally unique. See the [Microsoft documentation](https://docs.microsoft.com/en-us/azure/data-factory/naming-rules) for all restrictions.
	Name pulumi.StringInput `pulumi:"name"`
	// The Data Factory Pipeline name that the trigger will act on.
	PipelineName pulumi.StringInput `pulumi:"pipelineName"`
	// The pipeline parameters that the the trigger will act upon.
	PipelineParameters pulumi.StringMapInput `pulumi:"pipelineParameters"`
	// The name of the resource group in which to create the Data Factory Schedule Trigger. Changing this forces a new resource
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The time the Schedule Trigger will start. This defaults to the current time. The time will be represented in UTC. 
	StartTime pulumi.StringInput `pulumi:"startTime"`
}
