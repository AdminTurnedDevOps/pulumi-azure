// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datalake

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Azure Data Lake Store.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/data_lake_store.html.markdown.
type Store struct {
	pulumi.CustomResourceState

	// Is Encryption enabled on this Data Lake Store Account? Possible values are `Enabled` or `Disabled`. Defaults to `Enabled`.
	EncryptionState pulumi.StringOutput `pulumi:"encryptionState"`

	// The Encryption Type used for this Data Lake Store Account. Currently can be set to `ServiceManaged` when `encryptionState` is `Enabled` - and must be a blank string when it's Disabled.
	EncryptionType pulumi.StringOutput `pulumi:"encryptionType"`

	// The Endpoint for the Data Lake Store.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`

	// are Azure Service IP's allowed through the firewall? Possible values are `Enabled` and `Disabled`. Defaults to `Enabled.`
	FirewallAllowAzureIps pulumi.StringOutput `pulumi:"firewallAllowAzureIps"`

	// the state of the Firewall. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled.`
	FirewallState pulumi.StringOutput `pulumi:"firewallState"`

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// Specifies the name of the Data Lake Store. Changing this forces a new resource to be created. Has to be between 3 to 24 characters.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the resource group in which to create the Data Lake Store.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The monthly commitment tier for Data Lake Store. Accepted values are `Consumption`, `Commitment_1TB`, `Commitment_10TB`, `Commitment_100TB`, `Commitment_500TB`, `Commitment_1PB` or `Commitment_5PB`.
	Tier pulumi.StringOutput `pulumi:"tier"`
}

// NewStore registers a new resource with the given unique name, arguments, and options.
func NewStore(ctx *pulumi.Context,
	name string, args *StoreArgs, opts ...pulumi.ResourceOption) (*Store, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.EncryptionState; i != nil { inputs["encryptionState"] = i.ToStringOutput() }
		if i := args.EncryptionType; i != nil { inputs["encryptionType"] = i.ToStringOutput() }
		if i := args.FirewallAllowAzureIps; i != nil { inputs["firewallAllowAzureIps"] = i.ToStringOutput() }
		if i := args.FirewallState; i != nil { inputs["firewallState"] = i.ToStringOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.Tier; i != nil { inputs["tier"] = i.ToStringOutput() }
	}
	var resource Store
	err := ctx.RegisterResource("azure:datalake/store:Store", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStore gets an existing Store resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StoreState, opts ...pulumi.ResourceOption) (*Store, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.EncryptionState; i != nil { inputs["encryptionState"] = i.ToStringOutput() }
		if i := state.EncryptionType; i != nil { inputs["encryptionType"] = i.ToStringOutput() }
		if i := state.Endpoint; i != nil { inputs["endpoint"] = i.ToStringOutput() }
		if i := state.FirewallAllowAzureIps; i != nil { inputs["firewallAllowAzureIps"] = i.ToStringOutput() }
		if i := state.FirewallState; i != nil { inputs["firewallState"] = i.ToStringOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.Tier; i != nil { inputs["tier"] = i.ToStringOutput() }
	}
	var resource Store
	err := ctx.ReadResource("azure:datalake/store:Store", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Store resources.
type StoreState struct {
	// Is Encryption enabled on this Data Lake Store Account? Possible values are `Enabled` or `Disabled`. Defaults to `Enabled`.
	EncryptionState pulumi.StringInput `pulumi:"encryptionState"`
	// The Encryption Type used for this Data Lake Store Account. Currently can be set to `ServiceManaged` when `encryptionState` is `Enabled` - and must be a blank string when it's Disabled.
	EncryptionType pulumi.StringInput `pulumi:"encryptionType"`
	// The Endpoint for the Data Lake Store.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// are Azure Service IP's allowed through the firewall? Possible values are `Enabled` and `Disabled`. Defaults to `Enabled.`
	FirewallAllowAzureIps pulumi.StringInput `pulumi:"firewallAllowAzureIps"`
	// the state of the Firewall. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled.`
	FirewallState pulumi.StringInput `pulumi:"firewallState"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the Data Lake Store. Changing this forces a new resource to be created. Has to be between 3 to 24 characters.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which to create the Data Lake Store.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The monthly commitment tier for Data Lake Store. Accepted values are `Consumption`, `Commitment_1TB`, `Commitment_10TB`, `Commitment_100TB`, `Commitment_500TB`, `Commitment_1PB` or `Commitment_5PB`.
	Tier pulumi.StringInput `pulumi:"tier"`
}

// The set of arguments for constructing a Store resource.
type StoreArgs struct {
	// Is Encryption enabled on this Data Lake Store Account? Possible values are `Enabled` or `Disabled`. Defaults to `Enabled`.
	EncryptionState pulumi.StringInput `pulumi:"encryptionState"`
	// The Encryption Type used for this Data Lake Store Account. Currently can be set to `ServiceManaged` when `encryptionState` is `Enabled` - and must be a blank string when it's Disabled.
	EncryptionType pulumi.StringInput `pulumi:"encryptionType"`
	// are Azure Service IP's allowed through the firewall? Possible values are `Enabled` and `Disabled`. Defaults to `Enabled.`
	FirewallAllowAzureIps pulumi.StringInput `pulumi:"firewallAllowAzureIps"`
	// the state of the Firewall. Possible values are `Enabled` and `Disabled`. Defaults to `Enabled.`
	FirewallState pulumi.StringInput `pulumi:"firewallState"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the Data Lake Store. Changing this forces a new resource to be created. Has to be between 3 to 24 characters.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which to create the Data Lake Store.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The monthly commitment tier for Data Lake Store. Accepted values are `Consumption`, `Commitment_1TB`, `Commitment_10TB`, `Commitment_100TB`, `Commitment_500TB`, `Commitment_1PB` or `Commitment_5PB`.
	Tier pulumi.StringInput `pulumi:"tier"`
}
