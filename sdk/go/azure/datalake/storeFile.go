// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datalake

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Azure Data Lake Store File.
// 
// > **Note:** If you want to change the data in the remote file without changing the `localFilePath`, then 
// taint the resource so the `datalake.StoreFile` gets recreated with the new data.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/data_lake_store_file.html.markdown.
type StoreFile struct {
	pulumi.CustomResourceState

	// Specifies the name of the Data Lake Store for which the File should created.
	AccountName pulumi.StringOutput `pulumi:"accountName"`

	// The path to the local file to be added to the Data Lake Store.
	LocalFilePath pulumi.StringOutput `pulumi:"localFilePath"`

	// The path created for the file on the Data Lake Store.
	RemoteFilePath pulumi.StringOutput `pulumi:"remoteFilePath"`
}

// NewStoreFile registers a new resource with the given unique name, arguments, and options.
func NewStoreFile(ctx *pulumi.Context,
	name string, args *StoreFileArgs, opts ...pulumi.ResourceOption) (*StoreFile, error) {
	if args == nil || args.AccountName == nil {
		return nil, errors.New("missing required argument 'AccountName'")
	}
	if args == nil || args.LocalFilePath == nil {
		return nil, errors.New("missing required argument 'LocalFilePath'")
	}
	if args == nil || args.RemoteFilePath == nil {
		return nil, errors.New("missing required argument 'RemoteFilePath'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AccountName; i != nil { inputs["accountName"] = i.ToStringOutput() }
		if i := args.LocalFilePath; i != nil { inputs["localFilePath"] = i.ToStringOutput() }
		if i := args.RemoteFilePath; i != nil { inputs["remoteFilePath"] = i.ToStringOutput() }
	}
	var resource StoreFile
	err := ctx.RegisterResource("azure:datalake/storeFile:StoreFile", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStoreFile gets an existing StoreFile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStoreFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StoreFileState, opts ...pulumi.ResourceOption) (*StoreFile, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AccountName; i != nil { inputs["accountName"] = i.ToStringOutput() }
		if i := state.LocalFilePath; i != nil { inputs["localFilePath"] = i.ToStringOutput() }
		if i := state.RemoteFilePath; i != nil { inputs["remoteFilePath"] = i.ToStringOutput() }
	}
	var resource StoreFile
	err := ctx.ReadResource("azure:datalake/storeFile:StoreFile", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StoreFile resources.
type StoreFileState struct {
	// Specifies the name of the Data Lake Store for which the File should created.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The path to the local file to be added to the Data Lake Store.
	LocalFilePath pulumi.StringInput `pulumi:"localFilePath"`
	// The path created for the file on the Data Lake Store.
	RemoteFilePath pulumi.StringInput `pulumi:"remoteFilePath"`
}

// The set of arguments for constructing a StoreFile resource.
type StoreFileArgs struct {
	// Specifies the name of the Data Lake Store for which the File should created.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The path to the local file to be added to the Data Lake Store.
	LocalFilePath pulumi.StringInput `pulumi:"localFilePath"`
	// The path created for the file on the Data Lake Store.
	RemoteFilePath pulumi.StringInput `pulumi:"remoteFilePath"`
}
