// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package devtest

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Virtual Network within a Dev Test Lab.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/dev_test_virtual_network.html.markdown.
type VirtualNetwork struct {
	pulumi.CustomResourceState

	// A description for the Virtual Network.
	Description pulumi.StringOutput `pulumi:"description"`

	// Specifies the name of the Dev Test Lab in which the Virtual Network should be created. Changing this forces a new resource to be created.
	LabName pulumi.StringOutput `pulumi:"labName"`

	// Specifies the name of the Dev Test Virtual Network. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// The name of the resource group in which the Dev Test Lab resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// A `subnet` block as defined below.
	Subnet VirtualNetworkSubnetOutput `pulumi:"subnet"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The unique immutable identifier of the Dev Test Virtual Network.
	UniqueIdentifier pulumi.StringOutput `pulumi:"uniqueIdentifier"`
}

// NewVirtualNetwork registers a new resource with the given unique name, arguments, and options.
func NewVirtualNetwork(ctx *pulumi.Context,
	name string, args *VirtualNetworkArgs, opts ...pulumi.ResourceOption) (*VirtualNetwork, error) {
	if args == nil || args.LabName == nil {
		return nil, errors.New("missing required argument 'LabName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := args.LabName; i != nil { inputs["labName"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Subnet; i != nil { inputs["subnet"] = i.ToVirtualNetworkSubnetOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
	}
	var resource VirtualNetwork
	err := ctx.RegisterResource("azure:devtest/virtualNetwork:VirtualNetwork", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualNetwork gets an existing VirtualNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualNetworkState, opts ...pulumi.ResourceOption) (*VirtualNetwork, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Description; i != nil { inputs["description"] = i.ToStringOutput() }
		if i := state.LabName; i != nil { inputs["labName"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.Subnet; i != nil { inputs["subnet"] = i.ToVirtualNetworkSubnetOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.UniqueIdentifier; i != nil { inputs["uniqueIdentifier"] = i.ToStringOutput() }
	}
	var resource VirtualNetwork
	err := ctx.ReadResource("azure:devtest/virtualNetwork:VirtualNetwork", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualNetwork resources.
type VirtualNetworkState struct {
	// A description for the Virtual Network.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies the name of the Dev Test Lab in which the Virtual Network should be created. Changing this forces a new resource to be created.
	LabName pulumi.StringInput `pulumi:"labName"`
	// Specifies the name of the Dev Test Virtual Network. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which the Dev Test Lab resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A `subnet` block as defined below.
	Subnet VirtualNetworkSubnetInput `pulumi:"subnet"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The unique immutable identifier of the Dev Test Virtual Network.
	UniqueIdentifier pulumi.StringInput `pulumi:"uniqueIdentifier"`
}

// The set of arguments for constructing a VirtualNetwork resource.
type VirtualNetworkArgs struct {
	// A description for the Virtual Network.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies the name of the Dev Test Lab in which the Virtual Network should be created. Changing this forces a new resource to be created.
	LabName pulumi.StringInput `pulumi:"labName"`
	// Specifies the name of the Dev Test Virtual Network. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group in which the Dev Test Lab resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// A `subnet` block as defined below.
	Subnet VirtualNetworkSubnetInput `pulumi:"subnet"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
}
type VirtualNetworkSubnet struct {
	// Specifies the name of the Dev Test Virtual Network. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	UseInVirtualMachineCreation *string `pulumi:"useInVirtualMachineCreation"`
	UsePublicIpAddress *string `pulumi:"usePublicIpAddress"`
}
var virtualNetworkSubnetType = reflect.TypeOf((*VirtualNetworkSubnet)(nil)).Elem()

type VirtualNetworkSubnetInput interface {
	pulumi.Input

	ToVirtualNetworkSubnetOutput() VirtualNetworkSubnetOutput
	ToVirtualNetworkSubnetOutputWithContext(ctx context.Context) VirtualNetworkSubnetOutput
}

type VirtualNetworkSubnetArgs struct {
	// Specifies the name of the Dev Test Virtual Network. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	UseInVirtualMachineCreation pulumi.StringInput `pulumi:"useInVirtualMachineCreation"`
	UsePublicIpAddress pulumi.StringInput `pulumi:"usePublicIpAddress"`
}

func (VirtualNetworkSubnetArgs) ElementType() reflect.Type {
	return virtualNetworkSubnetType
}

func (a VirtualNetworkSubnetArgs) ToVirtualNetworkSubnetOutput() VirtualNetworkSubnetOutput {
	return pulumi.ToOutput(a).(VirtualNetworkSubnetOutput)
}

func (a VirtualNetworkSubnetArgs) ToVirtualNetworkSubnetOutputWithContext(ctx context.Context) VirtualNetworkSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, a).(VirtualNetworkSubnetOutput)
}

type VirtualNetworkSubnetOutput struct { *pulumi.OutputState }

// Specifies the name of the Dev Test Virtual Network. Changing this forces a new resource to be created.
func (o VirtualNetworkSubnetOutput) Name() pulumi.StringOutput {
	return o.Apply(func(v VirtualNetworkSubnet) string {
		if v.Name == nil { return *new(string) } else { return *v.Name }
	}).(pulumi.StringOutput)
}

func (o VirtualNetworkSubnetOutput) UseInVirtualMachineCreation() pulumi.StringOutput {
	return o.Apply(func(v VirtualNetworkSubnet) string {
		if v.UseInVirtualMachineCreation == nil { return *new(string) } else { return *v.UseInVirtualMachineCreation }
	}).(pulumi.StringOutput)
}

func (o VirtualNetworkSubnetOutput) UsePublicIpAddress() pulumi.StringOutput {
	return o.Apply(func(v VirtualNetworkSubnet) string {
		if v.UsePublicIpAddress == nil { return *new(string) } else { return *v.UsePublicIpAddress }
	}).(pulumi.StringOutput)
}

func (VirtualNetworkSubnetOutput) ElementType() reflect.Type {
	return virtualNetworkSubnetType
}

func (o VirtualNetworkSubnetOutput) ToVirtualNetworkSubnetOutput() VirtualNetworkSubnetOutput {
	return o
}

func (o VirtualNetworkSubnetOutput) ToVirtualNetworkSubnetOutputWithContext(ctx context.Context) VirtualNetworkSubnetOutput {
	return o
}

func init() { pulumi.RegisterOutputType(VirtualNetworkSubnetOutput{}) }

