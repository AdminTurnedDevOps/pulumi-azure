// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package devtest

import (
	"context"
	"reflect"
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Linux Virtual Machine within a Dev Test Lab.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/dev_test_linux_virtual_machine.html.markdown.
type LinuxVirtualMachine struct {
	pulumi.CustomResourceState

	// Can this Virtual Machine be claimed by users? Defaults to `true`.
	AllowClaim pulumi.BoolOutput `pulumi:"allowClaim"`

	// Should the Virtual Machine be created without a Public IP Address? Changing this forces a new resource to be created.
	DisallowPublicIpAddress pulumi.BoolOutput `pulumi:"disallowPublicIpAddress"`

	// The FQDN of the Virtual Machine.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`

	// A `galleryImageReference` block as defined below.
	GalleryImageReference LinuxVirtualMachineGalleryImageReferenceOutput `pulumi:"galleryImageReference"`

	// One or more `inboundNatRule` blocks as defined below. Changing this forces a new resource to be created.
	InboundNatRules LinuxVirtualMachineInboundNatRulesArrayOutput `pulumi:"inboundNatRules"`

	// Specifies the name of the Dev Test Lab in which the Virtual Machine should be created. Changing this forces a new resource to be created.
	LabName pulumi.StringOutput `pulumi:"labName"`

	// The name of a Subnet within the Dev Test Virtual Network where this machine should exist. Changing this forces a new resource to be created.
	LabSubnetName pulumi.StringOutput `pulumi:"labSubnetName"`

	// The ID of the Dev Test Virtual Network where this Virtual Machine should be created. Changing this forces a new resource to be created.
	LabVirtualNetworkId pulumi.StringOutput `pulumi:"labVirtualNetworkId"`

	// Specifies the supported Azure location where the Dev Test Lab exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`

	// Specifies the name of the Dev Test Machine. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`

	// Any notes about the Virtual Machine.
	Notes pulumi.StringOutput `pulumi:"notes"`

	// The Password associated with the `username` used to login to this Virtual Machine. Changing this forces a new resource to be created.
	Password pulumi.StringOutput `pulumi:"password"`

	// The name of the resource group in which the Dev Test Lab resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The Machine Size to use for this Virtual Machine, such as `Standard_F2`. Changing this forces a new resource to be created.
	Size pulumi.StringOutput `pulumi:"size"`

	// The SSH Key associated with the `username` used to login to this Virtual Machine. Changing this forces a new resource to be created.
	SshKey pulumi.StringOutput `pulumi:"sshKey"`

	// The type of Storage to use on this Virtual Machine. Possible values are `Standard` and `Premium`.
	StorageType pulumi.StringOutput `pulumi:"storageType"`

	// A mapping of tags to assign to the resource.
	Tags pulumi.MapOutput `pulumi:"tags"`

	// The unique immutable identifier of the Virtual Machine.
	UniqueIdentifier pulumi.StringOutput `pulumi:"uniqueIdentifier"`

	// The Username associated with the local administrator on this Virtual Machine. Changing this forces a new resource to be created.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewLinuxVirtualMachine registers a new resource with the given unique name, arguments, and options.
func NewLinuxVirtualMachine(ctx *pulumi.Context,
	name string, args *LinuxVirtualMachineArgs, opts ...pulumi.ResourceOption) (*LinuxVirtualMachine, error) {
	if args == nil || args.GalleryImageReference == nil {
		return nil, errors.New("missing required argument 'GalleryImageReference'")
	}
	if args == nil || args.LabName == nil {
		return nil, errors.New("missing required argument 'LabName'")
	}
	if args == nil || args.LabSubnetName == nil {
		return nil, errors.New("missing required argument 'LabSubnetName'")
	}
	if args == nil || args.LabVirtualNetworkId == nil {
		return nil, errors.New("missing required argument 'LabVirtualNetworkId'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Size == nil {
		return nil, errors.New("missing required argument 'Size'")
	}
	if args == nil || args.StorageType == nil {
		return nil, errors.New("missing required argument 'StorageType'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.AllowClaim; i != nil { inputs["allowClaim"] = i.ToBoolOutput() }
		if i := args.DisallowPublicIpAddress; i != nil { inputs["disallowPublicIpAddress"] = i.ToBoolOutput() }
		if i := args.GalleryImageReference; i != nil { inputs["galleryImageReference"] = i.ToLinuxVirtualMachineGalleryImageReferenceOutput() }
		if i := args.InboundNatRules; i != nil { inputs["inboundNatRules"] = i.ToLinuxVirtualMachineInboundNatRulesArrayOutput() }
		if i := args.LabName; i != nil { inputs["labName"] = i.ToStringOutput() }
		if i := args.LabSubnetName; i != nil { inputs["labSubnetName"] = i.ToStringOutput() }
		if i := args.LabVirtualNetworkId; i != nil { inputs["labVirtualNetworkId"] = i.ToStringOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.Notes; i != nil { inputs["notes"] = i.ToStringOutput() }
		if i := args.Password; i != nil { inputs["password"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.Size; i != nil { inputs["size"] = i.ToStringOutput() }
		if i := args.SshKey; i != nil { inputs["sshKey"] = i.ToStringOutput() }
		if i := args.StorageType; i != nil { inputs["storageType"] = i.ToStringOutput() }
		if i := args.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := args.Username; i != nil { inputs["username"] = i.ToStringOutput() }
	}
	var resource LinuxVirtualMachine
	err := ctx.RegisterResource("azure:devtest/linuxVirtualMachine:LinuxVirtualMachine", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLinuxVirtualMachine gets an existing LinuxVirtualMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLinuxVirtualMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LinuxVirtualMachineState, opts ...pulumi.ResourceOption) (*LinuxVirtualMachine, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.AllowClaim; i != nil { inputs["allowClaim"] = i.ToBoolOutput() }
		if i := state.DisallowPublicIpAddress; i != nil { inputs["disallowPublicIpAddress"] = i.ToBoolOutput() }
		if i := state.Fqdn; i != nil { inputs["fqdn"] = i.ToStringOutput() }
		if i := state.GalleryImageReference; i != nil { inputs["galleryImageReference"] = i.ToLinuxVirtualMachineGalleryImageReferenceOutput() }
		if i := state.InboundNatRules; i != nil { inputs["inboundNatRules"] = i.ToLinuxVirtualMachineInboundNatRulesArrayOutput() }
		if i := state.LabName; i != nil { inputs["labName"] = i.ToStringOutput() }
		if i := state.LabSubnetName; i != nil { inputs["labSubnetName"] = i.ToStringOutput() }
		if i := state.LabVirtualNetworkId; i != nil { inputs["labVirtualNetworkId"] = i.ToStringOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.Notes; i != nil { inputs["notes"] = i.ToStringOutput() }
		if i := state.Password; i != nil { inputs["password"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.Size; i != nil { inputs["size"] = i.ToStringOutput() }
		if i := state.SshKey; i != nil { inputs["sshKey"] = i.ToStringOutput() }
		if i := state.StorageType; i != nil { inputs["storageType"] = i.ToStringOutput() }
		if i := state.Tags; i != nil { inputs["tags"] = i.ToMapOutput() }
		if i := state.UniqueIdentifier; i != nil { inputs["uniqueIdentifier"] = i.ToStringOutput() }
		if i := state.Username; i != nil { inputs["username"] = i.ToStringOutput() }
	}
	var resource LinuxVirtualMachine
	err := ctx.ReadResource("azure:devtest/linuxVirtualMachine:LinuxVirtualMachine", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LinuxVirtualMachine resources.
type LinuxVirtualMachineState struct {
	// Can this Virtual Machine be claimed by users? Defaults to `true`.
	AllowClaim pulumi.BoolInput `pulumi:"allowClaim"`
	// Should the Virtual Machine be created without a Public IP Address? Changing this forces a new resource to be created.
	DisallowPublicIpAddress pulumi.BoolInput `pulumi:"disallowPublicIpAddress"`
	// The FQDN of the Virtual Machine.
	Fqdn pulumi.StringInput `pulumi:"fqdn"`
	// A `galleryImageReference` block as defined below.
	GalleryImageReference LinuxVirtualMachineGalleryImageReferenceInput `pulumi:"galleryImageReference"`
	// One or more `inboundNatRule` blocks as defined below. Changing this forces a new resource to be created.
	InboundNatRules LinuxVirtualMachineInboundNatRulesArrayInput `pulumi:"inboundNatRules"`
	// Specifies the name of the Dev Test Lab in which the Virtual Machine should be created. Changing this forces a new resource to be created.
	LabName pulumi.StringInput `pulumi:"labName"`
	// The name of a Subnet within the Dev Test Virtual Network where this machine should exist. Changing this forces a new resource to be created.
	LabSubnetName pulumi.StringInput `pulumi:"labSubnetName"`
	// The ID of the Dev Test Virtual Network where this Virtual Machine should be created. Changing this forces a new resource to be created.
	LabVirtualNetworkId pulumi.StringInput `pulumi:"labVirtualNetworkId"`
	// Specifies the supported Azure location where the Dev Test Lab exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the Dev Test Machine. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// Any notes about the Virtual Machine.
	Notes pulumi.StringInput `pulumi:"notes"`
	// The Password associated with the `username` used to login to this Virtual Machine. Changing this forces a new resource to be created.
	Password pulumi.StringInput `pulumi:"password"`
	// The name of the resource group in which the Dev Test Lab resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The Machine Size to use for this Virtual Machine, such as `Standard_F2`. Changing this forces a new resource to be created.
	Size pulumi.StringInput `pulumi:"size"`
	// The SSH Key associated with the `username` used to login to this Virtual Machine. Changing this forces a new resource to be created.
	SshKey pulumi.StringInput `pulumi:"sshKey"`
	// The type of Storage to use on this Virtual Machine. Possible values are `Standard` and `Premium`.
	StorageType pulumi.StringInput `pulumi:"storageType"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The unique immutable identifier of the Virtual Machine.
	UniqueIdentifier pulumi.StringInput `pulumi:"uniqueIdentifier"`
	// The Username associated with the local administrator on this Virtual Machine. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
}

// The set of arguments for constructing a LinuxVirtualMachine resource.
type LinuxVirtualMachineArgs struct {
	// Can this Virtual Machine be claimed by users? Defaults to `true`.
	AllowClaim pulumi.BoolInput `pulumi:"allowClaim"`
	// Should the Virtual Machine be created without a Public IP Address? Changing this forces a new resource to be created.
	DisallowPublicIpAddress pulumi.BoolInput `pulumi:"disallowPublicIpAddress"`
	// A `galleryImageReference` block as defined below.
	GalleryImageReference LinuxVirtualMachineGalleryImageReferenceInput `pulumi:"galleryImageReference"`
	// One or more `inboundNatRule` blocks as defined below. Changing this forces a new resource to be created.
	InboundNatRules LinuxVirtualMachineInboundNatRulesArrayInput `pulumi:"inboundNatRules"`
	// Specifies the name of the Dev Test Lab in which the Virtual Machine should be created. Changing this forces a new resource to be created.
	LabName pulumi.StringInput `pulumi:"labName"`
	// The name of a Subnet within the Dev Test Virtual Network where this machine should exist. Changing this forces a new resource to be created.
	LabSubnetName pulumi.StringInput `pulumi:"labSubnetName"`
	// The ID of the Dev Test Virtual Network where this Virtual Machine should be created. Changing this forces a new resource to be created.
	LabVirtualNetworkId pulumi.StringInput `pulumi:"labVirtualNetworkId"`
	// Specifies the supported Azure location where the Dev Test Lab exists. Changing this forces a new resource to be created.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the Dev Test Machine. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// Any notes about the Virtual Machine.
	Notes pulumi.StringInput `pulumi:"notes"`
	// The Password associated with the `username` used to login to this Virtual Machine. Changing this forces a new resource to be created.
	Password pulumi.StringInput `pulumi:"password"`
	// The name of the resource group in which the Dev Test Lab resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The Machine Size to use for this Virtual Machine, such as `Standard_F2`. Changing this forces a new resource to be created.
	Size pulumi.StringInput `pulumi:"size"`
	// The SSH Key associated with the `username` used to login to this Virtual Machine. Changing this forces a new resource to be created.
	SshKey pulumi.StringInput `pulumi:"sshKey"`
	// The type of Storage to use on this Virtual Machine. Possible values are `Standard` and `Premium`.
	StorageType pulumi.StringInput `pulumi:"storageType"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.MapInput `pulumi:"tags"`
	// The Username associated with the local administrator on this Virtual Machine. Changing this forces a new resource to be created.
	Username pulumi.StringInput `pulumi:"username"`
}
type LinuxVirtualMachineGalleryImageReference struct {
	Offer string `pulumi:"offer"`
	Publisher string `pulumi:"publisher"`
	Sku string `pulumi:"sku"`
	Version string `pulumi:"version"`
}
var linuxVirtualMachineGalleryImageReferenceType = reflect.TypeOf((*LinuxVirtualMachineGalleryImageReference)(nil)).Elem()

type LinuxVirtualMachineGalleryImageReferenceInput interface {
	pulumi.Input

	ToLinuxVirtualMachineGalleryImageReferenceOutput() LinuxVirtualMachineGalleryImageReferenceOutput
	ToLinuxVirtualMachineGalleryImageReferenceOutputWithContext(ctx context.Context) LinuxVirtualMachineGalleryImageReferenceOutput
}

type LinuxVirtualMachineGalleryImageReferenceArgs struct {
	Offer pulumi.StringInput `pulumi:"offer"`
	Publisher pulumi.StringInput `pulumi:"publisher"`
	Sku pulumi.StringInput `pulumi:"sku"`
	Version pulumi.StringInput `pulumi:"version"`
}

func (LinuxVirtualMachineGalleryImageReferenceArgs) ElementType() reflect.Type {
	return linuxVirtualMachineGalleryImageReferenceType
}

func (a LinuxVirtualMachineGalleryImageReferenceArgs) ToLinuxVirtualMachineGalleryImageReferenceOutput() LinuxVirtualMachineGalleryImageReferenceOutput {
	return pulumi.ToOutput(a).(LinuxVirtualMachineGalleryImageReferenceOutput)
}

func (a LinuxVirtualMachineGalleryImageReferenceArgs) ToLinuxVirtualMachineGalleryImageReferenceOutputWithContext(ctx context.Context) LinuxVirtualMachineGalleryImageReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LinuxVirtualMachineGalleryImageReferenceOutput)
}

type LinuxVirtualMachineGalleryImageReferenceOutput struct { *pulumi.OutputState }

func (o LinuxVirtualMachineGalleryImageReferenceOutput) Offer() pulumi.StringOutput {
	return o.Apply(func(v LinuxVirtualMachineGalleryImageReference) string {
		return v.Offer
	}).(pulumi.StringOutput)
}

func (o LinuxVirtualMachineGalleryImageReferenceOutput) Publisher() pulumi.StringOutput {
	return o.Apply(func(v LinuxVirtualMachineGalleryImageReference) string {
		return v.Publisher
	}).(pulumi.StringOutput)
}

func (o LinuxVirtualMachineGalleryImageReferenceOutput) Sku() pulumi.StringOutput {
	return o.Apply(func(v LinuxVirtualMachineGalleryImageReference) string {
		return v.Sku
	}).(pulumi.StringOutput)
}

func (o LinuxVirtualMachineGalleryImageReferenceOutput) Version() pulumi.StringOutput {
	return o.Apply(func(v LinuxVirtualMachineGalleryImageReference) string {
		return v.Version
	}).(pulumi.StringOutput)
}

func (LinuxVirtualMachineGalleryImageReferenceOutput) ElementType() reflect.Type {
	return linuxVirtualMachineGalleryImageReferenceType
}

func (o LinuxVirtualMachineGalleryImageReferenceOutput) ToLinuxVirtualMachineGalleryImageReferenceOutput() LinuxVirtualMachineGalleryImageReferenceOutput {
	return o
}

func (o LinuxVirtualMachineGalleryImageReferenceOutput) ToLinuxVirtualMachineGalleryImageReferenceOutputWithContext(ctx context.Context) LinuxVirtualMachineGalleryImageReferenceOutput {
	return o
}

func init() { pulumi.RegisterOutputType(LinuxVirtualMachineGalleryImageReferenceOutput{}) }

type LinuxVirtualMachineInboundNatRules struct {
	BackendPort int `pulumi:"backendPort"`
	// The frontend port associated with this Inbound NAT Rule.
	FrontendPort *int `pulumi:"frontendPort"`
	Protocol string `pulumi:"protocol"`
}
var linuxVirtualMachineInboundNatRulesType = reflect.TypeOf((*LinuxVirtualMachineInboundNatRules)(nil)).Elem()

type LinuxVirtualMachineInboundNatRulesInput interface {
	pulumi.Input

	ToLinuxVirtualMachineInboundNatRulesOutput() LinuxVirtualMachineInboundNatRulesOutput
	ToLinuxVirtualMachineInboundNatRulesOutputWithContext(ctx context.Context) LinuxVirtualMachineInboundNatRulesOutput
}

type LinuxVirtualMachineInboundNatRulesArgs struct {
	BackendPort pulumi.IntInput `pulumi:"backendPort"`
	// The frontend port associated with this Inbound NAT Rule.
	FrontendPort pulumi.IntInput `pulumi:"frontendPort"`
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (LinuxVirtualMachineInboundNatRulesArgs) ElementType() reflect.Type {
	return linuxVirtualMachineInboundNatRulesType
}

func (a LinuxVirtualMachineInboundNatRulesArgs) ToLinuxVirtualMachineInboundNatRulesOutput() LinuxVirtualMachineInboundNatRulesOutput {
	return pulumi.ToOutput(a).(LinuxVirtualMachineInboundNatRulesOutput)
}

func (a LinuxVirtualMachineInboundNatRulesArgs) ToLinuxVirtualMachineInboundNatRulesOutputWithContext(ctx context.Context) LinuxVirtualMachineInboundNatRulesOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LinuxVirtualMachineInboundNatRulesOutput)
}

type LinuxVirtualMachineInboundNatRulesOutput struct { *pulumi.OutputState }

func (o LinuxVirtualMachineInboundNatRulesOutput) BackendPort() pulumi.IntOutput {
	return o.Apply(func(v LinuxVirtualMachineInboundNatRules) int {
		return v.BackendPort
	}).(pulumi.IntOutput)
}

// The frontend port associated with this Inbound NAT Rule.
func (o LinuxVirtualMachineInboundNatRulesOutput) FrontendPort() pulumi.IntOutput {
	return o.Apply(func(v LinuxVirtualMachineInboundNatRules) int {
		if v.FrontendPort == nil { return *new(int) } else { return *v.FrontendPort }
	}).(pulumi.IntOutput)
}

func (o LinuxVirtualMachineInboundNatRulesOutput) Protocol() pulumi.StringOutput {
	return o.Apply(func(v LinuxVirtualMachineInboundNatRules) string {
		return v.Protocol
	}).(pulumi.StringOutput)
}

func (LinuxVirtualMachineInboundNatRulesOutput) ElementType() reflect.Type {
	return linuxVirtualMachineInboundNatRulesType
}

func (o LinuxVirtualMachineInboundNatRulesOutput) ToLinuxVirtualMachineInboundNatRulesOutput() LinuxVirtualMachineInboundNatRulesOutput {
	return o
}

func (o LinuxVirtualMachineInboundNatRulesOutput) ToLinuxVirtualMachineInboundNatRulesOutputWithContext(ctx context.Context) LinuxVirtualMachineInboundNatRulesOutput {
	return o
}

func init() { pulumi.RegisterOutputType(LinuxVirtualMachineInboundNatRulesOutput{}) }

var linuxVirtualMachineInboundNatRulesArrayType = reflect.TypeOf((*[]LinuxVirtualMachineInboundNatRules)(nil)).Elem()

type LinuxVirtualMachineInboundNatRulesArrayInput interface {
	pulumi.Input

	ToLinuxVirtualMachineInboundNatRulesArrayOutput() LinuxVirtualMachineInboundNatRulesArrayOutput
	ToLinuxVirtualMachineInboundNatRulesArrayOutputWithContext(ctx context.Context) LinuxVirtualMachineInboundNatRulesArrayOutput
}

type LinuxVirtualMachineInboundNatRulesArrayArgs []LinuxVirtualMachineInboundNatRulesInput

func (LinuxVirtualMachineInboundNatRulesArrayArgs) ElementType() reflect.Type {
	return linuxVirtualMachineInboundNatRulesArrayType
}

func (a LinuxVirtualMachineInboundNatRulesArrayArgs) ToLinuxVirtualMachineInboundNatRulesArrayOutput() LinuxVirtualMachineInboundNatRulesArrayOutput {
	return pulumi.ToOutput(a).(LinuxVirtualMachineInboundNatRulesArrayOutput)
}

func (a LinuxVirtualMachineInboundNatRulesArrayArgs) ToLinuxVirtualMachineInboundNatRulesArrayOutputWithContext(ctx context.Context) LinuxVirtualMachineInboundNatRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, a).(LinuxVirtualMachineInboundNatRulesArrayOutput)
}

type LinuxVirtualMachineInboundNatRulesArrayOutput struct { *pulumi.OutputState }

func (o LinuxVirtualMachineInboundNatRulesArrayOutput) Index(i pulumi.IntInput) LinuxVirtualMachineInboundNatRulesOutput {
	return pulumi.All(o, i).Apply(func(vs []interface{}) LinuxVirtualMachineInboundNatRules {
		return vs[0].([]LinuxVirtualMachineInboundNatRules)[vs[1].(int)]
	}).(LinuxVirtualMachineInboundNatRulesOutput)
}

func (LinuxVirtualMachineInboundNatRulesArrayOutput) ElementType() reflect.Type {
	return linuxVirtualMachineInboundNatRulesArrayType
}

func (o LinuxVirtualMachineInboundNatRulesArrayOutput) ToLinuxVirtualMachineInboundNatRulesArrayOutput() LinuxVirtualMachineInboundNatRulesArrayOutput {
	return o
}

func (o LinuxVirtualMachineInboundNatRulesArrayOutput) ToLinuxVirtualMachineInboundNatRulesArrayOutputWithContext(ctx context.Context) LinuxVirtualMachineInboundNatRulesArrayOutput {
	return o
}

func init() { pulumi.RegisterOutputType(LinuxVirtualMachineInboundNatRulesArrayOutput{}) }

