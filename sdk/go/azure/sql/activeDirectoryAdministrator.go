// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sql

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Allows you to set a user or group as the AD administrator for an Azure SQL server
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/sql_active_directory_administrator.html.markdown.
type ActiveDirectoryAdministrator struct {
	pulumi.CustomResourceState

	// The login name of the principal to set as the server administrator
	Login pulumi.StringOutput `pulumi:"login"`

	// The ID of the principal to set as the server administrator
	ObjectId pulumi.StringOutput `pulumi:"objectId"`

	// The name of the resource group for the SQL server. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`

	// The name of the SQL Server on which to set the administrator. Changing this forces a new resource to be created.
	ServerName pulumi.StringOutput `pulumi:"serverName"`

	// The Azure Tenant ID
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewActiveDirectoryAdministrator registers a new resource with the given unique name, arguments, and options.
func NewActiveDirectoryAdministrator(ctx *pulumi.Context,
	name string, args *ActiveDirectoryAdministratorArgs, opts ...pulumi.ResourceOption) (*ActiveDirectoryAdministrator, error) {
	if args == nil || args.Login == nil {
		return nil, errors.New("missing required argument 'Login'")
	}
	if args == nil || args.ObjectId == nil {
		return nil, errors.New("missing required argument 'ObjectId'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ServerName == nil {
		return nil, errors.New("missing required argument 'ServerName'")
	}
	if args == nil || args.TenantId == nil {
		return nil, errors.New("missing required argument 'TenantId'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Login; i != nil { inputs["login"] = i.ToStringOutput() }
		if i := args.ObjectId; i != nil { inputs["objectId"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := args.ServerName; i != nil { inputs["serverName"] = i.ToStringOutput() }
		if i := args.TenantId; i != nil { inputs["tenantId"] = i.ToStringOutput() }
	}
	var resource ActiveDirectoryAdministrator
	err := ctx.RegisterResource("azure:sql/activeDirectoryAdministrator:ActiveDirectoryAdministrator", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActiveDirectoryAdministrator gets an existing ActiveDirectoryAdministrator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActiveDirectoryAdministrator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActiveDirectoryAdministratorState, opts ...pulumi.ResourceOption) (*ActiveDirectoryAdministrator, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Login; i != nil { inputs["login"] = i.ToStringOutput() }
		if i := state.ObjectId; i != nil { inputs["objectId"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
		if i := state.ServerName; i != nil { inputs["serverName"] = i.ToStringOutput() }
		if i := state.TenantId; i != nil { inputs["tenantId"] = i.ToStringOutput() }
	}
	var resource ActiveDirectoryAdministrator
	err := ctx.ReadResource("azure:sql/activeDirectoryAdministrator:ActiveDirectoryAdministrator", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActiveDirectoryAdministrator resources.
type ActiveDirectoryAdministratorState struct {
	// The login name of the principal to set as the server administrator
	Login pulumi.StringInput `pulumi:"login"`
	// The ID of the principal to set as the server administrator
	ObjectId pulumi.StringInput `pulumi:"objectId"`
	// The name of the resource group for the SQL server. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the SQL Server on which to set the administrator. Changing this forces a new resource to be created.
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// The Azure Tenant ID
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

// The set of arguments for constructing a ActiveDirectoryAdministrator resource.
type ActiveDirectoryAdministratorArgs struct {
	// The login name of the principal to set as the server administrator
	Login pulumi.StringInput `pulumi:"login"`
	// The ID of the principal to set as the server administrator
	ObjectId pulumi.StringInput `pulumi:"objectId"`
	// The name of the resource group for the SQL server. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the SQL Server on which to set the administrator. Changing this forces a new resource to be created.
	ServerName pulumi.StringInput `pulumi:"serverName"`
	// The Azure Tenant ID
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}
