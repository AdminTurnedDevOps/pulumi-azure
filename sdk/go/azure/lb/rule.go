// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package lb

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Load Balancer Rule.
// 
// > **NOTE** When using this resource, the Load Balancer needs to have a FrontEnd IP Configuration Attached
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/lb_rule.html.markdown.
type Rule struct {
	pulumi.CustomResourceState

	// A reference to a Backend Address Pool over which this Load Balancing Rule operates.
	BackendAddressPoolId pulumi.StringOutput `pulumi:"backendAddressPoolId"`

	// The port used for internal connections on the endpoint. Possible values range between 0 and 65535, inclusive.
	BackendPort pulumi.IntOutput `pulumi:"backendPort"`

	// Indicates whether outbound snat is disabled or enabled. Default false.
	DisableOutboundSnat pulumi.BoolOutput `pulumi:"disableOutboundSnat"`

	// Floating IP is pertinent to failover scenarios: a "floating” IP is reassigned to a secondary server in case the primary server fails. Floating IP is required for SQL AlwaysOn.
	EnableFloatingIp pulumi.BoolOutput `pulumi:"enableFloatingIp"`

	FrontendIpConfigurationId pulumi.StringOutput `pulumi:"frontendIpConfigurationId"`

	// The name of the frontend IP configuration to which the rule is associated.
	FrontendIpConfigurationName pulumi.StringOutput `pulumi:"frontendIpConfigurationName"`

	// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 0 and 65534, inclusive.
	FrontendPort pulumi.IntOutput `pulumi:"frontendPort"`

	// Specifies the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to Tcp.
	IdleTimeoutInMinutes pulumi.IntOutput `pulumi:"idleTimeoutInMinutes"`

	// Specifies the load balancing distribution type to be used by the Load Balancer. Possible values are: `Default` – The load balancer is configured to use a 5 tuple hash to map traffic to available servers. `SourceIP` – The load balancer is configured to use a 2 tuple hash to map traffic to available servers. `SourceIPProtocol` – The load balancer is configured to use a 3 tuple hash to map traffic to available servers. Also known as Session Persistence, where  the options are called `None`, `Client IP` and `Client IP and Protocol` respectively.
	LoadDistribution pulumi.StringOutput `pulumi:"loadDistribution"`

	// The ID of the Load Balancer in which to create the Rule.
	LoadbalancerId pulumi.StringOutput `pulumi:"loadbalancerId"`

	Location pulumi.StringOutput `pulumi:"location"`

	// Specifies the name of the LB Rule.
	Name pulumi.StringOutput `pulumi:"name"`

	// A reference to a Probe used by this Load Balancing Rule.
	ProbeId pulumi.StringOutput `pulumi:"probeId"`

	// The transport protocol for the external endpoint. Possible values are `Tcp`, `Udp` or `All`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`

	// The name of the resource group in which to create the resource.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewRule registers a new resource with the given unique name, arguments, and options.
func NewRule(ctx *pulumi.Context,
	name string, args *RuleArgs, opts ...pulumi.ResourceOption) (*Rule, error) {
	if args == nil || args.BackendPort == nil {
		return nil, errors.New("missing required argument 'BackendPort'")
	}
	if args == nil || args.FrontendIpConfigurationName == nil {
		return nil, errors.New("missing required argument 'FrontendIpConfigurationName'")
	}
	if args == nil || args.FrontendPort == nil {
		return nil, errors.New("missing required argument 'FrontendPort'")
	}
	if args == nil || args.LoadbalancerId == nil {
		return nil, errors.New("missing required argument 'LoadbalancerId'")
	}
	if args == nil || args.Protocol == nil {
		return nil, errors.New("missing required argument 'Protocol'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.BackendAddressPoolId; i != nil { inputs["backendAddressPoolId"] = i.ToStringOutput() }
		if i := args.BackendPort; i != nil { inputs["backendPort"] = i.ToIntOutput() }
		if i := args.DisableOutboundSnat; i != nil { inputs["disableOutboundSnat"] = i.ToBoolOutput() }
		if i := args.EnableFloatingIp; i != nil { inputs["enableFloatingIp"] = i.ToBoolOutput() }
		if i := args.FrontendIpConfigurationName; i != nil { inputs["frontendIpConfigurationName"] = i.ToStringOutput() }
		if i := args.FrontendPort; i != nil { inputs["frontendPort"] = i.ToIntOutput() }
		if i := args.IdleTimeoutInMinutes; i != nil { inputs["idleTimeoutInMinutes"] = i.ToIntOutput() }
		if i := args.LoadDistribution; i != nil { inputs["loadDistribution"] = i.ToStringOutput() }
		if i := args.LoadbalancerId; i != nil { inputs["loadbalancerId"] = i.ToStringOutput() }
		if i := args.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.ProbeId; i != nil { inputs["probeId"] = i.ToStringOutput() }
		if i := args.Protocol; i != nil { inputs["protocol"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
	}
	var resource Rule
	err := ctx.RegisterResource("azure:lb/rule:Rule", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRule gets an existing Rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleState, opts ...pulumi.ResourceOption) (*Rule, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.BackendAddressPoolId; i != nil { inputs["backendAddressPoolId"] = i.ToStringOutput() }
		if i := state.BackendPort; i != nil { inputs["backendPort"] = i.ToIntOutput() }
		if i := state.DisableOutboundSnat; i != nil { inputs["disableOutboundSnat"] = i.ToBoolOutput() }
		if i := state.EnableFloatingIp; i != nil { inputs["enableFloatingIp"] = i.ToBoolOutput() }
		if i := state.FrontendIpConfigurationId; i != nil { inputs["frontendIpConfigurationId"] = i.ToStringOutput() }
		if i := state.FrontendIpConfigurationName; i != nil { inputs["frontendIpConfigurationName"] = i.ToStringOutput() }
		if i := state.FrontendPort; i != nil { inputs["frontendPort"] = i.ToIntOutput() }
		if i := state.IdleTimeoutInMinutes; i != nil { inputs["idleTimeoutInMinutes"] = i.ToIntOutput() }
		if i := state.LoadDistribution; i != nil { inputs["loadDistribution"] = i.ToStringOutput() }
		if i := state.LoadbalancerId; i != nil { inputs["loadbalancerId"] = i.ToStringOutput() }
		if i := state.Location; i != nil { inputs["location"] = i.ToStringOutput() }
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.ProbeId; i != nil { inputs["probeId"] = i.ToStringOutput() }
		if i := state.Protocol; i != nil { inputs["protocol"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
	}
	var resource Rule
	err := ctx.ReadResource("azure:lb/rule:Rule", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rule resources.
type RuleState struct {
	// A reference to a Backend Address Pool over which this Load Balancing Rule operates.
	BackendAddressPoolId pulumi.StringInput `pulumi:"backendAddressPoolId"`
	// The port used for internal connections on the endpoint. Possible values range between 0 and 65535, inclusive.
	BackendPort pulumi.IntInput `pulumi:"backendPort"`
	// Indicates whether outbound snat is disabled or enabled. Default false.
	DisableOutboundSnat pulumi.BoolInput `pulumi:"disableOutboundSnat"`
	// Floating IP is pertinent to failover scenarios: a "floating” IP is reassigned to a secondary server in case the primary server fails. Floating IP is required for SQL AlwaysOn.
	EnableFloatingIp pulumi.BoolInput `pulumi:"enableFloatingIp"`
	FrontendIpConfigurationId pulumi.StringInput `pulumi:"frontendIpConfigurationId"`
	// The name of the frontend IP configuration to which the rule is associated.
	FrontendIpConfigurationName pulumi.StringInput `pulumi:"frontendIpConfigurationName"`
	// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 0 and 65534, inclusive.
	FrontendPort pulumi.IntInput `pulumi:"frontendPort"`
	// Specifies the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to Tcp.
	IdleTimeoutInMinutes pulumi.IntInput `pulumi:"idleTimeoutInMinutes"`
	// Specifies the load balancing distribution type to be used by the Load Balancer. Possible values are: `Default` – The load balancer is configured to use a 5 tuple hash to map traffic to available servers. `SourceIP` – The load balancer is configured to use a 2 tuple hash to map traffic to available servers. `SourceIPProtocol` – The load balancer is configured to use a 3 tuple hash to map traffic to available servers. Also known as Session Persistence, where  the options are called `None`, `Client IP` and `Client IP and Protocol` respectively.
	LoadDistribution pulumi.StringInput `pulumi:"loadDistribution"`
	// The ID of the Load Balancer in which to create the Rule.
	LoadbalancerId pulumi.StringInput `pulumi:"loadbalancerId"`
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the LB Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// A reference to a Probe used by this Load Balancing Rule.
	ProbeId pulumi.StringInput `pulumi:"probeId"`
	// The transport protocol for the external endpoint. Possible values are `Tcp`, `Udp` or `All`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// The name of the resource group in which to create the resource.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Rule resource.
type RuleArgs struct {
	// A reference to a Backend Address Pool over which this Load Balancing Rule operates.
	BackendAddressPoolId pulumi.StringInput `pulumi:"backendAddressPoolId"`
	// The port used for internal connections on the endpoint. Possible values range between 0 and 65535, inclusive.
	BackendPort pulumi.IntInput `pulumi:"backendPort"`
	// Indicates whether outbound snat is disabled or enabled. Default false.
	DisableOutboundSnat pulumi.BoolInput `pulumi:"disableOutboundSnat"`
	// Floating IP is pertinent to failover scenarios: a "floating” IP is reassigned to a secondary server in case the primary server fails. Floating IP is required for SQL AlwaysOn.
	EnableFloatingIp pulumi.BoolInput `pulumi:"enableFloatingIp"`
	// The name of the frontend IP configuration to which the rule is associated.
	FrontendIpConfigurationName pulumi.StringInput `pulumi:"frontendIpConfigurationName"`
	// The port for the external endpoint. Port numbers for each Rule must be unique within the Load Balancer. Possible values range between 0 and 65534, inclusive.
	FrontendPort pulumi.IntInput `pulumi:"frontendPort"`
	// Specifies the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to Tcp.
	IdleTimeoutInMinutes pulumi.IntInput `pulumi:"idleTimeoutInMinutes"`
	// Specifies the load balancing distribution type to be used by the Load Balancer. Possible values are: `Default` – The load balancer is configured to use a 5 tuple hash to map traffic to available servers. `SourceIP` – The load balancer is configured to use a 2 tuple hash to map traffic to available servers. `SourceIPProtocol` – The load balancer is configured to use a 3 tuple hash to map traffic to available servers. Also known as Session Persistence, where  the options are called `None`, `Client IP` and `Client IP and Protocol` respectively.
	LoadDistribution pulumi.StringInput `pulumi:"loadDistribution"`
	// The ID of the Load Balancer in which to create the Rule.
	LoadbalancerId pulumi.StringInput `pulumi:"loadbalancerId"`
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the LB Rule.
	Name pulumi.StringInput `pulumi:"name"`
	// A reference to a Probe used by this Load Balancing Rule.
	ProbeId pulumi.StringInput `pulumi:"probeId"`
	// The transport protocol for the external endpoint. Possible values are `Tcp`, `Udp` or `All`.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// The name of the resource group in which to create the resource.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}
