// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package recoveryservices

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Azure recovery vault protection container mapping. A network protection container mapping decides how to translate the protection container when a VM is migrated from one region to another.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/recovery_services_protection_container_mapping.html.markdown.
type ProtectionContainerMapping struct {
	pulumi.CustomResourceState

	// The name of the network mapping.
	Name pulumi.StringOutput `pulumi:"name"`

	// Name of fabric that should contains the protection container to map.
	RecoveryFabricName pulumi.StringOutput `pulumi:"recoveryFabricName"`

	// Id of the policy to use for this mapping.
	RecoveryReplicationPolicyId pulumi.StringOutput `pulumi:"recoveryReplicationPolicyId"`

	// Name of the protection container to map.
	RecoverySourceProtectionContainerName pulumi.StringOutput `pulumi:"recoverySourceProtectionContainerName"`

	// Id of protection container to map to.
	RecoveryTargetProtectionContainerId pulumi.StringOutput `pulumi:"recoveryTargetProtectionContainerId"`

	// The name of the vault that should be updated.
	RecoveryVaultName pulumi.StringOutput `pulumi:"recoveryVaultName"`

	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewProtectionContainerMapping registers a new resource with the given unique name, arguments, and options.
func NewProtectionContainerMapping(ctx *pulumi.Context,
	name string, args *ProtectionContainerMappingArgs, opts ...pulumi.ResourceOption) (*ProtectionContainerMapping, error) {
	if args == nil || args.RecoveryFabricName == nil {
		return nil, errors.New("missing required argument 'RecoveryFabricName'")
	}
	if args == nil || args.RecoveryReplicationPolicyId == nil {
		return nil, errors.New("missing required argument 'RecoveryReplicationPolicyId'")
	}
	if args == nil || args.RecoverySourceProtectionContainerName == nil {
		return nil, errors.New("missing required argument 'RecoverySourceProtectionContainerName'")
	}
	if args == nil || args.RecoveryTargetProtectionContainerId == nil {
		return nil, errors.New("missing required argument 'RecoveryTargetProtectionContainerId'")
	}
	if args == nil || args.RecoveryVaultName == nil {
		return nil, errors.New("missing required argument 'RecoveryVaultName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := map[string]pulumi.Input{}
	if args != nil {
		if i := args.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := args.RecoveryFabricName; i != nil { inputs["recoveryFabricName"] = i.ToStringOutput() }
		if i := args.RecoveryReplicationPolicyId; i != nil { inputs["recoveryReplicationPolicyId"] = i.ToStringOutput() }
		if i := args.RecoverySourceProtectionContainerName; i != nil { inputs["recoverySourceProtectionContainerName"] = i.ToStringOutput() }
		if i := args.RecoveryTargetProtectionContainerId; i != nil { inputs["recoveryTargetProtectionContainerId"] = i.ToStringOutput() }
		if i := args.RecoveryVaultName; i != nil { inputs["recoveryVaultName"] = i.ToStringOutput() }
		if i := args.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
	}
	var resource ProtectionContainerMapping
	err := ctx.RegisterResource("azure:recoveryservices/protectionContainerMapping:ProtectionContainerMapping", name, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProtectionContainerMapping gets an existing ProtectionContainerMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProtectionContainerMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProtectionContainerMappingState, opts ...pulumi.ResourceOption) (*ProtectionContainerMapping, error) {
	inputs := map[string]pulumi.Input{}
	if state != nil {
		if i := state.Name; i != nil { inputs["name"] = i.ToStringOutput() }
		if i := state.RecoveryFabricName; i != nil { inputs["recoveryFabricName"] = i.ToStringOutput() }
		if i := state.RecoveryReplicationPolicyId; i != nil { inputs["recoveryReplicationPolicyId"] = i.ToStringOutput() }
		if i := state.RecoverySourceProtectionContainerName; i != nil { inputs["recoverySourceProtectionContainerName"] = i.ToStringOutput() }
		if i := state.RecoveryTargetProtectionContainerId; i != nil { inputs["recoveryTargetProtectionContainerId"] = i.ToStringOutput() }
		if i := state.RecoveryVaultName; i != nil { inputs["recoveryVaultName"] = i.ToStringOutput() }
		if i := state.ResourceGroupName; i != nil { inputs["resourceGroupName"] = i.ToStringOutput() }
	}
	var resource ProtectionContainerMapping
	err := ctx.ReadResource("azure:recoveryservices/protectionContainerMapping:ProtectionContainerMapping", name, id, inputs, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProtectionContainerMapping resources.
type ProtectionContainerMappingState struct {
	// The name of the network mapping.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of fabric that should contains the protection container to map.
	RecoveryFabricName pulumi.StringInput `pulumi:"recoveryFabricName"`
	// Id of the policy to use for this mapping.
	RecoveryReplicationPolicyId pulumi.StringInput `pulumi:"recoveryReplicationPolicyId"`
	// Name of the protection container to map.
	RecoverySourceProtectionContainerName pulumi.StringInput `pulumi:"recoverySourceProtectionContainerName"`
	// Id of protection container to map to.
	RecoveryTargetProtectionContainerId pulumi.StringInput `pulumi:"recoveryTargetProtectionContainerId"`
	// The name of the vault that should be updated.
	RecoveryVaultName pulumi.StringInput `pulumi:"recoveryVaultName"`
	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a ProtectionContainerMapping resource.
type ProtectionContainerMappingArgs struct {
	// The name of the network mapping.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of fabric that should contains the protection container to map.
	RecoveryFabricName pulumi.StringInput `pulumi:"recoveryFabricName"`
	// Id of the policy to use for this mapping.
	RecoveryReplicationPolicyId pulumi.StringInput `pulumi:"recoveryReplicationPolicyId"`
	// Name of the protection container to map.
	RecoverySourceProtectionContainerName pulumi.StringInput `pulumi:"recoverySourceProtectionContainerName"`
	// Id of protection container to map to.
	RecoveryTargetProtectionContainerId pulumi.StringInput `pulumi:"recoveryTargetProtectionContainerId"`
	// The name of the vault that should be updated.
	RecoveryVaultName pulumi.StringInput `pulumi:"recoveryVaultName"`
	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}
