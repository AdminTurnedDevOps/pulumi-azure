// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class NetworkInterface extends lumi.NamedResource implements NetworkInterfaceArgs {
    public readonly appliedDnsServers: string[];
    public readonly dnsServers: string[];
    public readonly enableIpForwarding?: boolean;
    public readonly internalDnsNameLabel: string;
    public readonly internalFqdn: string;
    public readonly ipConfiguration: { loadBalancerBackendAddressPoolsIds: string[], loadBalancerInboundNatRulesIds: string[], name: string, privateIpAddress: string, privateIpAddressAllocation: string, publicIpAddressId: string, subnetId: string }[];
    public readonly location: string;
    public readonly macAddress: string;
    public readonly networkInterfaceName?: string;
    public readonly networkSecurityGroupId: string;
    public /*out*/ readonly privateIpAddress: string;
    public readonly resourceGroupName: string;
    public readonly tags: {[key: string]: any};
    public readonly virtualMachineId: string;

    constructor(name: string, args: NetworkInterfaceArgs) {
        super(name);
        this.appliedDnsServers = args.appliedDnsServers;
        this.dnsServers = args.dnsServers;
        this.enableIpForwarding = args.enableIpForwarding;
        this.internalDnsNameLabel = args.internalDnsNameLabel;
        this.internalFqdn = args.internalFqdn;
        if (lumirt.defaultIfComputed(args.ipConfiguration, "") === undefined) {
            throw new Error("Property argument 'ipConfiguration' is required, but was missing");
        }
        this.ipConfiguration = args.ipConfiguration;
        if (lumirt.defaultIfComputed(args.location, "") === undefined) {
            throw new Error("Property argument 'location' is required, but was missing");
        }
        this.location = args.location;
        this.macAddress = args.macAddress;
        this.networkInterfaceName = args.networkInterfaceName;
        this.networkSecurityGroupId = args.networkSecurityGroupId;
        if (lumirt.defaultIfComputed(args.resourceGroupName, "") === undefined) {
            throw new Error("Property argument 'resourceGroupName' is required, but was missing");
        }
        this.resourceGroupName = args.resourceGroupName;
        this.tags = args.tags;
        this.virtualMachineId = args.virtualMachineId;
    }
}

export interface NetworkInterfaceArgs {
    readonly appliedDnsServers?: string[];
    readonly dnsServers?: string[];
    readonly enableIpForwarding?: boolean;
    readonly internalDnsNameLabel?: string;
    readonly internalFqdn?: string;
    readonly ipConfiguration: { loadBalancerBackendAddressPoolsIds: string[], loadBalancerInboundNatRulesIds: string[], name: string, privateIpAddress: string, privateIpAddressAllocation: string, publicIpAddressId: string, subnetId: string }[];
    readonly location: string;
    readonly macAddress?: string;
    readonly networkInterfaceName?: string;
    readonly networkSecurityGroupId?: string;
    readonly resourceGroupName: string;
    readonly tags?: {[key: string]: any};
    readonly virtualMachineId?: string;
}

