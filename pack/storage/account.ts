// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Account extends lumi.NamedResource implements AccountArgs {
    public readonly accessTier: string;
    public readonly accountKind?: string;
    public readonly accountType: string;
    public readonly enableBlobEncryption?: boolean;
    public readonly location: string;
    public readonly accountName?: string;
    public /*out*/ readonly primaryAccessKey: string;
    public /*out*/ readonly primaryBlobConnectionString: string;
    public /*out*/ readonly primaryBlobEndpoint: string;
    public /*out*/ readonly primaryFileEndpoint: string;
    public /*out*/ readonly primaryLocation: string;
    public /*out*/ readonly primaryQueueEndpoint: string;
    public /*out*/ readonly primaryTableEndpoint: string;
    public readonly resourceGroupName: string;
    public /*out*/ readonly secondaryAccessKey: string;
    public /*out*/ readonly secondaryBlobConnectionString: string;
    public /*out*/ readonly secondaryBlobEndpoint: string;
    public /*out*/ readonly secondaryLocation: string;
    public /*out*/ readonly secondaryQueueEndpoint: string;
    public /*out*/ readonly secondaryTableEndpoint: string;
    public readonly tags: {[key: string]: any};

    constructor(name: string, args: AccountArgs) {
        super(name);
        this.accessTier = args.accessTier;
        this.accountKind = args.accountKind;
        if (lumirt.defaultIfComputed(args.accountType, "") === undefined) {
            throw new Error("Property argument 'accountType' is required, but was missing");
        }
        this.accountType = args.accountType;
        this.enableBlobEncryption = args.enableBlobEncryption;
        if (lumirt.defaultIfComputed(args.location, "") === undefined) {
            throw new Error("Property argument 'location' is required, but was missing");
        }
        this.location = args.location;
        this.accountName = args.accountName;
        if (lumirt.defaultIfComputed(args.resourceGroupName, "") === undefined) {
            throw new Error("Property argument 'resourceGroupName' is required, but was missing");
        }
        this.resourceGroupName = args.resourceGroupName;
        this.tags = args.tags;
    }
}

export interface AccountArgs {
    readonly accessTier?: string;
    readonly accountKind?: string;
    readonly accountType: string;
    readonly enableBlobEncryption?: boolean;
    readonly location: string;
    readonly accountName?: string;
    readonly resourceGroupName: string;
    readonly tags?: {[key: string]: any};
}

