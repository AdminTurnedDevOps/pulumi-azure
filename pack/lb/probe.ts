// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Probe extends lumi.NamedResource implements ProbeArgs {
    public readonly intervalInSeconds?: number;
    public /*out*/ readonly loadBalancerRules: string[];
    public readonly loadbalancerId: string;
    public readonly location?: string;
    public readonly probeName?: string;
    public readonly numberOfProbes?: number;
    public readonly port: number;
    public readonly protocol: string;
    public readonly requestPath?: string;
    public readonly resourceGroupName: string;

    constructor(name: string, args: ProbeArgs) {
        super(name);
        this.intervalInSeconds = args.intervalInSeconds;
        if (lumirt.defaultIfComputed(args.loadbalancerId, "") === undefined) {
            throw new Error("Property argument 'loadbalancerId' is required, but was missing");
        }
        this.loadbalancerId = args.loadbalancerId;
        this.location = args.location;
        this.probeName = args.probeName;
        this.numberOfProbes = args.numberOfProbes;
        if (lumirt.defaultIfComputed(args.port, "") === undefined) {
            throw new Error("Property argument 'port' is required, but was missing");
        }
        this.port = args.port;
        this.protocol = args.protocol;
        this.requestPath = args.requestPath;
        if (lumirt.defaultIfComputed(args.resourceGroupName, "") === undefined) {
            throw new Error("Property argument 'resourceGroupName' is required, but was missing");
        }
        this.resourceGroupName = args.resourceGroupName;
    }
}

export interface ProbeArgs {
    readonly intervalInSeconds?: number;
    readonly loadbalancerId: string;
    readonly location?: string;
    readonly probeName?: string;
    readonly numberOfProbes?: number;
    readonly port: number;
    readonly protocol?: string;
    readonly requestPath?: string;
    readonly resourceGroupName: string;
}

