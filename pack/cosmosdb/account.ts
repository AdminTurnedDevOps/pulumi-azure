// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Account extends lumi.NamedResource implements AccountArgs {
    public readonly consistencyPolicy: { consistencyLevel: string, maxIntervalInSeconds?: number, maxStalenessPrefix?: number }[];
    public readonly failoverPolicy: { id: string, location: string, priority: number }[];
    public readonly ipRangeFilter?: string;
    public readonly location: string;
    public readonly accountName?: string;
    public readonly offerType: string;
    public /*out*/ readonly primaryMasterKey: string;
    public /*out*/ readonly primaryReadonlyMasterKey: string;
    public readonly resourceGroupName: string;
    public /*out*/ readonly secondaryMasterKey: string;
    public /*out*/ readonly secondaryReadonlyMasterKey: string;
    public readonly tags: {[key: string]: any};

    constructor(name: string, args: AccountArgs) {
        super(name);
        if (lumirt.defaultIfComputed(args.consistencyPolicy, "") === undefined) {
            throw new Error("Property argument 'consistencyPolicy' is required, but was missing");
        }
        this.consistencyPolicy = args.consistencyPolicy;
        if (lumirt.defaultIfComputed(args.failoverPolicy, "") === undefined) {
            throw new Error("Property argument 'failoverPolicy' is required, but was missing");
        }
        this.failoverPolicy = args.failoverPolicy;
        this.ipRangeFilter = args.ipRangeFilter;
        if (lumirt.defaultIfComputed(args.location, "") === undefined) {
            throw new Error("Property argument 'location' is required, but was missing");
        }
        this.location = args.location;
        this.accountName = args.accountName;
        if (lumirt.defaultIfComputed(args.offerType, "") === undefined) {
            throw new Error("Property argument 'offerType' is required, but was missing");
        }
        this.offerType = args.offerType;
        if (lumirt.defaultIfComputed(args.resourceGroupName, "") === undefined) {
            throw new Error("Property argument 'resourceGroupName' is required, but was missing");
        }
        this.resourceGroupName = args.resourceGroupName;
        this.tags = args.tags;
    }
}

export interface AccountArgs {
    readonly consistencyPolicy: { consistencyLevel: string, maxIntervalInSeconds?: number, maxStalenessPrefix?: number }[];
    readonly failoverPolicy: { id: string, location: string, priority: number }[];
    readonly ipRangeFilter?: string;
    readonly location: string;
    readonly accountName?: string;
    readonly offerType: string;
    readonly resourceGroupName: string;
    readonly tags?: {[key: string]: any};
}

