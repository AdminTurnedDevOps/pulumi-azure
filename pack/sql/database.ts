// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Database extends lumi.NamedResource implements DatabaseArgs {
    public readonly collation: string;
    public readonly createMode?: string;
    public /*out*/ readonly creationDate: string;
    public /*out*/ readonly defaultSecondaryLocation: string;
    public readonly edition: string;
    public readonly elasticPoolName: string;
    public /*out*/ readonly encryption: string;
    public readonly location: string;
    public readonly maxSizeBytes: string;
    public readonly databaseName?: string;
    public readonly requestedServiceObjectiveId: string;
    public readonly requestedServiceObjectiveName: string;
    public readonly resourceGroupName: string;
    public readonly restorePointInTime: string;
    public readonly serverName: string;
    public readonly sourceDatabaseDeletionDate: string;
    public readonly sourceDatabaseId: string;
    public readonly tags: {[key: string]: any};

    constructor(name: string, args: DatabaseArgs) {
        super(name);
        this.collation = args.collation;
        this.createMode = args.createMode;
        this.edition = args.edition;
        this.elasticPoolName = args.elasticPoolName;
        if (lumirt.defaultIfComputed(args.location, "") === undefined) {
            throw new Error("Property argument 'location' is required, but was missing");
        }
        this.location = args.location;
        this.maxSizeBytes = args.maxSizeBytes;
        this.databaseName = args.databaseName;
        this.requestedServiceObjectiveId = args.requestedServiceObjectiveId;
        this.requestedServiceObjectiveName = args.requestedServiceObjectiveName;
        if (lumirt.defaultIfComputed(args.resourceGroupName, "") === undefined) {
            throw new Error("Property argument 'resourceGroupName' is required, but was missing");
        }
        this.resourceGroupName = args.resourceGroupName;
        this.restorePointInTime = args.restorePointInTime;
        if (lumirt.defaultIfComputed(args.serverName, "") === undefined) {
            throw new Error("Property argument 'serverName' is required, but was missing");
        }
        this.serverName = args.serverName;
        this.sourceDatabaseDeletionDate = args.sourceDatabaseDeletionDate;
        this.sourceDatabaseId = args.sourceDatabaseId;
        this.tags = args.tags;
    }
}

export interface DatabaseArgs {
    readonly collation?: string;
    readonly createMode?: string;
    readonly edition?: string;
    readonly elasticPoolName?: string;
    readonly location: string;
    readonly maxSizeBytes?: string;
    readonly databaseName?: string;
    readonly requestedServiceObjectiveId?: string;
    readonly requestedServiceObjectiveName?: string;
    readonly resourceGroupName: string;
    readonly restorePointInTime?: string;
    readonly serverName: string;
    readonly sourceDatabaseDeletionDate?: string;
    readonly sourceDatabaseId?: string;
    readonly tags?: {[key: string]: any};
}

