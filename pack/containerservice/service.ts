// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Service extends lumi.NamedResource implements ServiceArgs {
    public readonly agentPoolProfile: { count?: number, dnsPrefix: string, fqdn: string, name: string, vmSize: string }[];
    public readonly diagnosticsProfile: { enabled: boolean, storageUri: string }[];
    public readonly linuxProfile: { adminUsername: string, sshKey: { keyData: string }[] }[];
    public readonly location: string;
    public readonly masterProfile: { count?: number, dnsPrefix: string, fqdn: string }[];
    public readonly serviceName?: string;
    public readonly orchestrationPlatform: string;
    public readonly resourceGroupName: string;
    public readonly servicePrincipal?: { clientId: string, clientSecret: string }[];
    public readonly tags: {[key: string]: any};

    constructor(name: string, args: ServiceArgs) {
        super(name);
        if (lumirt.defaultIfComputed(args.agentPoolProfile, "") === undefined) {
            throw new Error("Property argument 'agentPoolProfile' is required, but was missing");
        }
        this.agentPoolProfile = args.agentPoolProfile;
        if (lumirt.defaultIfComputed(args.diagnosticsProfile, "") === undefined) {
            throw new Error("Property argument 'diagnosticsProfile' is required, but was missing");
        }
        this.diagnosticsProfile = args.diagnosticsProfile;
        if (lumirt.defaultIfComputed(args.linuxProfile, "") === undefined) {
            throw new Error("Property argument 'linuxProfile' is required, but was missing");
        }
        this.linuxProfile = args.linuxProfile;
        if (lumirt.defaultIfComputed(args.location, "") === undefined) {
            throw new Error("Property argument 'location' is required, but was missing");
        }
        this.location = args.location;
        if (lumirt.defaultIfComputed(args.masterProfile, "") === undefined) {
            throw new Error("Property argument 'masterProfile' is required, but was missing");
        }
        this.masterProfile = args.masterProfile;
        this.serviceName = args.serviceName;
        if (lumirt.defaultIfComputed(args.orchestrationPlatform, "") === undefined) {
            throw new Error("Property argument 'orchestrationPlatform' is required, but was missing");
        }
        this.orchestrationPlatform = args.orchestrationPlatform;
        if (lumirt.defaultIfComputed(args.resourceGroupName, "") === undefined) {
            throw new Error("Property argument 'resourceGroupName' is required, but was missing");
        }
        this.resourceGroupName = args.resourceGroupName;
        this.servicePrincipal = args.servicePrincipal;
        this.tags = args.tags;
    }
}

export interface ServiceArgs {
    readonly agentPoolProfile: { count?: number, dnsPrefix: string, fqdn: string, name: string, vmSize: string }[];
    readonly diagnosticsProfile: { enabled: boolean, storageUri: string }[];
    readonly linuxProfile: { adminUsername: string, sshKey: { keyData: string }[] }[];
    readonly location: string;
    readonly masterProfile: { count?: number, dnsPrefix: string, fqdn: string }[];
    readonly serviceName?: string;
    readonly orchestrationPlatform: string;
    readonly resourceGroupName: string;
    readonly servicePrincipal?: { clientId: string, clientSecret: string }[];
    readonly tags?: {[key: string]: any};
}

