// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Subscription extends lumi.NamedResource implements SubscriptionArgs {
    public readonly autoDeleteOnIdle: string;
    public readonly deadLetteringOnFilterEvaluationExceptions?: boolean;
    public readonly deadLetteringOnMessageExpiration?: boolean;
    public readonly defaultMessageTtl: string;
    public readonly enableBatchedOperations?: boolean;
    public readonly location: string;
    public readonly lockDuration: string;
    public readonly maxDeliveryCount: number;
    public readonly subscriptionName?: string;
    public readonly namespaceName: string;
    public readonly requiresSession?: boolean;
    public readonly resourceGroupName: string;
    public readonly topicName: string;

    constructor(name: string, args: SubscriptionArgs) {
        super(name);
        this.autoDeleteOnIdle = args.autoDeleteOnIdle;
        this.deadLetteringOnFilterEvaluationExceptions = args.deadLetteringOnFilterEvaluationExceptions;
        this.deadLetteringOnMessageExpiration = args.deadLetteringOnMessageExpiration;
        this.defaultMessageTtl = args.defaultMessageTtl;
        this.enableBatchedOperations = args.enableBatchedOperations;
        if (lumirt.defaultIfComputed(args.location, "") === undefined) {
            throw new Error("Property argument 'location' is required, but was missing");
        }
        this.location = args.location;
        this.lockDuration = args.lockDuration;
        if (lumirt.defaultIfComputed(args.maxDeliveryCount, "") === undefined) {
            throw new Error("Property argument 'maxDeliveryCount' is required, but was missing");
        }
        this.maxDeliveryCount = args.maxDeliveryCount;
        this.subscriptionName = args.subscriptionName;
        if (lumirt.defaultIfComputed(args.namespaceName, "") === undefined) {
            throw new Error("Property argument 'namespaceName' is required, but was missing");
        }
        this.namespaceName = args.namespaceName;
        this.requiresSession = args.requiresSession;
        if (lumirt.defaultIfComputed(args.resourceGroupName, "") === undefined) {
            throw new Error("Property argument 'resourceGroupName' is required, but was missing");
        }
        this.resourceGroupName = args.resourceGroupName;
        if (lumirt.defaultIfComputed(args.topicName, "") === undefined) {
            throw new Error("Property argument 'topicName' is required, but was missing");
        }
        this.topicName = args.topicName;
    }
}

export interface SubscriptionArgs {
    readonly autoDeleteOnIdle?: string;
    readonly deadLetteringOnFilterEvaluationExceptions?: boolean;
    readonly deadLetteringOnMessageExpiration?: boolean;
    readonly defaultMessageTtl?: string;
    readonly enableBatchedOperations?: boolean;
    readonly location: string;
    readonly lockDuration?: string;
    readonly maxDeliveryCount: number;
    readonly subscriptionName?: string;
    readonly namespaceName: string;
    readonly requiresSession?: boolean;
    readonly resourceGroupName: string;
    readonly topicName: string;
}

