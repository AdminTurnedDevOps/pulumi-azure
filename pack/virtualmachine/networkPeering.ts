// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class NetworkPeering extends lumi.NamedResource implements NetworkPeeringArgs {
    public readonly allowForwardedTraffic: boolean;
    public readonly allowGatewayTransit: boolean;
    public readonly allowVirtualNetworkAccess: boolean;
    public readonly networkPeeringName?: string;
    public readonly remoteVirtualNetworkId: string;
    public readonly resourceGroupName: string;
    public readonly useRemoteGateways: boolean;
    public readonly virtualNetworkName: string;

    constructor(name: string, args: NetworkPeeringArgs) {
        super(name);
        this.allowForwardedTraffic = args.allowForwardedTraffic;
        this.allowGatewayTransit = args.allowGatewayTransit;
        this.allowVirtualNetworkAccess = args.allowVirtualNetworkAccess;
        this.networkPeeringName = args.networkPeeringName;
        if (lumirt.defaultIfComputed(args.remoteVirtualNetworkId, "") === undefined) {
            throw new Error("Property argument 'remoteVirtualNetworkId' is required, but was missing");
        }
        this.remoteVirtualNetworkId = args.remoteVirtualNetworkId;
        if (lumirt.defaultIfComputed(args.resourceGroupName, "") === undefined) {
            throw new Error("Property argument 'resourceGroupName' is required, but was missing");
        }
        this.resourceGroupName = args.resourceGroupName;
        this.useRemoteGateways = args.useRemoteGateways;
        if (lumirt.defaultIfComputed(args.virtualNetworkName, "") === undefined) {
            throw new Error("Property argument 'virtualNetworkName' is required, but was missing");
        }
        this.virtualNetworkName = args.virtualNetworkName;
    }
}

export interface NetworkPeeringArgs {
    readonly allowForwardedTraffic?: boolean;
    readonly allowGatewayTransit?: boolean;
    readonly allowVirtualNetworkAccess?: boolean;
    readonly networkPeeringName?: string;
    readonly remoteVirtualNetworkId: string;
    readonly resourceGroupName: string;
    readonly useRemoteGateways?: boolean;
    readonly virtualNetworkName: string;
}

